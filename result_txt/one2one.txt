Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=3, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='ETTh1', repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/ETTh1_epochs_250
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=5.974791084017072
Epoch #1: loss=4.082830429077148
Epoch #2: loss=2.8870420115334645
Epoch #3: loss=2.496960776192801
Epoch #4: loss=2.243709989956447
Epoch #5: loss=2.0440457548413957
Epoch #6: loss=2.0698114463261197
Epoch #29: loss=1.061785297734397
Epoch #30: loss=0.9259008169174194
Epoch #31: loss=1.1693556138447352
Epoch #32: loss=0.9579291003090995
Epoch #33: loss=1.208451816013881
Epoch #34: loss=1.0752669402531214
Epoch #35: loss=1.0988038522856576
Epoch #36: loss=1.0130776848111833
Epoch #37: loss=0.8376055870737348
Epoch #38: loss=0.8593006900378636
Epoch #39: loss=0.7839057871273586
Epoch #40: loss=0.9315054076058524
Epoch #41: loss=0.892541800226484
Epoch #42: loss=1.0081904445375716
Epoch #43: loss=0.8546645215579441
Epoch #44: loss=0.8937414033072335
Epoch #45: loss=0.9439536929130554
Epoch #46: loss=0.8563154510089329
Epoch #47: loss=0.8978464433125087
Epoch #48: loss=0.7822255321911403
Epoch #49: loss=0.8514382072857448
Epoch #50: loss=0.8008212617465428
Epoch #51: loss=0.7311824475015912
Epoch #52: loss=0.6839070745876857
Epoch #53: loss=0.702616810798645
Epoch #54: loss=0.7478687678064618
Epoch #55: loss=0.8199165633746556
Epoch #56: loss=0.7275364313806806
Epoch #57: loss=0.7835782851491656
Epoch #58: loss=0.8322629843439374
Epoch #59: loss=0.7700359054974147
Epoch #60: loss=0.870798647403717
Epoch #61: loss=0.7307914580617633
Epoch #62: loss=0.6404332177979606
Epoch #63: loss=0.5848127944128854
Epoch #64: loss=0.6040277140481132
Epoch #65: loss=0.5806156098842621
Epoch #66: loss=0.5201172998973301
Epoch #67: loss=0.6747956914561135
Epoch #68: loss=0.6592277799333844
Epoch #69: loss=0.6179121051515851
Epoch #70: loss=0.625319459608623
Epoch #71: loss=0.6323862501553127
Epoch #72: loss=0.5682545346873147
Epoch #73: loss=0.4858758066381727
Epoch #74: loss=0.5677926795823234
Epoch #75: loss=0.548145055770874
Epoch #76: loss=0.4515460729598999
Epoch #77: loss=0.5898988034043994
Epoch #78: loss=0.4319001180785043
Epoch #79: loss=0.4493099110467093
Epoch #80: loss=0.5730060594422477
Epoch #81: loss=0.5763073180403028
Epoch #82: loss=0.5124494050230298
Epoch #83: loss=0.5592840697084155
Epoch #84: loss=0.5101260329995837
Epoch #85: loss=0.5694581610815865
Epoch #86: loss=0.43276573504720417
Epoch #87: loss=0.4693152734211513
Epoch #88: loss=0.4416931058679308
Epoch #89: loss=0.4070234979901995
Epoch #90: loss=0.42274811438151766
Epoch #91: loss=0.630978158542088
Epoch #92: loss=0.5319810339382717
Epoch #93: loss=0.5512660316058567
Epoch #94: loss=0.5309376461165292
Epoch #95: loss=0.4479651621409825
Epoch #96: loss=0.4303969996316092
Epoch #97: loss=0.3994395520005907
Epoch #98: loss=0.4579490082604544
Epoch #99: loss=0.39398981417928425
Epoch #100: loss=0.39844549127987455
Epoch #101: loss=0.3806908982140677
Epoch #102: loss=0.3465398166860853
Epoch #103: loss=0.44303700753620695
Epoch #104: loss=0.40001198649406433
Epoch #105: loss=0.5552959442138672
Epoch #106: loss=0.36835119128227234
Epoch #107: loss=0.7093307205608913
Epoch #108: loss=0.41175046137401033
Epoch #109: loss=0.4139769332749503
Epoch #110: loss=0.511076956987381
Epoch #111: loss=0.4030185895306723
Epoch #112: loss=0.36999650086675373
Epoch #113: loss=0.3710967940943582
Epoch #114: loss=0.40339759417942594
Epoch #115: loss=0.47105526072638376
Epoch #116: loss=0.36129569155829294
Epoch #117: loss=0.3613140455314091
Epoch #118: loss=0.4158407279423305
Epoch #119: loss=0.42182869570595877
Epoch #120: loss=0.30820400374276297
Epoch #121: loss=0.3585130785192762
Epoch #122: loss=0.4394246680395944
Epoch #123: loss=0.3227009304932186
Epoch #124: loss=0.37152368681771414
Epoch #125: loss=0.32046895580632345
Epoch #126: loss=0.35053062438964844
Epoch #127: loss=0.40535447001457214
Epoch #128: loss=0.3752902363027845
Epoch #129: loss=0.3241642415523529
Epoch #130: loss=0.2885943502187729
Epoch #131: loss=0.3555105584008353
Epoch #132: loss=0.2700957826205662
Epoch #133: loss=0.3457615396806172
Epoch #134: loss=0.3358423411846161
Epoch #135: loss=0.5376665379319873
Epoch #136: loss=0.34482625126838684
Epoch #137: loss=0.34363151448113577
Epoch #138: loss=0.42462781071662903
Epoch #139: loss=0.3296131853546415
Epoch #140: loss=0.3538527318409511
Epoch #141: loss=0.3440320151192801
Epoch #142: loss=0.35411027499607634
Epoch #143: loss=0.5488136581012181
Epoch #144: loss=0.37296466316495624
Epoch #145: loss=0.379820248910359
Epoch #146: loss=0.3147470844643457
Epoch #147: loss=0.35378540626593996
Epoch #148: loss=0.3224871754646301
Epoch #149: loss=0.3399211721760886
Epoch #150: loss=0.42230176074164255
Epoch #151: loss=0.33680632284709383
Epoch #152: loss=0.26017614347594126
Epoch #153: loss=0.31872111771787914
Epoch #154: loss=0.2845457685845239
Epoch #155: loss=0.2744299875838416
Epoch #156: loss=0.3598154719386782
Epoch #157: loss=0.3334716579743794
Epoch #158: loss=0.33859605874334064
Epoch #159: loss=0.3711810218436377
Epoch #160: loss=0.30062427478177206
Epoch #161: loss=0.2669658362865448
Epoch #162: loss=0.4389361483710153
Epoch #163: loss=0.3354560434818268
Epoch #164: loss=0.2585674971342087
Epoch #165: loss=0.5271335265466145
Epoch #166: loss=0.4016771401677813
Epoch #167: loss=0.28085167918886456
Epoch #168: loss=0.32979867288044523
Epoch #169: loss=0.2898819702012198
Epoch #170: loss=0.2958740826163973
Epoch #171: loss=0.35280308978898184
Epoch #172: loss=0.3134507898773466
Epoch #173: loss=0.24832358956336975
Epoch #174: loss=0.24872555690152304
Epoch #175: loss=0.29373596821512493
Epoch #176: loss=0.3914575768368585
Epoch #177: loss=0.34914402663707733
Epoch #178: loss=0.36901540628501345
Epoch #179: loss=0.2871286230427878
Epoch #180: loss=0.3459295928478241
Epoch #181: loss=0.33174216534410206
Epoch #182: loss=0.25316667556762695
Epoch #183: loss=0.3907551424843924
Epoch #184: loss=0.2940114438533783
Epoch #185: loss=0.2810105234384537
Epoch #186: loss=0.3415795075041907
Epoch #187: loss=0.44601221808365415
Epoch #188: loss=0.32026407974106924
Epoch #189: loss=0.3313590884208679
Epoch #190: loss=0.2698146935020174
Epoch #191: loss=0.3218234138829367
Epoch #192: loss=0.2628953925200871
Epoch #193: loss=0.28653118865830557
Epoch #194: loss=0.24601525281156814
Epoch #195: loss=0.25033805838653017
Epoch #196: loss=0.2726721891335079
Epoch #197: loss=0.35818723482745035
Epoch #198: loss=0.26407776134354727
Epoch #199: loss=0.28667445267949787
Epoch #200: loss=0.24738512081759317
Epoch #201: loss=0.23389007576874324
Epoch #202: loss=0.2846273460558483
Epoch #203: loss=0.32374311132090433
Epoch #204: loss=0.27060921277318684
Epoch #205: loss=0.23657220814909255
Epoch #206: loss=0.2908654936722347
Epoch #207: loss=0.2534188372748239
Epoch #208: loss=0.2662421784230641
Epoch #209: loss=0.24779670791966574
Epoch #210: loss=0.22860183886119298
Epoch #211: loss=0.2315170019865036
Epoch #212: loss=0.2665890157222748
Epoch #213: loss=0.24839158994810923
Epoch #214: loss=0.21052633651665278
Epoch #215: loss=0.23798980031694686
Epoch #216: loss=0.19251508585044316
Epoch #217: loss=0.23889601869242533
Epoch #218: loss=0.19856439317975724
Epoch #219: loss=0.2600265826497759
Epoch #220: loss=0.272025146654674
Epoch #221: loss=0.35684570031506674
Epoch #222: loss=0.23498932804380143
Epoch #223: loss=0.23600607897554124
Epoch #224: loss=0.2521874244724001
Epoch #225: loss=0.35471276726041523
Epoch #226: loss=0.3698662647179195
Epoch #227: loss=0.24414534866809845
Epoch #228: loss=0.23265718349388667
Epoch #229: loss=0.27326478915555136
Epoch #230: loss=0.32228366817746845
Epoch #231: loss=0.29486013523169924
Epoch #232: loss=0.2303143356527601
Epoch #233: loss=0.23779799469879695
Epoch #234: loss=0.33499379456043243
Epoch #235: loss=0.303955865757806
Epoch #236: loss=0.2791146423135485
Epoch #237: loss=0.23590954073837825
Epoch #238: loss=0.19580020223345077
Epoch #239: loss=0.27745330546583447
Epoch #240: loss=0.20196187709059035
Epoch #241: loss=0.25842427568776266
Epoch #242: loss=0.260379250560488
Epoch #243: loss=0.2569768897124699
Epoch #244: loss=0.24530731993062155
Epoch #245: loss=0.23742654068129404
Epoch #246: loss=0.3366463673966272
Epoch #247: loss=0.26541578343936373
Epoch #248: loss=0.2329881148678916
Epoch #249: loss=0.2857580078499658

Training time: 0:02:10.449166

Finished.
n2one setting ETTh1 -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250/model.pkl', muti_dataset='ETTh1', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.95427e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.72096e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.6011300822294245, 'MAE': 0.5413439560996739}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250/model.pkl', muti_dataset='ETTh1', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.00644e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.91413e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.2599390588593475, 'MAE': 0.3639118290221208}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250/model.pkl', muti_dataset='ETTh1', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.65478e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.89079e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.63812e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.65478e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.4737208390721126, 'MAE': 0.47195456984917805}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250/model.pkl', muti_dataset='ETTh1', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.49425e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.86861e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.56181e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.17474663712065158, 'MAE': 0.2944231151268492}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250/model.pkl', muti_dataset='ETTh1', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.18673e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.30065e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.54174e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.18673e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.35551672842828325, 'MAE': 0.41856472413589846}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250/model.pkl', muti_dataset='ETTh1', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.26363e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.53658e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.26363e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8098789504381426, 'MAE': 0.46377584927310767}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> exchange_rate
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250/model.pkl', muti_dataset='ETTh1', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange_rate')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.82107e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.1672573718018386, 'MAE': 0.28925532431187795}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=3, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='ETTh2', repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/ETTh2_epochs_250
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=6.076313870293753
Epoch #1: loss=3.8114958150046214
Epoch #2: loss=2.997213670185634
Epoch #3: loss=2.8127691064562117
Epoch #4: loss=2.4085374559674944
Epoch #5: loss=2.2099179199763705
Epoch #6: loss=2.235330104827881
Epoch #7: loss=1.9569799389157976
Epoch #8: loss=1.8544150250298637
Epoch #9: loss=1.9907514367784773
Epoch #10: loss=1.8691011326653617
Epoch #11: loss=1.8023710250854492
Epoch #12: loss=1.6450748613902502
Epoch #13: loss=1.6052103212901525
Epoch #14: loss=1.4965939010892595
Epoch #15: loss=1.4315240212849207
Epoch #16: loss=1.4120034660611833
Epoch #17: loss=1.458153554371425
Epoch #18: loss=1.3422652653285436
Epoch #19: loss=1.3184306110654558
Epoch #20: loss=1.2619709457669939
Epoch #21: loss=1.3073676143373762
Epoch #22: loss=1.2175534963607788
Epoch #23: loss=1.1478895885603768
Epoch #24: loss=1.265707220349993
Epoch #25: loss=1.1226899879319328
Epoch #26: loss=1.0754413178988866
Epoch #27: loss=1.1846839019230433
Epoch #28: loss=1.1130790284701757
Epoch #29: loss=1.2280727965491158
Epoch #30: loss=0.9575214726584298
Epoch #31: loss=0.95006377356393
Epoch #32: loss=0.9647313015801566
Epoch #33: loss=1.0173080989292689
Epoch #34: loss=0.8333353485379901
Epoch #35: loss=0.963032066822052
Epoch #36: loss=0.9770280548504421
Epoch #37: loss=0.8362922242709568
Epoch #38: loss=0.9657148037637983
Epoch #39: loss=0.9278596128736224
Epoch #40: loss=1.008397706917354
Epoch #41: loss=0.8785792333739144
Epoch #42: loss=0.8737202116421291
Epoch #43: loss=0.8813844493457249
Epoch #44: loss=0.9939459221703666
Epoch #45: loss=0.8326288121087211
Epoch #46: loss=0.9214035868644714
Epoch #47: loss=1.0326154657772608
Epoch #48: loss=0.8000272512435913
Epoch #49: loss=0.8656216774668012
Epoch #50: loss=0.7239452600479126
Epoch #51: loss=0.7351746559143066
Epoch #52: loss=0.694078368800027
Epoch #53: loss=0.8287913884435382
Epoch #54: loss=0.8280585152762276
Epoch #55: loss=0.7932160581861224
Epoch #56: loss=0.846794205052512
Epoch #57: loss=0.6563358306884766
Epoch #58: loss=0.6045105840478625
Epoch #59: loss=0.6712662833077567
Epoch #60: loss=0.6387553427900586
Epoch #61: loss=0.6387748377663749
Epoch #62: loss=0.7087172738143376
Epoch #63: loss=0.6525662796837943
Epoch #64: loss=0.5565016439982823
Epoch #65: loss=0.5717573293617794
Epoch #66: loss=0.6585487978799003
Epoch #67: loss=0.7976060169083732
Epoch #68: loss=0.5761336088180542
Epoch #69: loss=0.5116539342062814
Epoch #70: loss=0.5688025866236005
Epoch #71: loss=0.592437744140625
Epoch #72: loss=0.6443668731621334
Epoch #73: loss=0.7300685175827571
Epoch #74: loss=0.6237781260694776
Epoch #75: loss=0.5454546468598502
Epoch #76: loss=0.5517819140638623
Epoch #77: loss=0.4977122460092817
Epoch #78: loss=0.5669176621096474
Epoch #79: loss=0.5167523452213832
Epoch #80: loss=0.4937769983495985
Epoch #81: loss=0.46935374821935383
Epoch #82: loss=0.5330228337219783
Epoch #83: loss=0.5248358462538038
Epoch #84: loss=0.4433359205722809
Epoch #85: loss=0.46768160802977427
Epoch #86: loss=0.4223593516009195
Epoch #87: loss=0.4224811451775687
Epoch #88: loss=0.5289074352809361
Epoch #89: loss=0.49411337290491375
Epoch #90: loss=0.44693775687898907
Epoch #91: loss=0.5239598410470145
Epoch #92: loss=0.5156090429850987
Epoch #93: loss=0.44339596799441744
Epoch #94: loss=0.38851808650153025
Epoch #95: loss=0.42823217596326557
Epoch #96: loss=0.37923618299620493
Epoch #97: loss=0.3803961021559579
Epoch #98: loss=0.39664068818092346
Epoch #99: loss=0.49012058121817453
Epoch #100: loss=0.36579427123069763
Epoch #101: loss=0.3792832706655775
Epoch #102: loss=0.5975199043750763
Epoch #103: loss=0.5467734336853027
Epoch #104: loss=0.5189348416669028
Epoch #105: loss=0.518331800188337
Epoch #106: loss=0.5699500654424939
Epoch #107: loss=0.6748532738004412
Epoch #108: loss=0.4976132937840053
Epoch #109: loss=0.38591997964041574
Epoch #110: loss=0.5943747758865356
Epoch #111: loss=0.4454083868435451
Epoch #112: loss=0.4169074722698757
Epoch #113: loss=0.39734298416546415
Epoch #114: loss=0.4298010383333479
Epoch #115: loss=0.448086964232581
Epoch #116: loss=0.423044890165329
Epoch #117: loss=0.39031549862452913
Epoch #118: loss=0.5058847154889788
Epoch #119: loss=0.34637912682124544
Epoch #120: loss=0.3836711858000074
Epoch #121: loss=0.3721984199115208
Epoch #122: loss=0.34368862211704254
Epoch #123: loss=0.3962946491582053
Epoch #124: loss=0.38471998061452595
Epoch #125: loss=0.37278186636311667
Epoch #126: loss=0.4099728422505515
Epoch #127: loss=0.3172979972192219
Epoch #128: loss=0.5345320361001151
Epoch #129: loss=0.4423604692731585
Epoch #130: loss=0.39610010385513306
Epoch #131: loss=0.4022432565689087
Epoch #132: loss=0.4084728019578116
Epoch #133: loss=0.4412921794823238
Epoch #134: loss=0.46176818013191223
Epoch #135: loss=0.3455519165311541
Epoch #136: loss=0.3345817157200405
Epoch #137: loss=0.39743854318346294
Epoch #138: loss=0.3377113257135664
Epoch #139: loss=0.301678221140589
Epoch #140: loss=0.39745100481169565
Epoch #141: loss=0.3364693948200771
Epoch #142: loss=0.3226286896637508
Epoch #143: loss=0.34239889468465534
Epoch #144: loss=0.571923988206046
Epoch #145: loss=0.40477973222732544
Epoch #146: loss=0.3186015188694
Epoch #147: loss=0.3424955095563616
Epoch #148: loss=0.3161388018301555
Epoch #149: loss=0.30361159784453257
Epoch #150: loss=0.3094075790473393
Epoch #151: loss=0.34656921454838346
Epoch #152: loss=0.32708742363112314
Epoch #153: loss=0.4088962801865169
Epoch #154: loss=0.2619947450501578
Epoch #155: loss=0.3944590538740158
Epoch #156: loss=0.2870598350252424
Epoch #157: loss=0.38256435309137615
Epoch #158: loss=0.3700918342385973
Epoch #159: loss=0.47559230242456707
Epoch #160: loss=0.383636223418372
Epoch #161: loss=0.3326971467052187
Epoch #162: loss=0.3139434222664152
Epoch #163: loss=0.30156912761075155
Epoch #164: loss=0.25027681035654886
Epoch #165: loss=0.36845171451568604
Epoch #166: loss=0.24924694640295847
Epoch #167: loss=0.3524952701159886
Epoch #168: loss=0.2652741308723177
Epoch #169: loss=0.31872565831456867
Epoch #170: loss=0.3089372387954167
Epoch #171: loss=0.2593205528599875
Epoch #172: loss=0.3087110476834433
Epoch #173: loss=0.2655071254287447
Epoch #174: loss=0.382040798664093
Epoch #175: loss=0.2855847179889679
Epoch #176: loss=0.3008825055190495
Epoch #177: loss=0.28323797030108316
Epoch #178: loss=0.3643910884857178
Epoch #179: loss=0.4530135371855327
Epoch #180: loss=0.3402283191680908
Epoch #181: loss=0.2516865474837167
Epoch #182: loss=0.27540371460574015
Epoch #183: loss=0.289592513016292
Epoch #184: loss=0.34634395369461607
Epoch #185: loss=0.22982900270393916
Epoch #186: loss=0.24972050317696162
Epoch #187: loss=0.30487209984234404
Epoch #188: loss=0.28255615276949747
Epoch #189: loss=0.2821097820997238
Epoch #190: loss=0.2913917579821178
Epoch #191: loss=0.27640171561922344
Epoch #192: loss=0.3057498037815094
Epoch #193: loss=0.36895459038870676
Epoch #194: loss=0.2622125042336328
Epoch #195: loss=0.3182326172079359
Epoch #196: loss=0.2609396938766752
Epoch #197: loss=0.2622408909457071
Epoch #198: loss=0.28571324050426483
Epoch #199: loss=0.2683937634740557
Epoch #200: loss=0.3023050363574709
Epoch #201: loss=0.259791972381728
Epoch #202: loss=0.26628745666572023
Epoch #203: loss=0.2530341637986047
Epoch #204: loss=0.31130317066396984
Epoch #205: loss=0.23907615457262313
Epoch #206: loss=0.2583611479827336
Epoch #207: loss=0.2171300777367183
Epoch #208: loss=0.21046222107751028
Epoch #209: loss=0.37994025221892763
Epoch #210: loss=0.2676395710025515
Epoch #211: loss=0.2499197040285383
Epoch #212: loss=0.23802512884140015
Epoch #213: loss=0.29047726520470213
Epoch #214: loss=0.2697853318282536
Epoch #215: loss=0.24222791407789504
Epoch #216: loss=0.21742857779775346
Epoch #217: loss=0.2349172830581665
Epoch #218: loss=0.2533068593059267
Epoch #219: loss=0.3186888226440975
Epoch #220: loss=0.19959756731987
Epoch #221: loss=0.2427579845700945
Epoch #222: loss=0.21418624477727072
Epoch #223: loss=0.2170686892100743
Epoch #224: loss=0.2785534943853106
Epoch #225: loss=0.26902477017470766
Epoch #226: loss=0.2757369599172047
Epoch #227: loss=0.31329489818641115
Epoch #228: loss=0.24929329540048326
Epoch #229: loss=0.21812198204653604
Epoch #230: loss=0.2949861628668649
Epoch #231: loss=0.22261648092951095
Epoch #232: loss=0.3748149552515575
Epoch #233: loss=0.2874542155436107
Epoch #234: loss=0.23596279748848506
Epoch #235: loss=0.2792590537241527
Epoch #236: loss=0.27276776092393057
Epoch #237: loss=0.2286316113812583
Epoch #238: loss=0.21427831053733826
Epoch #239: loss=0.2956446536949703
Epoch #240: loss=0.24679394704954966
Epoch #241: loss=0.23519930030618394
Epoch #242: loss=0.20250818771975382
Epoch #243: loss=0.25820983946323395
Epoch #244: loss=0.18069855443068913
Epoch #245: loss=0.2242558172770909
Epoch #246: loss=0.19931242508547647
Epoch #247: loss=0.18449569812842778
Epoch #248: loss=0.21290869585105351
Epoch #249: loss=0.19719040393829346

Training time: 0:04:50.987200

Finished.
n2one setting ETTh2 -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250/model.pkl', muti_dataset='ETTh2', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.62733e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.20756e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.6159404211587893, 'MAE': 0.5484341489641416}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250/model.pkl', muti_dataset='ETTh2', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.58268e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.28716e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.27159881322014245, 'MAE': 0.36937456091318077}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250/model.pkl', muti_dataset='ETTh2', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.73346e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.21558e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.40732e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.73346e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.4944068452104008, 'MAE': 0.4836409315668741}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250/model.pkl', muti_dataset='ETTh2', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.1595e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.27417e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.53401e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.18047851897864522, 'MAE': 0.29957096270670963}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250/model.pkl', muti_dataset='ETTh2', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.10263e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.43587e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.35129e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.10263e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3932836958679875, 'MAE': 0.43224194205870065}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250/model.pkl', muti_dataset='ETTh2', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.08491e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.4336e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.87895e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.08491e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8115150798941603, 'MAE': 0.46548923289768046}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> exchange_rate
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250/model.pkl', muti_dataset='ETTh2', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange_rate')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.44587e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.16529975007342107, 'MAE': 0.28803703140440307}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=3, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='ETTm1', repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/ETTm1_epochs_250
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=6.523478161204945
Epoch #1: loss=3.6244091337377373
Epoch #2: loss=2.765895214947787
Epoch #3: loss=2.500938653945923
Epoch #4: loss=2.369016473943537
Epoch #5: loss=2.182334683158181
Epoch #6: loss=2.065828648480502
Epoch #7: loss=1.942010229284113
Epoch #8: loss=1.8919526555321433
Epoch #9: loss=1.7465797771107068
Epoch #10: loss=1.666529807177457
Epoch #11: loss=1.6263258348811755
Epoch #12: loss=1.466679941524159
Epoch #13: loss=1.5157634670084172
Epoch #14: loss=1.3590063940395007
Epoch #15: loss=1.398070302876559
Epoch #16: loss=1.2634191838177768
Epoch #17: loss=1.258830644867637
Epoch #18: loss=1.4045710455287586
Epoch #19: loss=1.1818677620454268
Epoch #20: loss=1.1574567502195185
Epoch #21: loss=1.111342565579848
Epoch #22: loss=1.127214485948736
Epoch #23: loss=1.0981174273924394
Epoch #24: loss=1.1335961385206743
Epoch #25: loss=0.9135151017795909
Epoch #26: loss=0.9617998220703818
Epoch #27: loss=1.0485996333035557
Epoch #28: loss=1.01917273348028
Epoch #29: loss=0.9686465100808577
Epoch #30: loss=0.8699208281256936
Epoch #31: loss=0.8360788063569502
Epoch #32: loss=0.8639518456025557
Epoch #33: loss=0.7823733416470614
Epoch #34: loss=0.8392883864316073
Epoch #35: loss=0.8291988860477101
Epoch #36: loss=0.9916328571059487
Epoch #37: loss=0.9700744802301581
Epoch #38: loss=0.9084497473456643
Epoch #39: loss=0.8541361743753607
Epoch #40: loss=0.6808638301762667
Epoch #41: loss=0.764188907363198
Epoch #42: loss=0.6868254975839094
Epoch #43: loss=0.755384320562536
Epoch #44: loss=0.678220044482838
Epoch #45: loss=0.7016107873483137
Epoch #46: loss=0.6546966379339044
Epoch #47: loss=0.6375530037012967
Epoch #48: loss=0.7338128794323314
Epoch #49: loss=0.7849339842796326
Epoch #50: loss=0.6668549450961027
Epoch #51: loss=0.6188582669604908
Epoch #52: loss=0.5873792008920149
Epoch #53: loss=0.8056257529692217
Epoch #54: loss=0.5638877153396606
Epoch #55: loss=0.5665759146213531
Epoch #56: loss=0.7494843954389746
Epoch #57: loss=0.5966276147148826
Epoch #58: loss=0.5420497737147592
Epoch #59: loss=0.5823426002805884
Epoch #60: loss=0.5866249935193495
Epoch #61: loss=0.518919977274808
Epoch #62: loss=0.711650631644509
Epoch #63: loss=0.5731180825016715
Epoch #64: loss=0.5039952126416293
Epoch #65: loss=0.5010484727946195
Epoch #66: loss=0.41898535327477887
Epoch #67: loss=0.49249704859473487
Epoch #68: loss=0.5074199438095093
Epoch #69: loss=0.6008316413922743
Epoch #70: loss=0.5368246923793446
Epoch #71: loss=0.4478473690423099
Epoch #72: loss=0.4694326005198739
Epoch #73: loss=0.5139299766583876
Epoch #74: loss=0.3768951513550498
Epoch #75: loss=0.47924527796832
Epoch #76: loss=0.4775016199458729
Epoch #77: loss=0.43891159241849725
Epoch #78: loss=0.47649414430965076
Epoch #79: loss=0.45093904029239307
Epoch #80: loss=0.5034903396259655
Epoch #81: loss=0.46617245403203095
Epoch #82: loss=0.4168464189225977
Epoch #83: loss=0.38506278666582977
Epoch #84: loss=0.48179934241554956
Epoch #85: loss=0.37690729715607385
Epoch #86: loss=0.42422413555058563
Epoch #87: loss=0.4224433086135171
Epoch #88: loss=0.568897621198134
Epoch #89: loss=0.47902944684028625
Epoch #90: loss=0.4432852945544503
Epoch #91: loss=0.512229859828949
Epoch #92: loss=0.5239285664124922
Epoch #93: loss=0.5339104506102476
Epoch #94: loss=0.44281706484881317
Epoch #95: loss=0.38582194122401153
Epoch #96: loss=0.4034638147462498
Epoch #97: loss=0.46424233642491425
Epoch #98: loss=0.3937644768844951
Epoch #99: loss=0.4698391448367726
Epoch #100: loss=0.5026436854492534
Epoch #101: loss=0.377488759430972
Epoch #102: loss=0.31195054812864825
Epoch #103: loss=0.4735514359040694
Epoch #104: loss=0.3903958661989732
Epoch #105: loss=0.37961423126134003
Epoch #106: loss=0.31781565330245276
Epoch #107: loss=0.4213788428089835
Epoch #108: loss=0.3364160385998813
Epoch #109: loss=0.3089899474924261
Epoch #110: loss=0.3093505474654111
Epoch #111: loss=0.3045283325693824
Epoch #112: loss=0.318607208403674
Epoch #113: loss=0.28269027308984235
Epoch #114: loss=0.25089502199129626
Epoch #115: loss=0.21587148715149274
Epoch #116: loss=0.23889055306261237
Epoch #117: loss=0.3498616950078444
Epoch #118: loss=0.26301378959959204
Epoch #119: loss=0.4145097542892803
Epoch #120: loss=0.23856423117897727
Epoch #121: loss=0.30032892525196075
Epoch #122: loss=0.28499878672036255
Epoch #123: loss=0.27980845082889905
Epoch #124: loss=0.33362957022406836
Epoch #125: loss=0.23983785103667865
Epoch #126: loss=0.3600641136819666
Epoch #127: loss=0.22718166221271863
Epoch #128: loss=0.2221129983663559
Epoch #129: loss=0.27656873247840186
Epoch #130: loss=0.2249224605885419
Epoch #131: loss=0.35171263732693414
Epoch #132: loss=0.3106436702338132
Epoch #133: loss=0.28684251416813245
Epoch #134: loss=0.5619985989548943
Epoch #135: loss=0.28968143463134766
Epoch #136: loss=0.2799231572584672
Epoch #137: loss=0.2608730874278329
Epoch #138: loss=0.2971487465229901
Epoch #139: loss=0.24977256764065137
Epoch #140: loss=0.21134652468291196
Epoch #141: loss=0.16151559420607306
Epoch #142: loss=0.20206540010192178
Epoch #143: loss=0.3456462255933068
Epoch #144: loss=0.25157246264544403
Epoch #145: loss=0.26995108886198566
Epoch #146: loss=0.3087224757129496
Epoch #147: loss=0.3696835257790305
Epoch #148: loss=0.2627249454910105
Epoch #149: loss=0.24582648006352512
Epoch #150: loss=0.31808601997115393
Epoch #151: loss=0.22598464245145972
Epoch #152: loss=0.2578725435517051
Epoch #153: loss=0.20411157675764777
Epoch #154: loss=0.3137342536991293
Epoch #155: loss=0.18405138362537732
Epoch #156: loss=0.3102833073247563
Epoch #157: loss=0.2525963403961875
Epoch #158: loss=0.19806665791706604
Epoch #159: loss=0.1861067461696538
Epoch #160: loss=0.15099170058965683
Epoch #161: loss=0.12082537331364372
Epoch #162: loss=0.15075029568238693
Epoch #163: loss=0.3056362650611184
Epoch #164: loss=0.1735921556299383
Epoch #165: loss=0.13175361264835705
Epoch #166: loss=0.23118341917341406
Epoch #167: loss=0.13461549173701892
Epoch #168: loss=0.10439452799883756
Epoch #169: loss=0.24274452978914435
Epoch #170: loss=0.18796251307834277
Epoch #171: loss=0.44059586186300626
Epoch #172: loss=0.13608209111473776
Epoch #173: loss=0.21975512667135758
Epoch #174: loss=0.12099970877170563
Epoch #175: loss=0.14740590073845602
Epoch #176: loss=0.13278630545193498
Epoch #177: loss=0.25267278809439053
Epoch #178: loss=0.2043602161786773
Epoch #179: loss=0.1703539646484635
Epoch #180: loss=0.3314977545629848
Epoch #181: loss=0.20018581300973892
Epoch #182: loss=0.1227161857214841
Epoch #183: loss=0.1686291057955135
Epoch #184: loss=0.32157820056785236
Epoch #185: loss=0.1382626308636232
Epoch #186: loss=0.12365342270244252
Epoch #187: loss=0.1894630789756775
Epoch #188: loss=0.15219997479157013
Epoch #189: loss=0.18299368701197885
Epoch #190: loss=0.09448496320030907
Epoch #191: loss=0.14349623701789163
Epoch #192: loss=0.2262188893827525
Epoch #193: loss=0.18416807157072154
Epoch #194: loss=0.14153310724280097
Epoch #195: loss=0.16661792383952576
Epoch #196: loss=0.11874924735589461
Epoch #197: loss=0.1206775348294865
Epoch #198: loss=0.12257578494873914
Epoch #199: loss=0.09747474064881151
Epoch #200: loss=0.2037846798246557
Epoch #201: loss=0.12433752078901637
Epoch #202: loss=0.20277708904309708
Epoch #203: loss=0.13653538917953317
Epoch #204: loss=0.13681216368621046
Epoch #205: loss=0.08219992911273782
Epoch #206: loss=0.13401138071309437
Epoch #207: loss=0.09985711831938136
Epoch #208: loss=0.08525238626382568
Epoch #209: loss=0.07105289094827393
Epoch #210: loss=0.08225650306452405
Epoch #211: loss=0.1458273743363944
Epoch #212: loss=0.09122812070629814
Epoch #213: loss=0.10492169518362392
Epoch #214: loss=0.16236154260960492
Epoch #215: loss=0.3492621684616262
Epoch #216: loss=0.14649645780975168
Epoch #217: loss=0.11024865033951672
Epoch #218: loss=0.13094126839529385
Epoch #219: loss=0.10215114497325638
Epoch #220: loss=0.1251957037232139
Epoch #221: loss=0.08198126185346734
Epoch #222: loss=0.10976236618377945
Epoch #223: loss=0.1595212539488619
Epoch #224: loss=0.2845614522018216
Epoch #225: loss=0.20507712255824695
Epoch #226: loss=0.09099830416115848
Epoch #227: loss=0.06528551537882198
Epoch #228: loss=0.18915796212174676
Epoch #229: loss=0.16588048873977226
Epoch #230: loss=0.14001842351122337
Epoch #231: loss=0.18695904517715628
Epoch #232: loss=0.11272339996966449
Epoch #233: loss=0.395250045101751
Epoch #234: loss=0.16438154537569394
Epoch #235: loss=0.15339149263772098
Epoch #236: loss=0.15603433447805318
Epoch #237: loss=0.12671844424171883
Epoch #238: loss=0.18727191910147667
Epoch #239: loss=0.09563668783415448
Epoch #240: loss=0.15217228741808372
Epoch #241: loss=0.1871308067982847
Epoch #242: loss=0.1464981951496818
Epoch #243: loss=0.1446045386520299
Epoch #244: loss=0.1784509654072198
Epoch #245: loss=0.1641553281383081
Epoch #246: loss=0.10730760002678091
Epoch #247: loss=0.09009025178172371
Epoch #248: loss=0.09363088316538117
Epoch #249: loss=0.07359575310891325

Training time: 0:11:09.075722

Finished.
n2one setting ETTm1 -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250/model.pkl', muti_dataset='ETTm1', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.22343e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.24814e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5987579524809091, 'MAE': 0.5432301920149545}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250/model.pkl', muti_dataset='ETTm1', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.24937e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.33811e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.2676824096410431, 'MAE': 0.3677130812205239}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250/model.pkl', muti_dataset='ETTm1', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.50652e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.87133e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.50652e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.47201805458077717, 'MAE': 0.4740264815068967}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250/model.pkl', muti_dataset='ETTm1', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.52827e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.87725e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.52827e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.18081060543717217, 'MAE': 0.2998626037406939}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250/model.pkl', muti_dataset='ETTm1', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.62367e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.11757e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.62367e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3568090168524315, 'MAE': 0.422138368241409}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250/model.pkl', muti_dataset='ETTm1', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.57279e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.10813e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.57279e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8061106505390456, 'MAE': 0.4607310730124806}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> exchange_rate
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250/model.pkl', muti_dataset='ETTm1', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange_rate')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.80035e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.19740046730217653, 'MAE': 0.30585575350615457}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=3, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='ETTm2', repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/ETTm2_epochs_250
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=7.711536580866033
Epoch #1: loss=3.953532500700517
Epoch #2: loss=3.0778306397524746
Epoch #3: loss=2.8205651369961826
Epoch #4: loss=2.5182939009232954
Epoch #5: loss=2.4051533829082143
Epoch #6: loss=2.185521862723611
Epoch #7: loss=2.1177255890586157
Epoch #8: loss=2.034772103483027
Epoch #9: loss=1.8973610401153564
Epoch #10: loss=1.810365687717091
Epoch #11: loss=1.8050145561044866
Epoch #12: loss=1.6479101939634844
Epoch #13: loss=1.5918396061117
Epoch #14: loss=1.5517408089204268
Epoch #15: loss=1.5177066326141357
Epoch #16: loss=1.3889488523656672
Epoch #17: loss=1.3940655643289739
Epoch #18: loss=1.3806390328840776
Epoch #19: loss=1.4228066097606311
Epoch #20: loss=1.2705219875682483
Epoch #21: loss=1.220872077074918
Epoch #22: loss=1.2427038712935015
Epoch #23: loss=1.251658407124606
Epoch #24: loss=1.099077203057029
Epoch #25: loss=1.2143904675136914
Epoch #26: loss=1.083434359593825
Epoch #27: loss=1.051143543286757
Epoch #28: loss=1.0055854537270286
Epoch #29: loss=1.1230172840031711
Epoch #30: loss=0.9362467093901201
Epoch #31: loss=1.036986318501559
Epoch #32: loss=0.9076168266209689
Epoch #33: loss=0.8855116313154047
Epoch #34: loss=0.8172418637709185
Epoch #35: loss=0.8470975865017284
Epoch #36: loss=0.8796962662176653
Epoch #37: loss=0.8384837020527233
Epoch #38: loss=0.8548899509690024
Epoch #39: loss=0.7802049246701327
Epoch #40: loss=0.8233180913058195
Epoch #41: loss=1.1720235835422168
Epoch #42: loss=0.7842110070315275
Epoch #43: loss=0.8720315261320635
Epoch #44: loss=0.856110383163799
Epoch #45: loss=0.7592105377804149
Epoch #46: loss=0.7363961013880643
Epoch #47: loss=0.7358205264264887
Epoch #48: loss=0.7175334095954895
Epoch #49: loss=0.6673700646920637
Epoch #50: loss=0.7644881389357827
Epoch #51: loss=0.8417270942167803
Epoch #52: loss=0.7191037860783663
Epoch #53: loss=0.6555835062807257
Epoch #54: loss=0.6034773967482827
Epoch #55: loss=0.6567057940092954
Epoch #56: loss=0.600287916985425
Epoch #57: loss=0.6247967183589935
Epoch #58: loss=0.6103111857717688
Epoch #59: loss=0.5955651158636267
Epoch #60: loss=0.6186444976113059
Epoch #61: loss=0.49631264263933356
Epoch #62: loss=0.7421400438655507
Epoch #63: loss=0.532893871719187
Epoch #64: loss=0.5670363469557329
Epoch #65: loss=0.5170233060013164
Epoch #66: loss=0.5439677699045702
Epoch #67: loss=0.563639223575592
Epoch #68: loss=0.589191507209431
Epoch #69: loss=0.6862294944849882
Epoch #70: loss=0.5149567452344027
Epoch #71: loss=0.5678645507855848
Epoch #72: loss=0.5879508717493578
Epoch #73: loss=0.5108253522352739
Epoch #74: loss=0.5922525416720997
Epoch #75: loss=0.5358957268974998
Epoch #76: loss=0.49242917786944995
Epoch #77: loss=0.6059802689335563
Epoch #78: loss=0.5379172455180775
Epoch #79: loss=0.5621880509636619
Epoch #80: loss=0.40313577381047333
Epoch #81: loss=0.401618402112614
Epoch #82: loss=0.45485654744234955
Epoch #83: loss=0.5537656870755282
Epoch #84: loss=0.46253764087503607
Epoch #85: loss=0.6221551163630052
Epoch #86: loss=0.4642206620086323
Epoch #87: loss=0.4474845447323539
Epoch #88: loss=0.47257043556733563
Epoch #89: loss=0.4587661786512895
Epoch #90: loss=0.4635782377286391
Epoch #91: loss=0.4785249477083033
Epoch #92: loss=0.3978028785098683
Epoch #93: loss=0.3420442830432545
Epoch #94: loss=0.4203138541091572
Epoch #95: loss=0.7654991854320873
Epoch #96: loss=0.49159106612205505
Epoch #97: loss=0.459823416037993
Epoch #98: loss=0.4057093912904913
Epoch #99: loss=0.4252751036123796
Epoch #100: loss=0.4827625101262873
Epoch #101: loss=0.524779964577068
Epoch #102: loss=0.4438405362042514
Epoch #103: loss=0.39137490771033545
Epoch #104: loss=0.3193533041260459
Epoch #105: loss=0.4444020688533783
Epoch #106: loss=0.37852019613439386
Epoch #107: loss=0.4080286080187017
Epoch #108: loss=0.4725296145135706
Epoch #109: loss=0.37223428216847504
Epoch #110: loss=0.3321837119080804
Epoch #111: loss=0.3271201781251214
Epoch #112: loss=0.3067160424861041
Epoch #113: loss=0.3549102395772934
Epoch #114: loss=0.31142504242333496
Epoch #115: loss=0.2925047400322827
Epoch #116: loss=0.40060875632546167
Epoch #117: loss=0.3162536377256567
Epoch #118: loss=0.4282106134024533
Epoch #119: loss=0.3267029862512242
Epoch #120: loss=0.37353635105219757
Epoch #121: loss=0.40099880505691876
Epoch #122: loss=0.3290112018585205
Epoch #123: loss=0.34422195093198255
Epoch #124: loss=0.28868296336043964
Epoch #125: loss=0.28886115415529773
Epoch #126: loss=0.3023276112296365
Epoch #127: loss=0.32987986640496686
Epoch #128: loss=0.3313203074715354
Epoch #129: loss=0.310025002468716
Epoch #130: loss=0.35042625394734467
Epoch #131: loss=0.27820787646553735
Epoch #132: loss=0.27966890280896967
Epoch #133: loss=0.2848187969489531
Epoch #134: loss=0.22300084748051383
Epoch #135: loss=0.3031395131891424
Epoch #136: loss=0.256217976862734
Epoch #137: loss=0.4125484431331808
Epoch #138: loss=0.2527139295231212
Epoch #139: loss=0.247325830838897
Epoch #140: loss=0.32213523848490283
Epoch #141: loss=0.2206073132428256
Epoch #142: loss=0.26341729814356024
Epoch #143: loss=0.3041397820819508
Epoch #144: loss=0.27950818836688995
Epoch #145: loss=0.2909760651263324
Epoch #146: loss=0.2822198962623423
Epoch #147: loss=0.2569063062017614
Epoch #148: loss=0.358505365523425
Epoch #149: loss=0.23706781322305853
Epoch #150: loss=0.19449945877898822
Epoch #151: loss=0.19253535975109448
Epoch #152: loss=0.174003351141106
Epoch #153: loss=0.2003955305977301
Epoch #154: loss=0.2115614258430221
Epoch #155: loss=0.20264056054028598
Epoch #156: loss=0.16484562375328757
Epoch #157: loss=0.16566569832238284
Epoch #158: loss=0.24496505680409345
Epoch #159: loss=0.1823999834331599
Epoch #160: loss=0.2394312098622322
Epoch #161: loss=0.2822504768317396
Epoch #162: loss=0.22828730737621133
Epoch #163: loss=0.20595889199863782
Epoch #164: loss=0.12504453753883188
Epoch #165: loss=0.135515458881855
Epoch #166: loss=0.1452897306193005
Epoch #167: loss=0.15369136157360944
Epoch #168: loss=0.16550941155715423
Epoch #169: loss=0.1754572425376285
Epoch #170: loss=0.23042190074920654
Epoch #171: loss=0.23086099936203522
Epoch #172: loss=0.16354220631447705
Epoch #173: loss=0.14714067361571573
Epoch #174: loss=0.17312932353128085
Epoch #175: loss=0.14059038731184872
Epoch #176: loss=0.19073821130124005
Epoch #177: loss=0.4281667111949487
Epoch #178: loss=0.1431711349974979
Epoch #179: loss=0.1409672979604114
Epoch #180: loss=0.13887253674593839
Epoch #181: loss=0.17242445254867728
Epoch #182: loss=0.23963193595409393
Epoch #183: loss=0.130834086374803
Epoch #184: loss=0.16259287026795474
Epoch #185: loss=0.13990795070474799
Epoch #186: loss=0.13191065192222595
Epoch #187: loss=0.11417432061650536
Epoch #188: loss=0.20745477046478877
Epoch #189: loss=0.09912695295431397
Epoch #190: loss=0.265975991433317
Epoch #191: loss=0.15937150676142087
Epoch #192: loss=0.20945109697905454
Epoch #193: loss=0.13199286569248547
Epoch #194: loss=0.1379234499552033
Epoch #195: loss=0.33853392641652713
Epoch #196: loss=0.2101391086524183
Epoch #197: loss=0.1445076675577597
Epoch #198: loss=0.1564993208104914
Epoch #199: loss=0.1313414719294418
Epoch #200: loss=0.15478581257841803
Epoch #201: loss=0.2537219720807942
Epoch #202: loss=0.19711953740228305
Epoch #203: loss=0.1573777205564759
Epoch #204: loss=0.11807544495571744
Epoch #205: loss=0.14989635145122354
Epoch #206: loss=0.14363866062326866
Epoch #207: loss=0.1547356810082089
Epoch #208: loss=0.18233503672209653
Epoch #209: loss=0.18175369230183688
Epoch #210: loss=0.13846346735954285
Epoch #211: loss=0.20937574485486204
Epoch #212: loss=0.11121188883077014
Epoch #213: loss=0.0935259112580256
Epoch #214: loss=0.08843380043452437
Epoch #215: loss=0.11150637573816559
Epoch #216: loss=0.14100240577350964
Epoch #217: loss=0.10755141824483871
Epoch #218: loss=0.10156201808290048
Epoch #219: loss=0.12398551269011064
Epoch #220: loss=0.12885231829502367
Epoch #221: loss=0.07899553735147823
Epoch #222: loss=0.07442946257916364
Epoch #223: loss=0.05816341733390635
Epoch #224: loss=0.1664347364143892
Epoch #225: loss=0.1453716985204003
Epoch #226: loss=0.14906414598226547
Epoch #227: loss=0.28506948765028606
Epoch #228: loss=0.1030513271689415
Epoch #229: loss=0.1613121276552027
Epoch #230: loss=0.12888093766841022
Epoch #231: loss=0.11060074716806412
Epoch #232: loss=0.08041939105499875
Epoch #233: loss=0.14372627166184512
Epoch #234: loss=0.07791882211511786
Epoch #235: loss=0.09043326059525664
Epoch #236: loss=0.05920184437524189
Epoch #237: loss=0.06029299409552054
Epoch #238: loss=0.13686260310086337
Epoch #239: loss=0.0975392995910211
Epoch #240: loss=0.10261261446232145
Epoch #241: loss=0.19000179693102837
Epoch #242: loss=0.08408021418885751
Epoch #243: loss=0.1108903471719135
Epoch #244: loss=0.08404249410060319
Epoch #245: loss=0.11673943562941118
Epoch #246: loss=0.15399577129970898
Epoch #247: loss=0.1509953107346188
Epoch #248: loss=0.06060213663361289
Epoch #249: loss=0.06252479112961075

Training time: 0:12:24.877655

Finished.
n2one setting ETTm2 -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250/model.pkl', muti_dataset='ETTm2', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.0865e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.91043e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.91043e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5937217010349088, 'MAE': 0.543285607401733}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250/model.pkl', muti_dataset='ETTm2', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.0334e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.05957e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.2960047786814164, 'MAE': 0.38557564796194815}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250/model.pkl', muti_dataset='ETTm2', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.46484e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.76334e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.46484e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5239368460919623, 'MAE': 0.5058764054251657}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250/model.pkl', muti_dataset='ETTm2', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.48281e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.8336e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.20052007871617014, 'MAE': 0.31843615943797443}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250/model.pkl', muti_dataset='ETTm2', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.43412e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.73364e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.43412e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3589746102495797, 'MAE': 0.42421459244555476}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250/model.pkl', muti_dataset='ETTm2', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.37873e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.71388e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.37873e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=5, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='weather', repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/weather_epochs_250
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Evaluation result: {'MSE': 0.8085850329918579, 'MAE': 0.463502819965696}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> exchange_rate
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250/model.pkl', muti_dataset='ETTm2', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange_rate')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
Epoch #0: loss=9.727403686596798
Epoch #1: loss=3.5302355014360867
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.84275e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.23474114472372032, 'MAE': 0.325246047850136}
Finished.
------------------------- record done -------------------------
Epoch #2: loss=3.2616497553311863
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=3, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='electricity', repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/electricity_epochs_250
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #3: loss=2.659409449650691
Epoch #4: loss=2.4607485349361715
Epoch #5: loss=2.2575682676755466
Epoch #6: loss=2.375267959558047
Epoch #7: loss=2.237763281051929
Epoch #8: loss=1.99601045021644
Epoch #9: loss=1.9729661712279687
Epoch #10: loss=1.9022990740262544
Epoch #11: loss=1.7825784178880544
Epoch #12: loss=1.669483877145327
Epoch #13: loss=1.567816165777353
Epoch #14: loss=1.4971706775518565
Epoch #15: loss=1.343894674227788
Epoch #16: loss=1.313367669398968
Epoch #17: loss=1.2806588205007405
Epoch #18: loss=1.263183552485246
Epoch #0: loss=1.7141448133088346
Epoch #19: loss=1.1897327556059911
Epoch #20: loss=1.2331355489217317
Epoch #21: loss=1.121195829831637
Epoch #22: loss=1.0578649433759542
Epoch #23: loss=1.040431490311256
Epoch #24: loss=0.9933952826720017
Epoch #25: loss=0.9504513557140644
Epoch #26: loss=0.9225981441827921
Epoch #27: loss=0.9234272104043227
Epoch #28: loss=1.0295003744272084
Epoch #29: loss=0.9946311184993157
Epoch #30: loss=0.8599815643750705
Epoch #1: loss=0.694042251674557
Epoch #31: loss=0.9089242930595691
Epoch #32: loss=0.9150757537438319
Epoch #33: loss=0.7909462956281809
Epoch #34: loss=0.7783291614972628
Epoch #35: loss=0.7927530178656945
Epoch #36: loss=0.7082745157755338
Epoch #37: loss=0.6798295860107129
Epoch #38: loss=0.7004852294921875
Epoch #39: loss=0.6711824180988165
Epoch #40: loss=0.6158993393182755
Epoch #41: loss=0.6211489725571412
Epoch #42: loss=0.5896577571447079
Epoch #43: loss=0.716956553550867
Epoch #44: loss=0.6610932739881369
Epoch #45: loss=0.5457319135849292
Epoch #46: loss=0.5973158364112561
Epoch #47: loss=0.6497654353196805
Epoch #48: loss=0.5631382110027167
Epoch #49: loss=0.5102149821244754
Epoch #50: loss=0.5139274390844198
Epoch #51: loss=0.4781163243147043
Epoch #52: loss=0.528970344708516
Epoch #53: loss=0.4920572225864117
Epoch #2: loss=0.43438066110432705
Epoch #54: loss=0.46543920727876514
Epoch #55: loss=0.4319952428340912
Epoch #56: loss=0.45368721049565536
Epoch #57: loss=0.4812284570473891
Epoch #58: loss=0.47706882655620575
Epoch #59: loss=0.41579527350572437
Epoch #60: loss=0.5011240805570896
Epoch #61: loss=0.4510830927353639
Epoch #62: loss=0.40932024212983936
Epoch #63: loss=0.43777918127866894
Epoch #64: loss=0.37254966910068804
Epoch #65: loss=0.383652375294612
Epoch #3: loss=0.371680245081955
Epoch #66: loss=0.3578681086118405
Epoch #67: loss=0.43498130028064436
Epoch #68: loss=0.4000259116292
Epoch #69: loss=0.3733858511998103
Epoch #70: loss=0.3727748061601932
Epoch #71: loss=0.36629269787898433
Epoch #72: loss=0.3004914401815488
Epoch #73: loss=0.317355802999093
Epoch #74: loss=0.36191015346692157
Epoch #75: loss=0.4391349863547545
Epoch #76: loss=0.31767525523900986
Epoch #77: loss=0.31428053000798595
Epoch #78: loss=0.37210923433303833
Epoch #79: loss=0.5464490812558395
Epoch #4: loss=0.2887034667336681
Epoch #80: loss=0.7943299240790881
Epoch #81: loss=0.48790692308774364
Epoch #82: loss=0.37606536940886426
Epoch #83: loss=0.36974669419802153
Epoch #84: loss=0.3046570632320184
Epoch #85: loss=0.3035912364721298
Epoch #86: loss=0.2691210926725314
Epoch #87: loss=0.29578731667536956
Epoch #88: loss=0.2420857147528575
Epoch #89: loss=0.31469967789374864
Epoch #90: loss=0.5372384855380425
Epoch #91: loss=0.296569552559119
Epoch #92: loss=0.27348049271565217
Epoch #93: loss=0.29744714441207737
Epoch #94: loss=0.5002139950027833
Epoch #95: loss=0.31912297583543336
Epoch #96: loss=0.24821803317620203
Epoch #97: loss=0.22751587973191187
Epoch #98: loss=0.2546949088573456
Epoch #99: loss=0.2928687230898784
Epoch #100: loss=0.2542261372391994
Epoch #101: loss=0.24347741729938066
Epoch #102: loss=0.3175868575389569
Epoch #5: loss=0.26949173007798716
Epoch #103: loss=0.2802833547958961
Epoch #104: loss=0.292125719671066
Epoch #105: loss=0.20085825627812973
Epoch #106: loss=0.2256880563039046
Epoch #107: loss=0.20824764468348944
Epoch #108: loss=0.24686681880400732
Epoch #109: loss=0.19774407864763185
Epoch #110: loss=0.19100136367174295
Epoch #111: loss=0.16136228321836546
Epoch #112: loss=0.4154344040613908
Epoch #113: loss=0.3017679550326787
Epoch #114: loss=0.21380767942621157
Epoch #115: loss=0.17168633038034806
Epoch #116: loss=0.19830435801010865
Epoch #117: loss=0.22790006462198037
Epoch #118: loss=0.18037526710675314
Epoch #119: loss=0.22591524829085058
Epoch #120: loss=0.17208739943229234
Epoch #121: loss=0.2111328777212363
Epoch #122: loss=0.14464132774334687
Epoch #123: loss=0.17508949282077643
Epoch #124: loss=0.20905186809026277
Epoch #6: loss=0.22977608586211815
Epoch #125: loss=0.1519755692436145
Epoch #126: loss=0.22827116600595987
Epoch #127: loss=0.2824199010546391
Epoch #128: loss=0.3150396610681827
Epoch #129: loss=0.6177333172124165
Epoch #130: loss=0.2901562652908839
Epoch #131: loss=0.37095153933534253
Epoch #132: loss=0.21771755470679358
Epoch #133: loss=0.23153416010049674
Epoch #134: loss=0.22821499779820442
Epoch #135: loss=0.23966325303682914
Epoch #136: loss=0.167933015869214
Epoch #137: loss=0.219258929674442
Epoch #138: loss=0.17763067581332648
Epoch #139: loss=0.12131823427402057
Epoch #140: loss=0.17359455674886703
Epoch #7: loss=0.21693052184358935
Epoch #141: loss=0.12609770607489806
Epoch #142: loss=0.10923211720700447
Epoch #143: loss=0.1509406933417687
Epoch #144: loss=0.11417864535290462
Epoch #145: loss=0.1258749205332536
Epoch #146: loss=0.12380147925936259
Epoch #147: loss=0.14310443687897462
Epoch #148: loss=0.194308296419107
Epoch #149: loss=0.11350864544510841
Epoch #150: loss=0.11355678479258831
Epoch #151: loss=0.11169952197143665
Epoch #152: loss=0.13428161895045868
Epoch #153: loss=0.1198144626732056
Epoch #154: loss=0.11369333702784318
Epoch #155: loss=0.11015952536119865
Epoch #156: loss=0.09151962929620193
Epoch #157: loss=0.11159101458123097
Epoch #158: loss=0.14277782305501974
Epoch #159: loss=0.1341008867781896
Epoch #8: loss=0.1665494962366199
Epoch #160: loss=0.12892143614590168
Epoch #161: loss=0.17744363471865654
Epoch #162: loss=0.15586594922038224
Epoch #163: loss=0.09501733043445991
Epoch #164: loss=0.11892813100264622
Epoch #165: loss=0.11647908217631854
Epoch #166: loss=0.12102466320189145
Epoch #167: loss=0.1759952799631999
Epoch #168: loss=0.14738153565961581
Epoch #169: loss=0.09784333149974163
Epoch #170: loss=0.11858148228090543
Epoch #171: loss=0.09239794672108613
Epoch #172: loss=0.07501995721115516
Epoch #173: loss=0.12156075282165638
Epoch #174: loss=0.1236264707090763
Epoch #175: loss=0.08577398210763931
Epoch #176: loss=0.07743086107075214
Epoch #177: loss=0.11136406072630332
Epoch #178: loss=0.10643540695309639
Epoch #179: loss=0.08622962465653053
Epoch #180: loss=0.08489775500045373
Epoch #181: loss=0.07486447806541736
Epoch #9: loss=0.15606845821314883
Epoch #182: loss=0.13960063779869905
Epoch #183: loss=0.1179345827549696
Epoch #184: loss=0.11831603929973565
Epoch #185: loss=0.11017386314387505
Epoch #186: loss=0.0929078426068792
Epoch #187: loss=0.11686100524205428
Epoch #188: loss=0.11342317682619278
Epoch #189: loss=0.10496604170363683
Epoch #190: loss=0.08939450749984154
Epoch #191: loss=0.12037785551868953
Epoch #192: loss=0.15333171389423883
Epoch #193: loss=0.07307697417071232
Epoch #194: loss=0.1176589009566949
Epoch #195: loss=0.11475088705237095
Epoch #196: loss=0.10691643334352054
Epoch #197: loss=0.06978052825881885
Epoch #198: loss=0.1112118956561272
Epoch #199: loss=0.12631153057400996
Epoch #200: loss=0.22234274833821333
Epoch #201: loss=0.27883271271219623
Epoch #202: loss=0.1820323384152009
Epoch #203: loss=0.16809543652030137
Epoch #204: loss=0.10804768909628575
Epoch #205: loss=0.09975962498440193
Epoch #10: loss=0.14594961391802516
Epoch #206: loss=0.07502009218128827
Epoch #207: loss=0.07081996921736461
Epoch #208: loss=0.0728184084336345
Epoch #209: loss=0.0675128739183912
Epoch #210: loss=0.09204895923343989
Epoch #211: loss=0.06827653521815172
Epoch #212: loss=0.08135117074617973
Epoch #213: loss=0.09535485921570888
Epoch #214: loss=0.1070802415219637
Epoch #215: loss=0.07656033337116241
Epoch #216: loss=0.10326972517829675
Epoch #217: loss=0.09096057469455096
Epoch #218: loss=0.19808884624105233
Epoch #219: loss=0.09923204607688464
Epoch #220: loss=0.2087049830991488
Epoch #221: loss=0.11369372094766451
Epoch #222: loss=0.16719220879559332
Epoch #223: loss=0.0929382391847097
Epoch #224: loss=0.0914500314885607
Epoch #11: loss=0.13636819804754585
Epoch #225: loss=0.08034285272543247
Epoch #226: loss=0.1049545410160835
Epoch #227: loss=0.09034100791009572
Epoch #228: loss=0.061749911365600735
Epoch #229: loss=0.09303199464025405
Epoch #230: loss=0.07248850396046272
Epoch #231: loss=0.049150338826271206
Epoch #232: loss=0.06373563673920356
Epoch #233: loss=0.06669558190669005
Epoch #234: loss=0.07101395568595482
Epoch #235: loss=0.0635837226962814
Epoch #236: loss=0.06116404910930074
Epoch #237: loss=0.06472109781148341
Epoch #238: loss=0.09732267833673038
Epoch #239: loss=0.05225894994174059
Epoch #240: loss=0.093140587855417
Epoch #241: loss=0.061026990556946166
Epoch #242: loss=0.08187772390934137
Epoch #243: loss=0.0863335495814681
Epoch #244: loss=0.06022485811263323
Epoch #245: loss=0.04779390156125793
Epoch #246: loss=0.10783180486983977
Epoch #247: loss=0.080507044107295
Epoch #12: loss=0.12431894105821384
Epoch #248: loss=0.17036512594383496
Epoch #249: loss=0.07238410248492773

Training time: 0:14:57.799299

Finished.
n2one setting weather -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250/model.pkl', muti_dataset='weather', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.50287e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.21733e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.50287e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5791740766488183, 'MAE': 0.5334259173592463}
Finished.
------------------------- record done -------------------------
n2one setting weather -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250/model.pkl', muti_dataset='weather', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.5056e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.96815e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.2639460265496746, 'MAE': 0.3641572851987483}
Finished.
------------------------- record done -------------------------
n2one setting weather -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250/model.pkl', muti_dataset='weather', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.4667e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.83241e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Epoch #13: loss=0.10130145449504674
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.4667e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.515637554743276, 'MAE': 0.5011343506268364}
Finished.
------------------------- record done -------------------------
n2one setting weather -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250/model.pkl', muti_dataset='weather', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.48942e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.85872e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.18174433982853624, 'MAE': 0.3023285836190243}
Finished.
------------------------- record done -------------------------
n2one setting weather -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250/model.pkl', muti_dataset='weather', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
Epoch #14: loss=0.10521595355854413
Epoch #15: loss=0.09640329526128055
Epoch #16: loss=0.07839693744141736
Epoch #17: loss=0.07312882198688118
Epoch #18: loss=0.0671020967804615
Epoch #19: loss=0.054581612644490796
Epoch #20: loss=0.06301320427187321
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.7181e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.35945e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.7181e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3651223163086479, 'MAE': 0.4219961820588666}
Finished.
------------------------- record done -------------------------
n2one setting weather -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250/model.pkl', muti_dataset='weather', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
Epoch #21: loss=0.058257584811138956
Epoch #22: loss=0.04466381015668034
Epoch #23: loss=0.055237541932647474
Epoch #24: loss=0.051368067287651364
Epoch #25: loss=0.04512116600791242
Epoch #26: loss=0.041471809791430045
Epoch #27: loss=0.03934025771501024
Epoch #28: loss=0.04156237434758297
Epoch #29: loss=0.04808204337182771
Epoch #30: loss=0.04616315223311431
Epoch #31: loss=0.10082413829613558
Epoch #32: loss=0.040251075497587614
Epoch #33: loss=0.04305028814874659
Epoch #34: loss=0.035438117623398796
Epoch #35: loss=0.030152156826462655
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.70459e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.34334e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.70459e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Epoch #36: loss=0.03163506456279425
Evaluation result: {'MSE': 0.8296291915979783, 'MAE': 0.4604961613468676}
Finished.
------------------------- record done -------------------------
n2one setting weather -> exchange_rate
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250/model.pkl', muti_dataset='weather', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange_rate')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.1369e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.22282291876378005, 'MAE': 0.32191170620575427}
Finished.
------------------------- record done -------------------------
n2one setting weather -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250/model.pkl', muti_dataset='weather', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
Epoch #37: loss=0.02964790126256575
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.56859e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.95241e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.56859e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8198072578981552, 'MAE': 0.7273348800884114}
Finished.
------------------------- record done -------------------------
Epoch #38: loss=0.032084683551833124
Epoch #39: loss=0.03378807240661895
Epoch #40: loss=0.02758356872322241
Epoch #41: loss=0.026098569995807803
Epoch #42: loss=0.0267090693753027
Epoch #43: loss=0.030892613032002966
Epoch #44: loss=0.03156110342531073
Epoch #45: loss=0.03352755368353561
Epoch #46: loss=0.042988470944103054
Epoch #47: loss=0.057118429091535625
Epoch #48: loss=0.04381314328744009
Epoch #49: loss=0.03734014466777734
Epoch #50: loss=0.02459306443455365
Epoch #51: loss=0.026857966920535003
Epoch #52: loss=0.025070169966702707
Epoch #53: loss=0.025263093701691434
Epoch #54: loss=0.023705826700168933
Epoch #55: loss=0.026166497554914372
Epoch #56: loss=0.03128601393061821
Epoch #57: loss=0.02143281857944398
Epoch #58: loss=0.019056094845907756
Epoch #59: loss=0.016406281363085563
Epoch #60: loss=0.020169309400982365
Epoch #61: loss=0.01670523289144271
Epoch #62: loss=0.025775111992654864
Epoch #63: loss=0.027019796073741376
Epoch #64: loss=0.019341008206379726
Epoch #65: loss=0.019027880212905704
Epoch #66: loss=0.0637020350660914
Epoch #67: loss=0.020747519563520878
Epoch #68: loss=0.020362340905732617
Epoch #69: loss=0.01766137329562686
Epoch #70: loss=0.015997440533529722
Epoch #71: loss=0.026718273497407102
Epoch #72: loss=0.02141248720271565
Epoch #73: loss=0.02285342077460616
Epoch #74: loss=0.01898792599338017
Epoch #75: loss=0.01627179973260456
Epoch #76: loss=0.010580900290761886
Epoch #77: loss=0.0168280221702824
Epoch #78: loss=0.010804923207026172
Epoch #79: loss=0.01861422488174323
Epoch #80: loss=0.020647585043477655
Epoch #81: loss=0.021173190483620326
Epoch #82: loss=0.01982453399057851
Epoch #83: loss=0.01755564977020327
Epoch #84: loss=0.014641898165955977
Epoch #85: loss=0.019603995115618073
Epoch #86: loss=0.0195239432202507
Epoch #87: loss=0.016055724155622016
Epoch #88: loss=0.01606417268589342
Epoch #89: loss=0.014184417195271446
Epoch #90: loss=0.012950632094138671
Epoch #91: loss=0.024892645503968767
Epoch #92: loss=0.011089260610672022
Epoch #93: loss=0.01489268764008469
Epoch #94: loss=0.015891169735326248
Epoch #95: loss=0.01696098707177505
Epoch #96: loss=0.010600661522182244
Epoch #97: loss=0.020695864563395134
Epoch #98: loss=0.03401738069218952
Epoch #99: loss=0.01059174133867977
Epoch #100: loss=0.013774908900462566
Epoch #101: loss=0.016089396570472633
Epoch #102: loss=0.012053758002247523
Epoch #103: loss=0.007811703160151294
Epoch #104: loss=0.00967473947284221
Epoch #105: loss=0.01863521915668987
Epoch #106: loss=0.012990059198686893
Epoch #107: loss=0.02010804857907097
Epoch #108: loss=0.008988821207918517
Epoch #109: loss=0.008546025404123433
Epoch #110: loss=0.01735243863735139
Epoch #111: loss=0.015324983275800107
Epoch #112: loss=0.018131781925593803
Epoch #113: loss=0.011158826222572174
Epoch #114: loss=0.011310422635996987
Epoch #115: loss=0.010279483988560515
Epoch #116: loss=0.019102610051548514
Epoch #117: loss=0.017216252104482233
Epoch #118: loss=0.0089134498074291
Epoch #119: loss=0.01857846421991095
Epoch #120: loss=0.01856949797728479
Epoch #121: loss=0.011778976225437063
Epoch #122: loss=0.014895091973705003
Epoch #123: loss=0.013434134335967936
Epoch #124: loss=0.010612149093832495
Epoch #125: loss=0.014955390400124127
Epoch #126: loss=0.01360538347502387
Epoch #127: loss=0.009794211590653894
Epoch #128: loss=0.019592917913054567
Epoch #129: loss=0.009660682860200475
Epoch #130: loss=0.016115850362617732
Epoch #131: loss=0.013344021259286264
Epoch #132: loss=0.020294365496302133
Epoch #133: loss=0.011134335069809794
Epoch #134: loss=0.01073992854209814
Epoch #135: loss=0.014424911686135862
Epoch #136: loss=0.012376575901737361
Epoch #137: loss=0.012707417559370434
Epoch #138: loss=0.013904571640189168
Epoch #139: loss=0.01385507204154988
Epoch #140: loss=0.014799265657164261
Epoch #141: loss=0.007737890194348608
Epoch #142: loss=0.007068328429927406
Epoch #143: loss=0.005583933730844722
Epoch #144: loss=0.011988974159664685
Epoch #145: loss=0.01177313774399825
Epoch #146: loss=0.010967213858130773
Epoch #147: loss=0.009872219260169826
Epoch #148: loss=0.013171375649176085
Epoch #149: loss=0.01585249755766556
Epoch #150: loss=0.011243234418087415
Epoch #151: loss=0.017688012583710028
Epoch #152: loss=0.011724443313255152
Epoch #153: loss=0.03572424375390448
Epoch #154: loss=0.009448496355276954
Epoch #155: loss=0.007507764582688676
Epoch #156: loss=0.008832752631996784
Epoch #157: loss=0.04660653869162323
Epoch #158: loss=0.012192557450540573
Epoch #159: loss=0.01058162765532465
Epoch #160: loss=0.021406145017747142
Epoch #161: loss=0.012250803359145896
Epoch #162: loss=0.005853810610457808
Epoch #163: loss=0.010934421302847901
Epoch #164: loss=0.016137084086473474
Epoch #165: loss=0.007282362410376528
Epoch #166: loss=0.006526871647278131
Epoch #167: loss=0.011775071095679582
Epoch #168: loss=0.013843807248479173
Epoch #169: loss=0.008363406990786776
Epoch #170: loss=0.015696381737341714
Epoch #171: loss=0.01156097111227629
Epoch #172: loss=0.008588715372650631
Epoch #173: loss=0.014062177673463834
Epoch #174: loss=0.014664066215248843
Epoch #175: loss=0.007489704137549785
Epoch #176: loss=0.007458875345184419
Epoch #177: loss=0.008979275642576515
Epoch #178: loss=0.013654051977155347
Epoch #179: loss=0.012697970196699021
Epoch #180: loss=0.006914068494277508
Epoch #181: loss=0.013767924436478299
Epoch #182: loss=0.01023860967654961
Epoch #183: loss=0.00990670323814338
Epoch #184: loss=0.009487543317741015
Epoch #185: loss=0.008947972391135092
Epoch #186: loss=0.008761273501361097
Epoch #187: loss=0.006046750833355818
Epoch #188: loss=0.010012330728633086
Epoch #189: loss=0.008265132349415326
Epoch #190: loss=0.009366767323573012
Epoch #191: loss=0.008804509038598106
Epoch #192: loss=0.009723116423226777
Epoch #193: loss=0.02298599990582343
Epoch #194: loss=0.008144580422827358
Epoch #195: loss=0.006651897201346483
Epoch #196: loss=0.012863988877126128
Epoch #197: loss=0.0066921817696569165
Epoch #198: loss=0.008603312960855598
Epoch #199: loss=0.008869135677792723
Epoch #200: loss=0.005404428349754547
Epoch #201: loss=0.005386554339764251
Epoch #202: loss=0.01035473946622657
Epoch #203: loss=0.010727582489502271
Epoch #204: loss=0.009117778176039232
Epoch #205: loss=0.006969280450639672
Epoch #206: loss=0.009116596313276128
Epoch #207: loss=0.011766257528846684
Epoch #208: loss=0.007451433369030703
Epoch #209: loss=0.010477167810059538
Epoch #210: loss=0.00428417959832405
Epoch #211: loss=0.007869135044592019
Epoch #212: loss=0.009292551868659012
Epoch #213: loss=0.012823041650953318
Epoch #214: loss=0.006761770671194729
Epoch #215: loss=0.009630499874624986
Epoch #216: loss=0.011157353380437494
Epoch #217: loss=0.010478779553987719
Epoch #218: loss=0.011257321463906528
Epoch #219: loss=0.011334515757611416
Epoch #220: loss=0.006896860836432069
Epoch #221: loss=0.014676211900846609
Epoch #222: loss=0.006066253914706688
Epoch #223: loss=0.008951661637064862
Epoch #224: loss=0.010370819081227379
Epoch #225: loss=0.006193087879434878
Epoch #226: loss=0.008344473506576407
Epoch #227: loss=0.005977952597257348
Epoch #228: loss=0.01469104842179835
Epoch #229: loss=0.009332107319286227
Epoch #230: loss=0.005066203374602046
Epoch #231: loss=0.003865299951322297
Epoch #232: loss=0.009076108427782111
Epoch #233: loss=0.01650823189313393
Epoch #234: loss=0.009146753510183181
Epoch #235: loss=0.01084070937233655
Epoch #236: loss=0.009195339554725679
Epoch #237: loss=0.007256447740488126
Epoch #238: loss=0.007589661251504056
Epoch #239: loss=0.00786558776501656
Epoch #240: loss=0.009629097070314303
Epoch #241: loss=0.011151440383944765
Epoch #242: loss=0.009669889712080975
Epoch #243: loss=0.009100609913220299
Epoch #244: loss=0.008217235897650298
Epoch #245: loss=0.005756476592601457
Epoch #246: loss=0.00850364320914731
Epoch #247: loss=0.010579300662549793
Epoch #248: loss=0.012223511435435302
Epoch #249: loss=0.007538289298550762

Training time: 2:30:22.734934

Finished.
n2one setting electricity -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250/model.pkl', muti_dataset='electricity', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.86618e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.94795e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.76891e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.86618e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.57872506099634, 'MAE': 0.5405620922547878}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250/model.pkl', muti_dataset='electricity', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.83485e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.90387e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.73176e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3066886149637221, 'MAE': 0.3972099900170198}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250/model.pkl', muti_dataset='electricity', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.08074e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.12699e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.19548e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.08074e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5607803194755987, 'MAE': 0.516572791623259}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250/model.pkl', muti_dataset='electricity', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.06538e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.10969e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.24956e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.06538e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.20103427323339915, 'MAE': 0.31949985313983886}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250/model.pkl', muti_dataset='electricity', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=6.61374e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.40233e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.40241e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=6.61374e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.36217003323051905, 'MAE': 0.42511728687545547}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250/model.pkl', muti_dataset='electricity', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=6.96227e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.33866e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.41243e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=6.96227e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8044992163804071, 'MAE': 0.46002701760594084}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> exchange_rate
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250/model.pkl', muti_dataset='electricity', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange_rate')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.7117e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.20222299753469208, 'MAE': 0.3144814660111245}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=3, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='traffic', repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/traffic_epochs_250
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=1.0399373988955867
Epoch #1: loss=0.3502644441693399
Epoch #2: loss=0.24537974510454247
Epoch #3: loss=0.17845080305418115
Epoch #4: loss=0.13638089914004514
Epoch #5: loss=0.117770630418995
Epoch #6: loss=0.08844746789828012
Epoch #7: loss=0.07356235173610828
Epoch #8: loss=0.07868571322316222
Epoch #9: loss=0.06650284091237578
Epoch #10: loss=0.05643023293478341
Epoch #11: loss=0.05393163075972037
Epoch #12: loss=0.05122025766930696
Epoch #13: loss=0.05231168264633351
Epoch #14: loss=0.04343766654709791
Epoch #15: loss=0.05440948220167586
Epoch #16: loss=0.04591232363141105
Epoch #17: loss=0.035029707294715925
Epoch #18: loss=0.03433947330000411
Epoch #19: loss=0.039578635452732255
Epoch #20: loss=0.02823797908985421
Epoch #21: loss=0.02739771253271612
Epoch #22: loss=0.030482095275792723
Epoch #23: loss=0.025511553824480553
Epoch #24: loss=0.026021112131604195
Epoch #25: loss=0.027356229092479572
Epoch #26: loss=0.02631715040415171
Epoch #27: loss=0.027921983406321512
Epoch #28: loss=0.027459016541238408
Epoch #29: loss=0.027437025013978305
Epoch #30: loss=0.021640189032134084
Epoch #31: loss=0.026614731245728822
Epoch #32: loss=0.01996601780924056
Epoch #33: loss=0.023387891043013292
Epoch #34: loss=0.03293923189941353
Epoch #35: loss=0.02376120972327981
Epoch #36: loss=0.022629027803057887
Epoch #37: loss=0.02615119284383516
Epoch #38: loss=0.02173710961534702
Epoch #39: loss=0.02395179890068637
Epoch #40: loss=0.019338722561438527
Epoch #41: loss=0.022227665183030116
Epoch #42: loss=0.02301955176287778
Epoch #43: loss=0.021796674060237133
Epoch #44: loss=0.018878702091170894
Epoch #45: loss=0.01712114657188945
Epoch #46: loss=0.016114135564987173
Epoch #47: loss=0.023591542593054928
Epoch #48: loss=0.016781995706627546
Epoch #49: loss=0.019892024249189563
Epoch #50: loss=0.01897518735957951
Epoch #51: loss=0.018492492474331962
Epoch #52: loss=0.014633306946803702
Epoch #53: loss=0.020935849755383346
Epoch #54: loss=0.017602196146614266
Epoch #55: loss=0.01659861731822678
Epoch #56: loss=0.016024375194670166
Epoch #57: loss=0.019040442666356513
Epoch #58: loss=0.015489069163880858
Epoch #59: loss=0.014325706407807556
Epoch #60: loss=0.0156668346126764
Epoch #61: loss=0.01337175378436817
Epoch #62: loss=0.017685070657860076
Epoch #63: loss=0.01640392976696603
Epoch #64: loss=0.02107871018584846
Epoch #65: loss=0.022348134393371338
Epoch #66: loss=0.014515988819192817
Epoch #67: loss=0.014808994600839164
Epoch #68: loss=0.01838556578082493
Epoch #69: loss=0.015779098824390183
Epoch #70: loss=0.014129446349104027
Epoch #71: loss=0.012091077321697634
Epoch #72: loss=0.01781449130730349
Epoch #73: loss=0.014896335231794991
Epoch #74: loss=0.017094769532924083
Epoch #75: loss=0.012476346451294038
Epoch #76: loss=0.013624264855117953
Epoch #77: loss=0.014075180620110104
Epoch #78: loss=0.01163709178886197
Epoch #79: loss=0.012795381718655517
Epoch #80: loss=0.013842987856756639
Epoch #81: loss=0.014328463422039982
Epoch #82: loss=0.014950503419334902
Epoch #83: loss=0.015917361007266373
Epoch #84: loss=0.014551723145820651
Epoch #85: loss=0.01384437133407781
Epoch #86: loss=0.01664108351621725
Epoch #87: loss=0.0139172819301647
Epoch #88: loss=0.010289394664318838
Epoch #89: loss=0.015345298274506095
Epoch #90: loss=0.018327173089034306
Epoch #91: loss=0.01141838882787784
Epoch #92: loss=0.018470876864849425
Epoch #93: loss=0.015920274022301083
Epoch #94: loss=0.009232894624071574
Epoch #95: loss=0.014667460913538117
Epoch #96: loss=0.017432348580051563
Epoch #97: loss=0.00863833943832441
Epoch #98: loss=0.02133484591999774
Epoch #99: loss=0.012338588150952005
Epoch #100: loss=0.017456967722942723
Epoch #101: loss=0.01739912487111614
Epoch #102: loss=0.01205130359641408
Epoch #103: loss=0.010698804037395341
Epoch #104: loss=0.014767579374241474
Epoch #105: loss=0.01612205710248555
Epoch #106: loss=0.007348551020384637
Epoch #107: loss=0.012682471643548417
Epoch #108: loss=0.017168501439140223
Epoch #109: loss=0.017044926326878703
Epoch #110: loss=0.009456006234508763
Epoch #111: loss=0.013852497695488996
Epoch #112: loss=0.015547949842652311
Epoch #113: loss=0.01283829739974869
Epoch #114: loss=0.01198638682519037
Epoch #115: loss=0.010863789922102374
Epoch #116: loss=0.009752243939433853
Epoch #117: loss=0.011081083764210279
Epoch #118: loss=0.01342113214067406
Epoch #119: loss=0.011233506650499688
Epoch #120: loss=0.009219092120491552
Epoch #121: loss=0.011497848111091629
Epoch #122: loss=0.016513240175909716
Epoch #123: loss=0.008501047624913617
Epoch #124: loss=0.011643228301903494
Epoch #125: loss=0.011797422475034042
Epoch #126: loss=0.012878386619400337
Epoch #127: loss=0.008233225120593721
Epoch #128: loss=0.014183283618629992
Epoch #129: loss=0.013412060355511008
Epoch #130: loss=0.010400232893476566
Epoch #131: loss=0.015560956105862403
Epoch #132: loss=0.01182163826982964
Epoch #133: loss=0.016801874186775298
Epoch #134: loss=0.010416787593273538
Epoch #135: loss=0.012880012436113277
Epoch #136: loss=0.009416575385402108
Epoch #137: loss=0.011107549041161463
Epoch #138: loss=0.008403851112352577
Epoch #139: loss=0.008767845226432036
Epoch #140: loss=0.012189331029009279
Epoch #141: loss=0.011987206040248988
Epoch #142: loss=0.012258494965208904
Epoch #143: loss=0.009693481600196467
Epoch #144: loss=0.012727756467483087
Epoch #145: loss=0.019369733351779227
Epoch #146: loss=0.009734404826557167
Epoch #147: loss=0.012803256976944361
Epoch #148: loss=0.00977195426448204
Epoch #149: loss=0.012146911505240247
Epoch #150: loss=0.007985751824307616
Epoch #151: loss=0.010774963342783467
Epoch #152: loss=0.0064968732535447965
Epoch #153: loss=0.012072803462351636
Epoch #154: loss=0.017094428373940707
Epoch #155: loss=0.009185233826994417
Epoch #156: loss=0.014098945040391648
Epoch #157: loss=0.013394434201658601
Epoch #158: loss=0.011019837650938528
Epoch #159: loss=0.018279856472522487
Epoch #160: loss=0.007071056685926949
Epoch #161: loss=0.006563075220142383
Epoch #162: loss=0.0140478796497107
Epoch #163: loss=0.011848399351192142
Epoch #164: loss=0.012117435896477182
Epoch #165: loss=0.006508176611169736
Epoch #166: loss=0.010870705030540063
Epoch #167: loss=0.00986412459255948
Epoch #168: loss=0.010468486190540987
Epoch #169: loss=0.011878028596619919
Epoch #170: loss=0.006354803602277893
Epoch #171: loss=0.010510066374475968
Epoch #172: loss=0.010688947000871132
Epoch #173: loss=0.024170888620392784
Epoch #174: loss=0.009672340822316033
Epoch #175: loss=0.007668238227509406
Epoch #176: loss=0.00900042965671095
Epoch #177: loss=0.00896911636005918
Epoch #178: loss=0.010434386716673303
Epoch #179: loss=0.009529281103253698
Epoch #180: loss=0.009559856054212102
Epoch #181: loss=0.012158944559859013
Epoch #182: loss=0.013143890610233078
Epoch #183: loss=0.010990580424252874
Epoch #184: loss=0.014976295791585279
Epoch #185: loss=0.0070613292603320795
Epoch #186: loss=0.008667613739741203
Epoch #187: loss=0.01274759406593262
Epoch #188: loss=0.010328497225121571
Epoch #189: loss=0.007716179813504129
Epoch #190: loss=0.006469228044752231
Epoch #191: loss=0.010799564865938811
Epoch #192: loss=0.012143268718662685
Epoch #193: loss=0.00533343007690284
Epoch #194: loss=0.006968282882737055
Epoch #195: loss=0.007470441216942174
Epoch #196: loss=0.012044640601578999
Epoch #197: loss=0.01209141768470011
Epoch #198: loss=0.007935598367107886
Epoch #199: loss=0.009343578285978472
Epoch #200: loss=0.010592065449828242
Epoch #201: loss=0.007297677039316657
Epoch #202: loss=0.01068973485041598
Epoch #203: loss=0.006034890426767276
Epoch #204: loss=0.009044531564218243
Epoch #205: loss=0.009825158648411937
Epoch #206: loss=0.007572091002049807
Epoch #207: loss=0.011183241971247744
Epoch #208: loss=0.005427315967511523
Epoch #209: loss=0.00912000529462725
Epoch #210: loss=0.013565334458580174
Epoch #211: loss=0.008291168081645855
Epoch #212: loss=0.0075970929026842205
Epoch #213: loss=0.007078186370224394
Epoch #214: loss=0.011507169554365086
Epoch #215: loss=0.009107794058424087
Epoch #216: loss=0.008317573110764363
Epoch #217: loss=0.006101221774451598
Epoch #218: loss=0.008636512443046272
Epoch #219: loss=0.007644578282011099
Epoch #220: loss=0.011441754354199118
Epoch #221: loss=0.010174936570312635
Epoch #222: loss=0.008574061743139743
Epoch #223: loss=0.017672633901122295
Epoch #224: loss=0.008527168124721584
Epoch #225: loss=0.008105440910963942
Epoch #226: loss=0.007513989991679907
Epoch #227: loss=0.01029480439588158
Epoch #228: loss=0.006607487131151362
Epoch #229: loss=0.010621475327680959
Epoch #230: loss=0.011132655804670632
Epoch #231: loss=0.006160204882407102
Epoch #232: loss=0.007994610840229024
Epoch #233: loss=0.008471599644683534
Epoch #234: loss=0.01122053815258206
Epoch #235: loss=0.011826264984087842
Epoch #236: loss=0.01019121905041736
Epoch #237: loss=0.007570111329250363
Epoch #238: loss=0.021257075264036637
Epoch #239: loss=0.01038570039121425
Epoch #240: loss=0.007800385969769698
Epoch #241: loss=0.005247999430873665
Epoch #242: loss=0.008188017700693334
Epoch #243: loss=0.009513152445654472
Epoch #244: loss=0.009609246867885916
Epoch #245: loss=0.01391032002827103
Epoch #246: loss=0.00577017536371384
Epoch #247: loss=0.006936310703083284
Epoch #248: loss=0.008820705406698387
Epoch #249: loss=0.006237717679645834

Training time: 3:50:12.668177

Finished.
n2one setting traffic -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250/model.pkl', muti_dataset='traffic', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.01941e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.00256e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.14015e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.01941e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.6055822681802573, 'MAE': 0.5607019421612884}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250/model.pkl', muti_dataset='traffic', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.83502e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.98081e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.21524e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.30219291131020554, 'MAE': 0.39860943723372505}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250/model.pkl', muti_dataset='traffic', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.61165e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.3563e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.61165e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5760465300954543, 'MAE': 0.5431854986565264}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250/model.pkl', muti_dataset='traffic', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.59381e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.37414e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.59381e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.205196838530041, 'MAE': 0.3235766096755619}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250/model.pkl', muti_dataset='traffic', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=6.77851e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.4349e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.64768e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=6.77851e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3752263264140508, 'MAE': 0.43477995383181156}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250/model.pkl', muti_dataset='traffic', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=6.2457e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.44669e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.56527e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=6.2457e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8283928754855088, 'MAE': 0.46923921441003646}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> exchange_rate
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250/model.pkl', muti_dataset='traffic', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange_rate')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.12187e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.25949440774110094, 'MAE': 0.3417795478243747}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=3, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='exchange_rate', repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/exchange_rate_epochs_250
Loading data... Traceback (most recent call last):
  File "train.py", line 72, in <module>
    data,train_slice, valid_slice, test_slice, scaler, pred_lens, n_covariate_cols=datautils.load_muti_forecast_csv(args,dset)
  File "/home/yupengz/ts2vec/datautils.py", line 187, in load_muti_forecast_csv
    data = pd.read_csv(f'datasets/{name}.csv', index_col='date', parse_dates=True)
  File "/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/pandas/io/parsers.py", line 688, in read_csv
    return _read(filepath_or_buffer, kwds)
  File "/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/pandas/io/parsers.py", line 454, in _read
    parser = TextFileReader(fp_or_buf, **kwds)
  File "/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/pandas/io/parsers.py", line 948, in __init__
    self._make_engine(self.engine)
  File "/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/pandas/io/parsers.py", line 1180, in _make_engine
    self._engine = CParserWrapper(self.f, **self.options)
  File "/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/pandas/io/parsers.py", line 2010, in __init__
    self._reader = parsers.TextReader(src, **kwds)
  File "pandas/_libs/parsers.pyx", line 382, in pandas._libs.parsers.TextReader.__cinit__
  File "pandas/_libs/parsers.pyx", line 674, in pandas._libs.parsers.TextReader._setup_parser_source
FileNotFoundError: [Errno 2] No such file or directory: 'datasets/exchange.csv'
n2one setting exchange_rate -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_rate_epochs_250/model.pkl', muti_dataset='exchange_rate', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
Traceback (most recent call last):
  File "finetune.py", line 81, in <module>
    model.load(args.model_path)
  File "/home/yupengz/ts2vec/ts2vec.py", line 328, in load
    state_dict = torch.load(fn, map_location=self.device)
  File "/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/torch/serialization.py", line 699, in load
    with _open_file_like(f, 'rb') as opened_file:
  File "/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/torch/serialization.py", line 231, in _open_file_like
    return _open_file(name_or_buffer, mode)
  File "/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/torch/serialization.py", line 212, in __init__
    super(_open_file, self).__init__(open(name, mode))
FileNotFoundError: [Errno 2] No such file or directory: './training/exchange_rate_epochs_250/model.pkl'
n2one setting exchange_rate -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_rate_epochs_250/model.pkl', muti_dataset='exchange_rate', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
Traceback (most recent call last):
  File "finetune.py", line 81, in <module>
    model.load(args.model_path)
  File "/home/yupengz/ts2vec/ts2vec.py", line 328, in load
    state_dict = torch.load(fn, map_location=self.device)
  File "/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/torch/serialization.py", line 699, in load
    with _open_file_like(f, 'rb') as opened_file:
  File "/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/torch/serialization.py", line 231, in _open_file_like
    return _open_file(name_or_buffer, mode)
  File "/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/torch/serialization.py", line 212, in __init__
    super(_open_file, self).__init__(open(name, mode))
FileNotFoundError: [Errno 2] No such file or directory: './training/exchange_rate_epochs_250/model.pkl'
n2one setting exchange_rate -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_rate_epochs_250/model.pkl', muti_dataset='exchange_rate', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
Traceback (most recent call last):
  File "finetune.py", line 81, in <module>
    model.load(args.model_path)
  File "/home/yupengz/ts2vec/ts2vec.py", line 328, in load
    state_dict = torch.load(fn, map_location=self.device)
  File "/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/torch/serialization.py", line 699, in load
    with _open_file_like(f, 'rb') as opened_file:
  File "/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/torch/serialization.py", line 231, in _open_file_like
    return _open_file(name_or_buffer, mode)
  File "/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/torch/serialization.py", line 212, in __init__
    super(_open_file, self).__init__(open(name, mode))
FileNotFoundError: [Errno 2] No such file or directory: './training/exchange_rate_epochs_250/model.pkl'
n2one setting exchange_rate -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_rate_epochs_250/model.pkl', muti_dataset='exchange_rate', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
Traceback (most recent call last):
  File "finetune.py", line 81, in <module>
    model.load(args.model_path)
  File "/home/yupengz/ts2vec/ts2vec.py", line 328, in load
    state_dict = torch.load(fn, map_location=self.device)
  File "/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/torch/serialization.py", line 699, in load
    with _open_file_like(f, 'rb') as opened_file:
  File "/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/torch/serialization.py", line 231, in _open_file_like
    return _open_file(name_or_buffer, mode)
  File "/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/torch/serialization.py", line 212, in __init__
    super(_open_file, self).__init__(open(name, mode))
FileNotFoundError: [Errno 2] No such file or directory: './training/exchange_rate_epochs_250/model.pkl'
n2one setting exchange_rate -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_rate_epochs_250/model.pkl', muti_dataset='exchange_rate', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
Traceback (most recent call last):
  File "finetune.py", line 81, in <module>
    model.load(args.model_path)
  File "/home/yupengz/ts2vec/ts2vec.py", line 328, in load
    state_dict = torch.load(fn, map_location=self.device)
  File "/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/torch/serialization.py", line 699, in load
    with _open_file_like(f, 'rb') as opened_file:
  File "/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/torch/serialization.py", line 231, in _open_file_like
    return _open_file(name_or_buffer, mode)
  File "/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/torch/serialization.py", line 212, in __init__
    super(_open_file, self).__init__(open(name, mode))
FileNotFoundError: [Errno 2] No such file or directory: './training/exchange_rate_epochs_250/model.pkl'
n2one setting exchange_rate -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_rate_epochs_250/model.pkl', muti_dataset='exchange_rate', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
Traceback (most recent call last):
  File "finetune.py", line 81, in <module>
    model.load(args.model_path)
  File "/home/yupengz/ts2vec/ts2vec.py", line 328, in load
    state_dict = torch.load(fn, map_location=self.device)
  File "/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/torch/serialization.py", line 699, in load
    with _open_file_like(f, 'rb') as opened_file:
  File "/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/torch/serialization.py", line 231, in _open_file_like
    return _open_file(name_or_buffer, mode)
  File "/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/torch/serialization.py", line 212, in __init__
    super(_open_file, self).__init__(open(name, mode))
FileNotFoundError: [Errno 2] No such file or directory: './training/exchange_rate_epochs_250/model.pkl'
n2one setting exchange_rate -> exchange_rate
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=0, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_rate_epochs_250/model.pkl', muti_dataset='exchange_rate', record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange_rate')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
Traceback (most recent call last):
  File "finetune.py", line 81, in <module>
    model.load(args.model_path)
  File "/home/yupengz/ts2vec/ts2vec.py", line 328, in load
    state_dict = torch.load(fn, map_location=self.device)
  File "/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/torch/serialization.py", line 699, in load
    with _open_file_like(f, 'rb') as opened_file:
  File "/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/torch/serialization.py", line 231, in _open_file_like
    return _open_file(name_or_buffer, mode)
  File "/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/torch/serialization.py", line 212, in __init__
    super(_open_file, self).__init__(open(name, mode))
FileNotFoundError: [Errno 2] No such file or directory: './training/exchange_rate_epochs_250/model.pkl'
