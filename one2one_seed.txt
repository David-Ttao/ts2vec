Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='ETTh1', random_seed=2021, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/ETTh1_epochs_250_seed_2021
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=6.315767662865775
Epoch #1: loss=3.778083256312779
Epoch #2: loss=2.995717627661569
Epoch #3: loss=2.336238775934492
Epoch #4: loss=2.355960028512137
Epoch #5: loss=2.260633707046509
Epoch #6: loss=2.0452553715024675
Epoch #7: loss=2.0129206691469466
Epoch #8: loss=1.984261921473912
Epoch #9: loss=1.8924701384135656
Epoch #10: loss=1.8633295127323695
Epoch #11: loss=1.7945905242647444
Epoch #12: loss=1.7248733384268624
Epoch #13: loss=1.6831111737659998
Epoch #14: loss=1.6935517958232336
Epoch #15: loss=1.6549116713660104
Epoch #16: loss=1.5234615973063879
Epoch #17: loss=1.5205004555838448
Epoch #18: loss=1.4248916932514735
Epoch #19: loss=1.4029995373317175
Epoch #20: loss=1.4448424066816057
Epoch #21: loss=1.2495590618678503
Epoch #22: loss=1.3854396002633231
Epoch #23: loss=1.25728440284729
Epoch #24: loss=1.245566759790693
Epoch #25: loss=1.2539597749710083
Epoch #26: loss=1.2172524162701197
Epoch #27: loss=1.2049225568771362
Epoch #28: loss=1.2216141649654932
Epoch #29: loss=1.1187839337757655
Epoch #30: loss=1.0916164687701635
Epoch #31: loss=1.0470845784459795
Epoch #32: loss=0.9743417501449585
Epoch #33: loss=1.1220061779022217
Epoch #34: loss=0.98089485509055
Epoch #35: loss=1.0149679439408439
Epoch #36: loss=1.0091407554490226
Epoch #37: loss=1.0980969752584184
Epoch #38: loss=0.937238165310451
Epoch #39: loss=0.9312149201120649
Epoch #40: loss=0.8664561595235553
Epoch #41: loss=0.8811027237347194
Epoch #42: loss=0.9491725138255528
Epoch #43: loss=0.8790807213102069
Epoch #44: loss=0.7954179133687701
Epoch #45: loss=0.7705602901322501
Epoch #46: loss=0.7651259728840419
Epoch #47: loss=0.8664289968354362
Epoch #48: loss=0.775804511138371
Epoch #49: loss=0.7206496170588902
Epoch #50: loss=0.8319494213376727
Epoch #51: loss=0.8139785187585014
Epoch #52: loss=0.8660402383123126
Epoch #53: loss=0.7955994606018066
Epoch #54: loss=0.6226612755230495
Epoch #55: loss=0.6868288006101336
Epoch #56: loss=0.7431026441710336
Epoch #57: loss=0.6748471600668771
Epoch #58: loss=0.6867140190941947
Epoch #59: loss=0.6598105941499982
Epoch #60: loss=0.712435075214931
Epoch #61: loss=0.6140838606016976
Epoch #62: loss=1.121181343282972
Epoch #63: loss=0.6727455641542163
Epoch #64: loss=0.6676063963345119
Epoch #65: loss=0.7283712880952018
Epoch #66: loss=0.6930440579141889
Epoch #67: loss=0.6555627414158413
Epoch #68: loss=0.6944350940840585
Epoch #69: loss=0.6873948318617684
Epoch #70: loss=0.5999529021126884
Epoch #71: loss=0.61880105308124
Epoch #72: loss=0.6192282097680228
Epoch #73: loss=0.5320271168436322
Epoch #74: loss=0.5441721337182182
Epoch #75: loss=0.4836298057011196
Epoch #76: loss=0.5058430177824838
Epoch #77: loss=0.5680487496512276
Epoch #78: loss=0.495586097240448
Epoch #79: loss=0.5691549735409873
Epoch #80: loss=0.5168175058705466
Epoch #81: loss=0.5267138949462346
Epoch #82: loss=0.6969636721270425
Epoch #83: loss=0.5423713624477386
Epoch #84: loss=0.601578780582973
Epoch #85: loss=0.5194082047258105
Epoch #86: loss=0.5422404153006417
Epoch #87: loss=0.5393861702510289
Epoch #88: loss=0.44112267238753183
Epoch #89: loss=0.4863614184515817
Epoch #90: loss=0.6627208292484283
Epoch #91: loss=0.4514224869864328
Epoch #92: loss=0.4642707407474518
Epoch #93: loss=0.47271986092839924
Epoch #94: loss=0.5461911857128143
Epoch #95: loss=0.47894449319158283
Epoch #96: loss=0.4550535721438272
Epoch #97: loss=0.5266935740198407
Epoch #98: loss=0.516913137265614
Epoch #99: loss=0.7660301498004368
Epoch #100: loss=0.5996930812086377
Epoch #101: loss=0.4119026150022234
Epoch #102: loss=0.5516233401639121
Epoch #103: loss=0.483151627438409
Epoch #104: loss=0.6702777019568852
Epoch #105: loss=0.5119584585939135
Epoch #106: loss=0.41810128518513273
Epoch #107: loss=0.458662429026195
Epoch #108: loss=0.4490849886621748
Epoch #109: loss=0.4011409154960087
Epoch #110: loss=0.5191283694335392
Epoch #111: loss=0.4442166600908552
Epoch #112: loss=0.3603936604091099
Epoch #113: loss=0.38089648314884733
Epoch #114: loss=0.42292473145893644
Epoch #115: loss=0.5133910817759377
Epoch #116: loss=0.49435956137520926
Epoch #117: loss=0.38368254048483713
Epoch #118: loss=0.40011907475335257
Epoch #119: loss=0.36656670910971506
Epoch #120: loss=0.5855793058872223
Epoch #121: loss=0.43180633016995024
Epoch #122: loss=0.46412091170038494
Epoch #123: loss=0.5152936748095921
Epoch #124: loss=0.3673043506486075
Epoch #125: loss=0.5094938576221466
Epoch #126: loss=0.3809194990566799
Epoch #127: loss=0.3735123191561018
Epoch #128: loss=0.33189273732049124
Epoch #129: loss=0.33212003111839294
Epoch #130: loss=0.30559289881161283
Epoch #131: loss=0.28039788348334177
Epoch #132: loss=0.44357454776763916
Epoch #133: loss=0.4368859316621508
Epoch #134: loss=0.3827711599213736
Epoch #135: loss=0.40938614095960346
Epoch #136: loss=0.39830863901547026
Epoch #137: loss=0.4068722256592342
Epoch #138: loss=0.4135065759931292
Epoch #139: loss=0.3756993625845228
Epoch #140: loss=0.3903660476207733
Epoch #141: loss=0.4639492609671184
Epoch #142: loss=0.32310100538390024
Epoch #143: loss=0.3857198400156839
Epoch #144: loss=0.5847256524222237
Epoch #145: loss=0.41578409501484465
Epoch #146: loss=0.6056661094938006
Epoch #147: loss=0.35731261117117746
Epoch #148: loss=0.4312843552657536
Epoch #149: loss=0.42799719316618784
Epoch #150: loss=0.5003759775842939
Epoch #151: loss=0.3282023072242737
Epoch #152: loss=0.36559646895953585
Epoch #153: loss=0.34090290325028555
Epoch #154: loss=0.38581729999610354
Epoch #155: loss=0.3092655028615679
Epoch #156: loss=0.26029867785317556
Epoch #157: loss=0.30387016917978016
Epoch #158: loss=0.3145400094134467
Epoch #159: loss=0.47204766954694477
Epoch #160: loss=0.32633958544049946
Epoch #161: loss=0.2957826129027775
Epoch #162: loss=0.26084218067782267
Epoch #163: loss=0.5513450290475573
Epoch #164: loss=0.4030535561697824
Epoch #165: loss=0.48638351048742023
Epoch #166: loss=0.3759046878133501
Epoch #167: loss=0.2846584916114807
Epoch #168: loss=0.4151051129613604
Epoch #169: loss=0.34249086890901836
Epoch #170: loss=0.33960545488766264
Epoch #171: loss=0.2594072201422283
Epoch #172: loss=0.28768143696444376
Epoch #173: loss=0.35398946702480316
Epoch #174: loss=0.2577908549989973
Epoch #175: loss=0.2878616175481251
Epoch #176: loss=0.33096108053411755
Epoch #177: loss=0.25478382621492657
Epoch #178: loss=0.6021656755890165
Epoch #179: loss=0.339686923793384
Epoch #180: loss=0.41381647331374033
Epoch #181: loss=0.314231738448143
Epoch #182: loss=0.3494363469736917
Epoch #183: loss=0.3416825405188969
Epoch #184: loss=0.35787623482091085
Epoch #185: loss=0.44231455453804563
Epoch #186: loss=0.2451621379171099
Epoch #187: loss=0.2790759376117161
Epoch #188: loss=0.25484230688640047
Epoch #189: loss=0.34128582903317045
Epoch #190: loss=0.2785388444151197
Epoch #191: loss=0.28133570722171236
Epoch #192: loss=0.23334212601184845
Epoch #193: loss=0.2517775126865932
Epoch #194: loss=0.28049127757549286
Epoch #195: loss=0.2433858960866928
Epoch #196: loss=0.30921641417912077
Epoch #197: loss=0.2640920600720814
Epoch #198: loss=0.2731447432722364
Epoch #199: loss=0.2284409339938845
Epoch #200: loss=0.26501925715378355
Epoch #201: loss=0.24724130758217402
Epoch #202: loss=0.2884830726044519
Epoch #203: loss=0.23793509602546692
Epoch #204: loss=0.3194489223616464
Epoch #205: loss=0.24554926582745143
Epoch #206: loss=0.3406106318746294
Epoch #207: loss=0.2735629656485149
Epoch #208: loss=0.30522575761590687
Epoch #209: loss=0.2638320816414697
Epoch #210: loss=0.22582447954586574
Epoch #211: loss=0.2727335776601519
Epoch #212: loss=0.24218517967632838
Epoch #213: loss=0.26779756588595255
Epoch #214: loss=0.2570106216839382
Epoch #215: loss=0.2666062946830477
Epoch #216: loss=0.26974934552397045
Epoch #217: loss=0.26456443539687563
Epoch #218: loss=0.3183563905102866
Epoch #219: loss=0.2785450943878719
Epoch #220: loss=0.2669792132718222
Epoch #221: loss=0.29356021114758085
Epoch #222: loss=0.2532245750938143
Epoch #223: loss=0.19728280816759383
Epoch #224: loss=0.26621441330228535
Epoch #225: loss=0.21136571679796493
Epoch #226: loss=0.40365102674279896
Epoch #227: loss=0.2897525983197348
Epoch #228: loss=0.38304701660360607
Epoch #229: loss=0.27470189545835766
Epoch #230: loss=0.24450106705938066
Epoch #231: loss=0.2998942370925631
Epoch #232: loss=0.2274535128048488
Epoch #233: loss=0.2324156335421971
Epoch #234: loss=0.24002669538770402
Epoch #235: loss=0.2984208656208856
Epoch #236: loss=0.24368656958852494
Epoch #237: loss=0.24259450605937413
Epoch #238: loss=0.2629056934799467
Epoch #239: loss=0.21243039199284144
Epoch #240: loss=0.2729435924972807
Epoch #241: loss=0.2130222065108163
Epoch #242: loss=0.40369937462466104
Epoch #243: loss=0.2653697154351643
Epoch #244: loss=0.32571407513959066
Epoch #245: loss=0.24216638718332564
Epoch #246: loss=0.21448544519288198
Epoch #247: loss=0.24371989922864096
Epoch #248: loss=0.39920071831771303
Epoch #249: loss=0.4402314956699099

Training time: 0:02:02.350250

Finished.
n2one setting ETTh1 -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2021/model.pkl', muti_dataset='ETTh1', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.86466e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.75964e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5863186470661585, 'MAE': 0.5367111117158833}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2021/model.pkl', muti_dataset='ETTh1', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.80749e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.39696e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.2648213440829996, 'MAE': 0.3663778058734591}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2021/model.pkl', muti_dataset='ETTh1', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.36734e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.82393e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.75928e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.36734e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.47637944776181274, 'MAE': 0.47658097512695236}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2021/model.pkl', muti_dataset='ETTh1', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.18115e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.77171e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.48932e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.17590685659460317, 'MAE': 0.29514498513315574}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2021/model.pkl', muti_dataset='ETTh1', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.04517e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.2100343954876223, 'MAE': 0.3106585567514556}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2021/model.pkl', muti_dataset='ETTh1', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.19365e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.27599e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.84769e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.19365e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8203802910076464, 'MAE': 0.4568390479683322}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2021/model.pkl', muti_dataset='ETTh1', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.18211e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.36817e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.89812e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.18211e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.35319949089515934, 'MAE': 0.4162496625119887}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2021/model.pkl', muti_dataset='ETTh1', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.05129e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.01923e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.84312e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.05129e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.6709078678919662, 'MAE': 0.62020449307756}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='ETTh2', random_seed=2021, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/ETTh2_epochs_250_seed_2021
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=6.162862811769758
Epoch #1: loss=3.6495514597211565
Epoch #2: loss=2.6309427874428883
Epoch #3: loss=2.4082064628601074
Epoch #4: loss=2.3554416724613736
Epoch #5: loss=2.2556926352637157
Epoch #6: loss=2.0182056767599925
Epoch #7: loss=1.990316425051008
Epoch #8: loss=1.9647151572363717
Epoch #9: loss=1.8636699233736311
Epoch #10: loss=1.824298313685826
Epoch #11: loss=1.768876552581787
Epoch #12: loss=1.7197544574737549
Epoch #13: loss=1.6798762593950545
Epoch #14: loss=1.6489600113459997
Epoch #15: loss=1.6048808268138341
Epoch #16: loss=1.513720256941659
Epoch #17: loss=1.4560938903263636
Epoch #18: loss=1.3824384723390852
Epoch #19: loss=1.3721963507788522
Epoch #20: loss=1.4337285586765833
Epoch #21: loss=1.2040067570550101
Epoch #22: loss=1.3901218005589075
Epoch #23: loss=1.2273754051753454
Epoch #24: loss=1.2115691900253296
Epoch #25: loss=1.247692244393485
Epoch #26: loss=1.1564898235457284
Epoch #27: loss=1.1836051089423043
Epoch #28: loss=1.1896637763295854
Epoch #29: loss=1.074885470526559
Epoch #30: loss=1.0910020300320216
Epoch #31: loss=1.029466015951974
Epoch #32: loss=0.9633234654154096
Epoch #33: loss=1.079015348638807
Epoch #34: loss=0.971343321459634
Epoch #35: loss=1.0057000602994646
Epoch #36: loss=1.037986057145255
Epoch #37: loss=1.1228040371622359
Epoch #38: loss=0.9242437311581203
Epoch #39: loss=0.8940009900501796
Epoch #40: loss=0.8571769339697701
Epoch #41: loss=0.8525488291467939
Epoch #42: loss=0.9250024812562125
Epoch #43: loss=0.8656929305621556
Epoch #44: loss=0.8053017854690552
Epoch #45: loss=0.7230215413229806
Epoch #46: loss=0.7728891202381679
Epoch #47: loss=0.8905762434005737
Epoch #48: loss=0.7566955089569092
Epoch #49: loss=0.66998405115945
Epoch #50: loss=0.8272200141634259
Epoch #51: loss=0.7922645040920803
Epoch #52: loss=0.7799275006566729
Epoch #53: loss=0.7790465354919434
Epoch #54: loss=0.6014256988252912
Epoch #55: loss=0.6251837611198425
Epoch #56: loss=0.6690267196723393
Epoch #57: loss=0.656248322554997
Epoch #58: loss=0.6261205502918789
Epoch #59: loss=0.71280985219138
Epoch #60: loss=0.8036598818642753
Epoch #61: loss=0.6300041164670672
Epoch #62: loss=1.0890101960727148
Epoch #63: loss=0.6603684425354004
Epoch #64: loss=0.6750194302627018
Epoch #65: loss=0.651990681886673
Epoch #66: loss=0.6591797683920179
Epoch #67: loss=0.648612950529371
Epoch #68: loss=0.6998676785400936
Epoch #69: loss=0.6907857401030404
Epoch #70: loss=0.5965701341629028
Epoch #71: loss=0.5615032187529972
Epoch #72: loss=0.6100062217031207
Epoch #73: loss=0.5077649184635707
Epoch #74: loss=0.5337406183992114
Epoch #75: loss=0.4836639165878296
Epoch #76: loss=0.5188295032296862
Epoch #77: loss=0.5571687476975578
Epoch #78: loss=0.43799852047647747
Epoch #79: loss=0.5680207354681832
Epoch #80: loss=0.4855226959500994
Epoch #81: loss=0.5301640842642102
Epoch #82: loss=0.6271213207926069
Epoch #83: loss=0.49128343377794537
Epoch #84: loss=0.5818397317613874
Epoch #85: loss=0.4314170096601759
Epoch #86: loss=0.5048103885991233
Epoch #87: loss=0.5198871110166822
Epoch #88: loss=0.4395330079964229
Epoch #89: loss=0.4571446052619389
Epoch #90: loss=0.5982102027961186
Epoch #91: loss=0.48264489429337637
Epoch #92: loss=0.47354051896503996
Epoch #93: loss=0.4773721992969513
Epoch #94: loss=0.5154720417090825
Epoch #95: loss=0.47794576627867563
Epoch #96: loss=0.4695805694375719
Epoch #97: loss=0.593591400555202
Epoch #98: loss=0.48729769246918814
Epoch #99: loss=0.7467267215251923
Epoch #100: loss=0.6536235383578709
Epoch #101: loss=0.39885152663503376
Epoch #102: loss=0.5480787839208331
Epoch #103: loss=0.47651495252336773
Epoch #104: loss=0.6169077413422721
Epoch #105: loss=0.518120527267456
Epoch #106: loss=0.3977111577987671
Epoch #107: loss=0.3917027073247092
Epoch #108: loss=0.4108914179461343
Epoch #109: loss=0.354880371264049
Epoch #110: loss=0.5030929914542607
Epoch #111: loss=0.42473314489637104
Epoch #112: loss=0.36581701040267944
Epoch #113: loss=0.35699251507009777
Epoch #114: loss=0.39109701343945097
Epoch #115: loss=0.44414655225617544
Epoch #116: loss=0.41966680543763296
Epoch #117: loss=0.3424322818006788
Epoch #118: loss=0.3724141035761152
Epoch #119: loss=0.35702208961759296
Epoch #120: loss=0.6009879154818398
Epoch #121: loss=0.43775885871478487
Epoch #122: loss=0.4142320454120636
Epoch #123: loss=0.43971959182194303
Epoch #124: loss=0.33602453555379597
Epoch #125: loss=0.4744802159922464
Epoch #126: loss=0.34656029088156565
Epoch #127: loss=0.3936228198664529
Epoch #128: loss=0.3380613114152636
Epoch #129: loss=0.30802651388304575
Epoch #130: loss=0.3006937631538936
Epoch #131: loss=0.27116852572986055
Epoch #132: loss=0.38193283336503164
Epoch #133: loss=0.4849162442343576
Epoch #134: loss=0.3433677000658853
Epoch #135: loss=0.40384667260306223
Epoch #136: loss=0.4243929407426289
Epoch #137: loss=0.42735932554517475
Epoch #138: loss=0.41605219670704435
Epoch #139: loss=0.363942278282983
Epoch #140: loss=0.38236936713968006
Epoch #141: loss=0.4240252269165857
Epoch #142: loss=0.3211962410381862
Epoch #143: loss=0.37440646971975056
Epoch #144: loss=0.5785755940846035
Epoch #145: loss=0.3822761816637857
Epoch #146: loss=0.5322377894605909
Epoch #147: loss=0.3139615058898926
Epoch #148: loss=0.40269181558064054
Epoch #149: loss=0.43447296960013254
Epoch #150: loss=0.4219636491366795
Epoch #151: loss=0.3399576459612165
Epoch #152: loss=0.3234440897192274
Epoch #153: loss=0.32116869943482534
Epoch #154: loss=0.37895047664642334
Epoch #155: loss=0.3179394815649305
Epoch #156: loss=0.27948177073683056
Epoch #157: loss=0.3125712552240917
Epoch #158: loss=0.32210570360933033
Epoch #159: loss=0.49564200426851
Epoch #160: loss=0.3591876115117754
Epoch #161: loss=0.31438916070120676
Epoch #162: loss=0.27808485286576407
Epoch #163: loss=0.6040376744100026
Epoch #164: loss=0.46117505856922697
Epoch #165: loss=0.45841146792684284
Epoch #166: loss=0.3179072397095816
Epoch #167: loss=0.2621115084205355
Epoch #168: loss=0.38698107429913114
Epoch #169: loss=0.335366319332804
Epoch #170: loss=0.34084391593933105
Epoch #171: loss=0.24012108785765512
Epoch #172: loss=0.31377815135887693
Epoch #173: loss=0.364192932844162
Epoch #174: loss=0.291069250021662
Epoch #175: loss=0.24834028950759343
Epoch #176: loss=0.2965669184923172
Epoch #177: loss=0.24828327553612844
Epoch #178: loss=0.5036907898528236
Epoch #179: loss=0.3113316425255367
Epoch #180: loss=0.39091586640902926
Epoch #181: loss=0.313865527510643
Epoch #182: loss=0.33074609296662466
Epoch #183: loss=0.38794735074043274
Epoch #184: loss=0.34045059978961945
Epoch #185: loss=0.4085191765001842
Epoch #186: loss=0.24834518986088888
Epoch #187: loss=0.271781114595277
Epoch #188: loss=0.22803629083292826
Epoch #189: loss=0.2677034671817507
Epoch #190: loss=0.2550148495606014
Epoch #191: loss=0.23880367193903243
Epoch #192: loss=0.2341786367552621
Epoch #193: loss=0.24145100372178213
Epoch #194: loss=0.2682737388781139
Epoch #195: loss=0.2260987992797579
Epoch #196: loss=0.2744677726711546
Epoch #197: loss=0.23266538551875524
Epoch #198: loss=0.2380805845771517
Epoch #199: loss=0.21318504001413072
Epoch #200: loss=0.2543575295380184
Epoch #201: loss=0.24171648706708634
Epoch #202: loss=0.22467901025499618
Epoch #203: loss=0.21322029403277806
Epoch #204: loss=0.2780621371098927
Epoch #205: loss=0.2492491113288062
Epoch #206: loss=0.3465367151158197
Epoch #207: loss=0.3356588674443109
Epoch #208: loss=0.33400125588689533
Epoch #209: loss=0.3336206759725298
Epoch #210: loss=0.294843179838998
Epoch #211: loss=0.28667146606104715
Epoch #212: loss=0.3252492994070053
Epoch #213: loss=0.24546403331415995
Epoch #214: loss=0.27344258555344175
Epoch #215: loss=0.24036827896322524
Epoch #216: loss=0.28249157326562063
Epoch #217: loss=0.2543484994343349
Epoch #218: loss=0.32234932269368854
Epoch #219: loss=0.23159903500761306
Epoch #220: loss=0.25009005836078096
Epoch #221: loss=0.27372721263340544
Epoch #222: loss=0.23015367133276804
Epoch #223: loss=0.19407503732613154
Epoch #224: loss=0.24995350199086325
Epoch #225: loss=0.18848123294966562
Epoch #226: loss=0.40481008163520266
Epoch #227: loss=0.29457526973315645
Epoch #228: loss=0.38513705347265514
Epoch #229: loss=0.29020277304308756
Epoch #230: loss=0.24712362672601426
Epoch #231: loss=0.31265729665756226
Epoch #232: loss=0.2612078253711973
Epoch #233: loss=0.24193095522267477
Epoch #234: loss=0.24706991655485971
Epoch #235: loss=0.3998868742159435
Epoch #236: loss=0.24544340584959304
Epoch #237: loss=0.2652819539819445
Epoch #238: loss=0.24838934413024358
Epoch #239: loss=0.2305398498262678
Epoch #240: loss=0.26094357882227215
Epoch #241: loss=0.2654157706669399
Epoch #242: loss=0.3676212855747768
Epoch #243: loss=0.22953852798257554
Epoch #244: loss=0.3823173578296389
Epoch #245: loss=0.24578702875546046
Epoch #246: loss=0.23754836193152837
Epoch #247: loss=0.27604097979409353
Epoch #248: loss=0.41155289326395306
Epoch #249: loss=0.5046514528138297

Training time: 0:02:09.047320

Finished.
n2one setting ETTh2 -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2021/model.pkl', muti_dataset='ETTh2', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.92639e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.70012e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.6008637906853576, 'MAE': 0.5472071841819259}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2021/model.pkl', muti_dataset='ETTh2', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.98543e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.82847e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.29227572379273875, 'MAE': 0.3861538984855035}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2021/model.pkl', muti_dataset='ETTh2', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.5804e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.85134e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.66394e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.5804e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.4845953139204017, 'MAE': 0.48119819216589815}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2021/model.pkl', muti_dataset='ETTh2', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.09651e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.97818e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.58907e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.1837046488753554, 'MAE': 0.3025289770968671}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2021/model.pkl', muti_dataset='ETTh2', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.16414e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.21865965356511305, 'MAE': 0.3165329476533772}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2021/model.pkl', muti_dataset='ETTh2', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.28699e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.63405e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.28699e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8304999524731888, 'MAE': 0.46467943785322346}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2021/model.pkl', muti_dataset='ETTh2', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.34373e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.6655e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.34373e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3499366635898574, 'MAE': 0.4198520638163163}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2021/model.pkl', muti_dataset='ETTh2', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.03413e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.0147e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.90397e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.44099882650454053, 'MAE': 0.4998378980371477}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='ETTm1', random_seed=2021, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/ETTm1_epochs_250_seed_2021
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=6.9784722328186035
Epoch #1: loss=3.731967969374223
Epoch #2: loss=2.7837079871784556
Epoch #3: loss=2.4801912741227583
Epoch #4: loss=2.374350439418446
Epoch #5: loss=2.250258445739746
Epoch #6: loss=2.096922917799516
Epoch #7: loss=2.0479422374205156
Epoch #8: loss=1.9531828273426404
Epoch #9: loss=1.8141628937287764
Epoch #10: loss=1.7606220678849653
Epoch #11: loss=1.6441746950149536
Epoch #12: loss=1.5472936955365268
Epoch #13: loss=1.5045461654663086
Epoch #14: loss=1.475655978376215
Epoch #15: loss=1.350626284425909
Epoch #16: loss=1.300268758427013
Epoch #17: loss=1.2150252840735696
Epoch #18: loss=1.317144751548767
Epoch #19: loss=1.2593740008094094
Epoch #20: loss=1.1555973183025012
Epoch #21: loss=1.0589579289609736
Epoch #22: loss=1.138547870245847
Epoch #23: loss=1.2259061499075457
Epoch #24: loss=1.185475853356448
Epoch #25: loss=1.0098864761265842
Epoch #26: loss=1.0167320424860173
Epoch #27: loss=0.9727568301287565
Epoch #28: loss=0.9708491834727201
Epoch #29: loss=0.8537767150185325
Epoch #30: loss=1.1513258002021096
Epoch #31: loss=1.0326286879452793
Epoch #32: loss=0.8529905405911532
Epoch #33: loss=0.8698975010351702
Epoch #34: loss=0.849532896822149
Epoch #35: loss=0.7384496006098661
Epoch #36: loss=0.751738120209087
Epoch #37: loss=0.7388474236835133
Epoch #38: loss=0.7904887741262262
Epoch #39: loss=0.8791135224429044
Epoch #40: loss=0.8759469173171304
Epoch #41: loss=0.8413174477490512
Epoch #42: loss=0.811613754792647
Epoch #43: loss=0.6913860711184415
Epoch #44: loss=0.7679266929626465
Epoch #45: loss=0.6945800456133756
Epoch #46: loss=0.688916184685447
Epoch #47: loss=0.7137496417218988
Epoch #48: loss=0.7166308110410516
Epoch #49: loss=0.7304625077681108
Epoch #50: loss=0.5834814581004056
Epoch #51: loss=0.6358353929086165
Epoch #52: loss=0.7764337225393816
Epoch #53: loss=0.7073532397096808
Epoch #54: loss=0.6065297722816467
Epoch #55: loss=0.6068341135978699
Epoch #56: loss=0.6966378309509971
Epoch #57: loss=0.5772112716328014
Epoch #58: loss=0.5762960016727448
Epoch #59: loss=0.5329157682982358
Epoch #60: loss=0.5657225495034998
Epoch #61: loss=0.6130081604827534
Epoch #62: loss=0.6700866682962938
Epoch #63: loss=0.5987079224803231
Epoch #64: loss=0.5674543434923346
Epoch #65: loss=0.7167415591803464
Epoch #66: loss=0.5912389565597881
Epoch #67: loss=0.5241818942806937
Epoch #68: loss=0.4848735142837871
Epoch #69: loss=0.4693906686522744
Epoch #70: loss=0.4472500140016729
Epoch #71: loss=0.47921803322705353
Epoch #72: loss=0.4674874354492534
Epoch #73: loss=0.4611582403833216
Epoch #74: loss=0.5099153518676758
Epoch #75: loss=0.5136680548841303
Epoch #76: loss=0.43115550550547516
Epoch #77: loss=0.4396880025213415
Epoch #78: loss=0.5297910110516981
Epoch #79: loss=0.5199114355173978
Epoch #80: loss=0.4427434504032135
Epoch #81: loss=0.3908408230001276
Epoch #82: loss=0.5962764431129802
Epoch #83: loss=0.4925879781896418
Epoch #84: loss=0.4828018600290472
Epoch #85: loss=0.4202997088432312
Epoch #86: loss=0.5132766122167761
Epoch #87: loss=0.4646569951014085
Epoch #88: loss=0.3682094758207148
Epoch #89: loss=0.39696449041366577
Epoch #90: loss=0.3784983212297613
Epoch #91: loss=0.47091646086085925
Epoch #92: loss=0.38382326472889294
Epoch #93: loss=0.4008872292258523
Epoch #94: loss=0.4083742851560766
Epoch #95: loss=0.34894068945537915
Epoch #96: loss=0.35883103988387366
Epoch #97: loss=0.4112268875945698
Epoch #98: loss=0.3202465122396296
Epoch #99: loss=0.5463473471728238
Epoch #100: loss=0.4773636514490301
Epoch #101: loss=0.5237474902109667
Epoch #102: loss=0.38425335829908197
Epoch #103: loss=0.3351235484535044
Epoch #104: loss=0.37632074681195343
Epoch #105: loss=0.3576919842850078
Epoch #106: loss=0.33615987409244885
Epoch #107: loss=0.35667693614959717
Epoch #108: loss=0.2794725637544285
Epoch #109: loss=0.37849571759050543
Epoch #110: loss=0.28496510603211145
Epoch #111: loss=0.4364051561463963
Epoch #112: loss=0.29579692672599445
Epoch #113: loss=0.31380812417377124
Epoch #114: loss=0.31724201007322833
Epoch #115: loss=0.29311332919380884
Epoch #116: loss=0.333671128207987
Epoch #117: loss=0.27070389552549884
Epoch #118: loss=0.2698927481066097
Epoch #119: loss=0.29875171320004895
Epoch #120: loss=0.289048660885204
Epoch #121: loss=0.25118138031526044
Epoch #122: loss=0.2783443440090526
Epoch #123: loss=0.2174064747311852
Epoch #124: loss=0.2511278986930847
Epoch #125: loss=0.2992548089135777
Epoch #126: loss=0.34381234510378406
Epoch #127: loss=0.23894809592853894
Epoch #128: loss=0.32199094783176074
Epoch #129: loss=0.416992034424435
Epoch #130: loss=0.26392280242659827
Epoch #131: loss=0.271420111710375
Epoch #132: loss=0.2561892839995297
Epoch #133: loss=0.19637794521721927
Epoch #134: loss=0.20773219452662903
Epoch #135: loss=0.19415935332124884
Epoch #136: loss=0.1811539720405232
Epoch #137: loss=0.18838497319004752
Epoch #138: loss=0.15784229744564404
Epoch #139: loss=0.23081872273575177
Epoch #140: loss=0.2704693309285424
Epoch #141: loss=0.20082993128082968
Epoch #142: loss=0.27520996603098785
Epoch #143: loss=0.21766800636594946
Epoch #144: loss=0.21586880561980334
Epoch #145: loss=0.46152191067283804
Epoch #146: loss=0.33309752426364203
Epoch #147: loss=0.24975534054366025
Epoch #148: loss=0.24273036284880203
Epoch #149: loss=0.39971323853189294
Epoch #150: loss=0.1819468248974193
Epoch #151: loss=0.19360131973570044
Epoch #152: loss=0.14456753635948355
Epoch #153: loss=0.25500248304822226
Epoch #154: loss=0.34539035301316867
Epoch #155: loss=0.21086573736234146
Epoch #156: loss=0.22193788872523743
Epoch #157: loss=0.2139305445280942
Epoch #158: loss=0.10781118747862903
Epoch #159: loss=0.16894795203750784
Epoch #160: loss=0.18932074037465182
Epoch #161: loss=0.35253242843530397
Epoch #162: loss=0.19608750262043692
Epoch #163: loss=0.21672668849880045
Epoch #164: loss=0.24866975302045996
Epoch #165: loss=0.14833429117094388
Epoch #166: loss=0.1686269302259792
Epoch #167: loss=0.15116349641572346
Epoch #168: loss=0.18143341487104242
Epoch #169: loss=0.14421085471456702
Epoch #170: loss=0.25241671604189003
Epoch #171: loss=0.1674034222960472
Epoch #172: loss=0.1352586495605382
Epoch #173: loss=0.10560509257695892
Epoch #174: loss=0.11489430374719879
Epoch #175: loss=0.15080060572786766
Epoch #176: loss=0.10500856285745447
Epoch #177: loss=0.13710786232894118
Epoch #178: loss=0.1137028807266192
Epoch #179: loss=0.11631689457730814
Epoch #180: loss=0.0954121940515258
Epoch #181: loss=0.11182070692831819
Epoch #182: loss=0.10483579947189851
Epoch #183: loss=0.14580170911821452
Epoch #184: loss=0.1445776383307847
Epoch #185: loss=0.15764289992776784
Epoch #186: loss=0.14058008993213827
Epoch #187: loss=0.10620549355040897
Epoch #188: loss=0.16909162192182106
Epoch #189: loss=0.13963671604340727
Epoch #190: loss=0.09593713283538818
Epoch #191: loss=0.11659800633788109
Epoch #192: loss=0.08606070246208798
Epoch #193: loss=0.10840359499508684
Epoch #194: loss=0.10418478297916325
Epoch #195: loss=0.10043813626874577
Epoch #196: loss=0.15397301519458945
Epoch #197: loss=0.12606596777384932
Epoch #198: loss=0.17769429223103958
Epoch #199: loss=0.10047799755226482
Epoch #200: loss=0.1333750428801233
Epoch #201: loss=0.09054998443885283
Epoch #202: loss=0.10938738083297556
Epoch #203: loss=0.11123251644047824
Epoch #204: loss=0.15490931594236332
Epoch #205: loss=0.06655990467830138
Epoch #206: loss=0.13387413051995364
Epoch #207: loss=0.23779088292609563
Epoch #208: loss=0.1905480833216147
Epoch #209: loss=0.1065370338884267
Epoch #210: loss=0.1308885243805972
Epoch #211: loss=0.09167312796820294
Epoch #212: loss=0.0685444101691246
Epoch #213: loss=0.14416533810171214
Epoch #214: loss=0.17067862234332346
Epoch #215: loss=0.21712717176838356
Epoch #216: loss=0.2085051482374018
Epoch #217: loss=0.15425811572508377
Epoch #218: loss=0.11473957347598943
Epoch #219: loss=0.15798842128027568
Epoch #220: loss=0.0918992967768149
Epoch #221: loss=0.11247121102430603
Epoch #222: loss=0.11461035873402249
Epoch #223: loss=0.11606520211154764
Epoch #224: loss=0.07358324392275377
Epoch #225: loss=0.1018506811762398
Epoch #226: loss=0.06582093323496255
Epoch #227: loss=0.09208330512046814
Epoch #228: loss=0.10023453459143639
Epoch #229: loss=0.11373886618424546
Epoch #230: loss=0.09708240679041906
Epoch #231: loss=0.3535068780183792
Epoch #232: loss=0.11717260866002603
Epoch #233: loss=0.1778783185238188
Epoch #234: loss=0.13027020476081155
Epoch #235: loss=0.08250458335334604
Epoch #236: loss=0.10457512329925191
Epoch #237: loss=0.06332174434580586
Epoch #238: loss=0.1211850873448632
Epoch #239: loss=0.09349673478440805
Epoch #240: loss=0.09493040124123747
Epoch #241: loss=0.06793745420873165
Epoch #242: loss=0.11498010903596878
Epoch #243: loss=0.20084316859191115
Epoch #244: loss=0.13195639543912627
Epoch #245: loss=0.05272787707773122
Epoch #246: loss=0.05246992426162416
Epoch #247: loss=0.09524244273250754
Epoch #248: loss=0.05225271663882516
Epoch #249: loss=0.0996346270496195

Training time: 0:04:37.087506

Finished.
n2one setting ETTm1 -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2021/model.pkl', muti_dataset='ETTm1', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.18357e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.26665e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5876429047941096, 'MAE': 0.5396447982609341}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2021/model.pkl', muti_dataset='ETTm1', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.2082e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.28577e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.26004023015798383, 'MAE': 0.36233401171422597}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2021/model.pkl', muti_dataset='ETTm1', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.56976e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.90736e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.56976e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.48055125863569625, 'MAE': 0.4798002065266008}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2021/model.pkl', muti_dataset='ETTm1', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.59159e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.82502e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.17785997243825272, 'MAE': 0.2978942854527147}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2021/model.pkl', muti_dataset='ETTm1', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.19903e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.21778112723225157, 'MAE': 0.31781586729318767}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2021/model.pkl', muti_dataset='ETTm1', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.46441e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.89235e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.46441e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.798065308922011, 'MAE': 0.45632802062181105}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2021/model.pkl', muti_dataset='ETTm1', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.49512e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.93145e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.49512e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3497304044109565, 'MAE': 0.41386052457672745}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2021/model.pkl', muti_dataset='ETTm1', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.39469e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.57515e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.39469e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5032024534859454, 'MAE': 0.5358416524429687}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='ETTm2', random_seed=2021, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/ETTm2_epochs_250_seed_2021
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=7.567287921905518
Epoch #1: loss=3.781105388294567
Epoch #2: loss=2.825890974564986
Epoch #3: loss=2.5225406126542524
Epoch #4: loss=2.4414575533433394
Epoch #5: loss=2.289093754508279
Epoch #6: loss=2.1640589237213135
Epoch #7: loss=2.138679721138694
Epoch #8: loss=2.002257563851096
Epoch #9: loss=1.869628125971014
Epoch #10: loss=1.848312497138977
Epoch #11: loss=1.7341060530055652
Epoch #12: loss=1.6166371432217685
Epoch #13: loss=1.5559765750711614
Epoch #14: loss=1.5394090197303079
Epoch #15: loss=1.4240221543745561
Epoch #16: loss=1.3467261574485085
Epoch #17: loss=1.2740955569527366
Epoch #18: loss=1.3910285234451294
Epoch #19: loss=1.3187260194258257
Epoch #20: loss=1.1949800794774836
Epoch #21: loss=1.1002753376960754
Epoch #22: loss=1.1988597458059138
Epoch #23: loss=1.2494238506663928
Epoch #24: loss=1.231861033222892
Epoch #25: loss=1.0397683598778464
Epoch #26: loss=1.065311686559157
Epoch #27: loss=0.9915881861339916
Epoch #28: loss=1.009328836744482
Epoch #29: loss=0.8798190409486945
Epoch #30: loss=1.1699935468760403
Epoch #31: loss=1.0532187060876326
Epoch #32: loss=0.9040637720714916
Epoch #33: loss=0.9035279154777527
Epoch #34: loss=0.8753175898031755
Epoch #35: loss=0.7759497653354298
Epoch #36: loss=0.7877759445797313
Epoch #37: loss=0.770932750268416
Epoch #38: loss=0.7896373542872342
Epoch #39: loss=0.9557689428329468
Epoch #40: loss=0.9121057824655012
Epoch #41: loss=0.8889393372969194
Epoch #42: loss=0.846689370545474
Epoch #43: loss=0.7185390374877236
Epoch #44: loss=0.8067708286372098
Epoch #45: loss=0.7242599779909308
Epoch #46: loss=0.7178617715835571
Epoch #47: loss=0.7362822673537515
Epoch #48: loss=0.7292599732225592
Epoch #49: loss=0.7282135324044661
Epoch #50: loss=0.6002286510034041
Epoch #51: loss=0.6249212324619293
Epoch #52: loss=0.7796949093992059
Epoch #53: loss=0.7098047895865007
Epoch #54: loss=0.5919375094500455
Epoch #55: loss=0.6141548996621912
Epoch #56: loss=0.7118920602581718
Epoch #57: loss=0.5798719769174402
Epoch #58: loss=0.5956479500640522
Epoch #59: loss=0.5614641390063546
Epoch #60: loss=0.587869175455787
Epoch #61: loss=0.6330351070924238
Epoch #62: loss=0.6921456049789082
Epoch #63: loss=0.6179652783003721
Epoch #64: loss=0.5588331628929485
Epoch #65: loss=0.7388804148543965
Epoch #66: loss=0.5992297828197479
Epoch #67: loss=0.5407016683708538
Epoch #68: loss=0.5178755386309191
Epoch #69: loss=0.5153685510158539
Epoch #70: loss=0.47915806011720136
Epoch #71: loss=0.5020863955671137
Epoch #72: loss=0.49958774176510895
Epoch #73: loss=0.5287955240769819
Epoch #74: loss=0.5576606013558127
Epoch #75: loss=0.6106168302622709
Epoch #76: loss=0.5549675144932487
Epoch #77: loss=0.5301110663197257
Epoch #78: loss=0.5632102760401639
Epoch #79: loss=0.56141397356987
Epoch #80: loss=0.4859345176003196
Epoch #81: loss=0.4333803409879858
Epoch #82: loss=0.6106437796896155
Epoch #83: loss=0.5393501249226657
Epoch #84: loss=0.5082698897881941
Epoch #85: loss=0.47254686734893103
Epoch #86: loss=0.5416302139108832
Epoch #87: loss=0.4815285151655024
Epoch #88: loss=0.40196461569179187
Epoch #89: loss=0.4241893535310572
Epoch #90: loss=0.39913791147145355
Epoch #91: loss=0.47283985398032446
Epoch #92: loss=0.39510411295023834
Epoch #93: loss=0.40999454801732843
Epoch #94: loss=0.4351048225706274
Epoch #95: loss=0.37361937219446356
Epoch #96: loss=0.37564161690798675
Epoch #97: loss=0.39790296012705023
Epoch #98: loss=0.31010211597789417
Epoch #99: loss=0.52387920292941
Epoch #100: loss=0.46154795451597735
Epoch #101: loss=0.5337633246725256
Epoch #102: loss=0.40534639900380914
Epoch #103: loss=0.3385355215181004
Epoch #104: loss=0.3803340589458292
Epoch #105: loss=0.3521067337556319
Epoch #106: loss=0.3691293570128354
Epoch #107: loss=0.37366033548658545
Epoch #108: loss=0.2933434559540315
Epoch #109: loss=0.38076277483593335
Epoch #110: loss=0.30135189674117346
Epoch #111: loss=0.44599123434586957
Epoch #112: loss=0.30488466810096393
Epoch #113: loss=0.33851683275266126
Epoch #114: loss=0.3494100651957772
Epoch #115: loss=0.31993405520915985
Epoch #116: loss=0.34719615361907263
Epoch #117: loss=0.28517342562025244
Epoch #118: loss=0.28540104627609253
Epoch #119: loss=0.31332005154002796
Epoch #120: loss=0.3198721408843994
Epoch #121: loss=0.28772868757898157
Epoch #122: loss=0.32179986617781897
Epoch #123: loss=0.25777859443967993
Epoch #124: loss=0.26678935099731793
Epoch #125: loss=0.3509167432785034
Epoch #126: loss=0.34280442107807507
Epoch #127: loss=0.2853595831177451
Epoch #128: loss=0.3236726319248026
Epoch #129: loss=0.4445534334941344
Epoch #130: loss=0.2774401591582732
Epoch #131: loss=0.2900610024278814
Epoch #132: loss=0.27021339535713196
Epoch #133: loss=0.19610186192122372
Epoch #134: loss=0.2252965041182258
Epoch #135: loss=0.1844512549313632
Epoch #136: loss=0.18855781582268802
Epoch #137: loss=0.21039408851753583
Epoch #138: loss=0.18056485531004993
Epoch #139: loss=0.2951750030571764
Epoch #140: loss=0.3890882879495621
Epoch #141: loss=0.36561901596459473
Epoch #142: loss=0.37203501842238684
Epoch #143: loss=0.26415320147167554
Epoch #144: loss=0.25005577504634857
Epoch #145: loss=0.45871528441255743
Epoch #146: loss=0.30774639546871185
Epoch #147: loss=0.22384831986644052
Epoch #148: loss=0.21878875927491623
Epoch #149: loss=0.4077442464503375
Epoch #150: loss=0.19761931625279514
Epoch #151: loss=0.23369121551513672
Epoch #152: loss=0.17973201992836865
Epoch #153: loss=0.271006434478543
Epoch #154: loss=0.31874199279329996
Epoch #155: loss=0.21222128922289069
Epoch #156: loss=0.21419977193528955
Epoch #157: loss=0.2196542742577466
Epoch #158: loss=0.131765639917417
Epoch #159: loss=0.19339601492339914
Epoch #160: loss=0.19265757365660233
Epoch #161: loss=0.3939265270124782
Epoch #162: loss=0.2300147766416723
Epoch #163: loss=0.22171312706037002
Epoch #164: loss=0.2538926303386688
Epoch #165: loss=0.15252782675352963
Epoch #166: loss=0.1770000450990417
Epoch #167: loss=0.16970080611380664
Epoch #168: loss=0.18493000688877972
Epoch #169: loss=0.17145686664364554
Epoch #170: loss=0.2749799672852863
Epoch #171: loss=0.191041806882078
Epoch #172: loss=0.1727139726281166
Epoch #173: loss=0.1555289334871552
Epoch #174: loss=0.1452088775959882
Epoch #175: loss=0.1685018569908359
Epoch #176: loss=0.12438555400479924
Epoch #177: loss=0.15385784750634973
Epoch #178: loss=0.10693682019006122
Epoch #179: loss=0.12647923861037602
Epoch #180: loss=0.1366067738695578
Epoch #181: loss=0.1389880126172846
Epoch #182: loss=0.10651315172964876
Epoch #183: loss=0.1548219109800729
Epoch #184: loss=0.16990887305953287
Epoch #185: loss=0.17027001015164636
Epoch #186: loss=0.15870642797513443
Epoch #187: loss=0.14208124442534012
Epoch #188: loss=0.1856917752461
Epoch #189: loss=0.21293000402775678
Epoch #190: loss=0.15955101359974255
Epoch #191: loss=0.15986500612714075
Epoch #192: loss=0.10406745394522493
Epoch #193: loss=0.12618607892231506
Epoch #194: loss=0.12188631905750795
Epoch #195: loss=0.09593342989683151
Epoch #196: loss=0.11759770119732077
Epoch #197: loss=0.1098415573889559
Epoch #198: loss=0.18246809427033772
Epoch #199: loss=0.10542909834872592
Epoch #200: loss=0.12985801696777344
Epoch #201: loss=0.08664055879820477
Epoch #202: loss=0.12029357423836534
Epoch #203: loss=0.13374925709583543
Epoch #204: loss=0.17763792655684732
Epoch #205: loss=0.08043404397639362
Epoch #206: loss=0.1781918111849915
Epoch #207: loss=0.25073075971820136
Epoch #208: loss=0.1913803666830063
Epoch #209: loss=0.09645322405479172
Epoch #210: loss=0.14100730825554242
Epoch #211: loss=0.10203134776516394
Epoch #212: loss=0.10351780260151083
Epoch #213: loss=0.14101639423858037
Epoch #214: loss=0.14882067421620543
Epoch #215: loss=0.15796349333091217
Epoch #216: loss=0.13819166137413544
Epoch #217: loss=0.11254798858003183
Epoch #218: loss=0.10869097980585965
Epoch #219: loss=0.15651107850399884
Epoch #220: loss=0.10541482202031395
Epoch #221: loss=0.12556868215853517
Epoch #222: loss=0.12818120284513992
Epoch #223: loss=0.1110754097727212
Epoch #224: loss=0.07483610375361009
Epoch #225: loss=0.11992598020217636
Epoch #226: loss=0.09703735922547904
Epoch #227: loss=0.1524660766802051
Epoch #228: loss=0.14987759766253558
Epoch #229: loss=0.13515557331795042
Epoch #230: loss=0.10840267213908109
Epoch #231: loss=0.382101872427897
Epoch #232: loss=0.15554449470205742
Epoch #233: loss=0.16794050891291012
Epoch #234: loss=0.1317581365054304
Epoch #235: loss=0.07710050215775316
Epoch #236: loss=0.10978330468589609
Epoch #237: loss=0.09182688966393471
Epoch #238: loss=0.12826276198029518
Epoch #239: loss=0.08566140654412183
Epoch #240: loss=0.09497941827232187
Epoch #241: loss=0.07833713631738316
Epoch #242: loss=0.1182787474244833
Epoch #243: loss=0.19896033507856456
Epoch #244: loss=0.14919181709939783
Epoch #245: loss=0.06864931468259204
Epoch #246: loss=0.07412393611263145
Epoch #247: loss=0.11808278343894264
Epoch #248: loss=0.06722868708047
Epoch #249: loss=0.10902349041266875

Training time: 0:04:48.436276

Finished.
n2one setting ETTm2 -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2021/model.pkl', muti_dataset='ETTm2', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.14714e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.20641e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.6029024048215273, 'MAE': 0.5480279138298152}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2021/model.pkl', muti_dataset='ETTm2', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.13184e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.16379e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.29441754264419195, 'MAE': 0.38463494039223195}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2021/model.pkl', muti_dataset='ETTm2', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.56221e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.92663e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.56221e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5259978936798562, 'MAE': 0.5076089347916393}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2021/model.pkl', muti_dataset='ETTm2', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.49643e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.82221e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.1950561329101851, 'MAE': 0.3138103896451787}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2021/model.pkl', muti_dataset='ETTm2', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.01722e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.24820205663690909, 'MAE': 0.33741961183704233}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2021/model.pkl', muti_dataset='ETTm2', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.52309e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.95855e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.52309e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8187540510319355, 'MAE': 0.45914006656345113}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2021/model.pkl', muti_dataset='ETTm2', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.50248e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.98499e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.50248e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.36771265874872117, 'MAE': 0.4225749518590096}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2021/model.pkl', muti_dataset='ETTm2', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.47107e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.81249e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3538683008717986, 'MAE': 0.43413849995621884}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='exchange', random_seed=2021, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/exchange_epochs_250_seed_2021
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=5.252216994762421
Epoch #1: loss=2.640283763408661
Epoch #2: loss=2.0502039939165115
Epoch #3: loss=1.7284794598817825
Epoch #4: loss=1.7766656130552292
Epoch #5: loss=1.6763711422681808
Epoch #6: loss=1.6064499914646149
Epoch #7: loss=1.586707442998886
Epoch #8: loss=1.5645094066858292
Epoch #9: loss=1.518426775932312
Epoch #10: loss=1.4639992415904999
Epoch #11: loss=1.457559034228325
Epoch #12: loss=1.507222518324852
Epoch #13: loss=1.4129290580749512
Epoch #14: loss=1.4007226079702377
Epoch #15: loss=1.3585349917411804
Epoch #16: loss=1.3244700729846954
Epoch #17: loss=1.3574026674032211
Epoch #18: loss=1.212815448641777
Epoch #19: loss=1.200237199664116
Epoch #20: loss=1.252101868391037
Epoch #21: loss=1.2293866276741028
Epoch #22: loss=1.2742116898298264
Epoch #23: loss=1.1338759511709213
Epoch #24: loss=1.167294904589653
Epoch #25: loss=1.203054741024971
Epoch #26: loss=1.1782048791646957
Epoch #27: loss=1.2023561894893646
Epoch #28: loss=1.1268286556005478
Epoch #29: loss=1.0678522661328316
Epoch #30: loss=1.1222581937909126
Epoch #31: loss=1.0365694388747215
Epoch #32: loss=0.962946355342865
Epoch #33: loss=0.9435109049081802
Epoch #34: loss=0.9278517216444016
Epoch #35: loss=0.8491154089570045
Epoch #36: loss=0.9990270361304283
Epoch #37: loss=0.9692130759358406
Epoch #38: loss=0.859848640859127
Epoch #39: loss=0.7847789824008942
Epoch #40: loss=0.9120095148682594
Epoch #41: loss=0.823683612048626
Epoch #42: loss=0.7764340713620186
Epoch #43: loss=0.8120805062353611
Epoch #44: loss=0.7560460716485977
Epoch #45: loss=0.6888609863817692
Epoch #46: loss=0.9814355783164501
Epoch #47: loss=0.8526368588209152
Epoch #48: loss=0.7822012230753899
Epoch #49: loss=0.6544838771224022
Epoch #50: loss=0.720482625067234
Epoch #51: loss=0.6625023074448109
Epoch #52: loss=0.6285148151218891
Epoch #53: loss=0.6199865862727165
Epoch #54: loss=0.638435423374176
Epoch #55: loss=0.5787399187684059
Epoch #56: loss=0.780627679079771
Epoch #57: loss=0.6655980832874775
Epoch #58: loss=0.6194126754999161
Epoch #59: loss=0.6753356382250786
Epoch #60: loss=0.6724629774689674
Epoch #61: loss=0.6146213710308075
Epoch #62: loss=0.48437564447522163
Epoch #63: loss=0.6018401235342026
Epoch #64: loss=0.5049495212733746
Epoch #65: loss=0.6459080129861832
Epoch #66: loss=0.5439610555768013
Epoch #67: loss=0.46908707171678543
Epoch #68: loss=0.37912851572036743
Epoch #69: loss=0.4924897029995918
Epoch #70: loss=0.4007328785955906
Epoch #71: loss=0.4413329418748617
Epoch #72: loss=0.4490966834127903
Epoch #73: loss=0.6855923682451248
Epoch #74: loss=0.5992905832827091
Epoch #75: loss=0.43191420659422874
Epoch #76: loss=0.39232732728123665
Epoch #77: loss=0.6119916159659624
Epoch #78: loss=0.5460037067532539
Epoch #79: loss=0.45608419366180897
Epoch #80: loss=0.4491907712072134
Epoch #81: loss=0.42942672967910767
Epoch #82: loss=0.3600677326321602
Epoch #83: loss=0.5215547643601894
Epoch #84: loss=0.40536562353372574
Epoch #85: loss=0.42099345102906227
Epoch #86: loss=0.4245562460273504
Epoch #87: loss=0.467150853946805
Epoch #88: loss=0.34131903015077114
Epoch #89: loss=0.44264451041817665
Epoch #90: loss=0.4050136171281338
Epoch #91: loss=0.5020492412149906
Epoch #92: loss=0.41484296321868896
Epoch #93: loss=0.4479496721178293
Epoch #94: loss=0.6526271216571331
Epoch #95: loss=0.38215106539428234
Epoch #96: loss=0.561449121683836
Epoch #97: loss=0.42877563647925854
Epoch #98: loss=0.4431998208165169
Epoch #99: loss=0.47484221309423447
Epoch #100: loss=0.36621567234396935
Epoch #101: loss=0.3787108529359102
Epoch #102: loss=0.40238505601882935
Epoch #103: loss=0.3650211803615093
Epoch #104: loss=0.29928133264184
Epoch #105: loss=0.3571734167635441
Epoch #106: loss=0.29536840319633484
Epoch #107: loss=0.3015686236321926
Epoch #108: loss=0.39976015500724316
Epoch #109: loss=0.2538349824026227
Epoch #110: loss=0.3499247804284096
Epoch #111: loss=0.25628248788416386
Epoch #112: loss=0.4611824508756399
Epoch #113: loss=0.30148508958518505
Epoch #114: loss=0.33850409276783466
Epoch #115: loss=0.31616263277828693
Epoch #116: loss=0.38421062938869
Epoch #117: loss=0.2722427435219288
Epoch #118: loss=0.28567410446703434
Epoch #119: loss=0.26328874938189983
Epoch #120: loss=0.2969324504956603
Epoch #121: loss=0.33552063815295696
Epoch #122: loss=0.22670021746307611
Epoch #123: loss=0.26083279959857464
Epoch #124: loss=0.2895729122683406
Epoch #125: loss=0.3092391286045313
Epoch #126: loss=0.5006981389597058
Epoch #127: loss=0.32214431278407574
Epoch #128: loss=0.36078291200101376
Epoch #129: loss=0.231655927374959
Epoch #130: loss=0.2562749423086643
Epoch #131: loss=0.19083964824676514
Epoch #132: loss=0.24991322495043278
Epoch #133: loss=0.2579384632408619
Epoch #134: loss=0.3616986367851496
Epoch #135: loss=0.2179805999621749
Epoch #136: loss=0.23435491416603327
Epoch #137: loss=0.3288190998136997
Epoch #138: loss=0.30573086347430944
Epoch #139: loss=0.2836622875183821
Epoch #140: loss=0.2847445998340845
Epoch #141: loss=0.3331222664564848
Epoch #142: loss=0.39107625652104616
Epoch #143: loss=0.2078416496515274
Epoch #144: loss=0.504278770647943
Epoch #145: loss=0.29715747106820345
Epoch #146: loss=0.4608759731054306
Epoch #147: loss=0.3151603303849697
Epoch #148: loss=0.29794972389936447
Epoch #149: loss=0.27937277499586344
Epoch #150: loss=0.26492499001324177
Epoch #151: loss=0.18485942296683788
Epoch #152: loss=0.3338682260364294
Epoch #153: loss=0.26668245531618595
Epoch #154: loss=0.20387495961040258
Epoch #155: loss=0.25432742293924093
Epoch #156: loss=0.2229603584855795
Epoch #157: loss=0.20294140465557575
Epoch #158: loss=0.2921236976981163
Epoch #159: loss=0.32894579507410526
Epoch #160: loss=0.16610520612448454
Epoch #161: loss=0.32066166028380394
Epoch #162: loss=0.17342948634177446
Epoch #163: loss=0.2759191421791911
Epoch #164: loss=0.20986933261156082
Epoch #165: loss=0.21554739400744438
Epoch #166: loss=0.26697857212275267
Epoch #167: loss=0.2562780771404505
Epoch #168: loss=0.17466578166931868
Epoch #169: loss=0.22633604984730482
Epoch #170: loss=0.21154998196288943
Epoch #171: loss=0.15068071242421865
Epoch #172: loss=0.2697308138012886
Epoch #173: loss=0.21690765488892794
Epoch #174: loss=0.20836621522903442
Epoch #175: loss=0.3128249025903642
Epoch #176: loss=0.3319452702999115
Epoch #177: loss=0.39620009809732437
Epoch #178: loss=0.256567619740963
Epoch #179: loss=0.19028008170425892
Epoch #180: loss=0.17910100985318422
Epoch #181: loss=0.21504992339760065
Epoch #182: loss=0.17957723885774612
Epoch #183: loss=0.3172950237058103
Epoch #184: loss=0.17346084024757147
Epoch #185: loss=0.22249827068299055
Epoch #186: loss=0.2206826824694872
Epoch #187: loss=0.16258762311190367
Epoch #188: loss=0.123128074221313
Epoch #189: loss=0.18381738290190697
Epoch #190: loss=0.14975512167438865
Epoch #191: loss=0.22027950827032328
Epoch #192: loss=0.1381820789538324
Epoch #193: loss=0.29868199303746223
Epoch #194: loss=0.2572446083649993
Epoch #195: loss=0.17626732680946589
Epoch #196: loss=0.20642290730029345
Epoch #197: loss=0.27425818890333176
Epoch #198: loss=0.22779978904873133
Epoch #199: loss=0.19825474545359612
Epoch #200: loss=0.25969728641211987
Epoch #201: loss=0.18589232303202152
Epoch #202: loss=0.1324169496074319
Epoch #203: loss=0.2575099291279912
Epoch #204: loss=0.19052110519260168
Epoch #205: loss=0.15911200642585754
Epoch #206: loss=0.20686460472643375
Epoch #207: loss=0.1729261139407754
Epoch #208: loss=0.20020143641158938
Epoch #209: loss=0.12485356815159321
Epoch #210: loss=0.1917657731100917
Epoch #211: loss=0.2413205038756132
Epoch #212: loss=0.15513153793290257
Epoch #213: loss=0.25286251539364457
Epoch #214: loss=0.1925029531121254
Epoch #215: loss=0.3239716705866158
Epoch #216: loss=0.16029717912897468
Epoch #217: loss=0.14263256080448627
Epoch #218: loss=0.15118037955835462
Epoch #219: loss=0.13351624878123403
Epoch #220: loss=0.1473165424540639
Epoch #221: loss=0.12787051312625408
Epoch #222: loss=0.12189617101103067
Epoch #223: loss=0.1358102923259139
Epoch #224: loss=0.14776581060141325
Epoch #225: loss=0.1623265128582716
Epoch #226: loss=0.11658834712579846
Epoch #227: loss=0.16468190494924784
Epoch #228: loss=0.2800143926870078
Epoch #229: loss=0.13814683444797993
Epoch #230: loss=0.11034708609804511
Epoch #231: loss=0.21957172453403473
Epoch #232: loss=0.14225377514958382
Epoch #233: loss=0.16026155091822147
Epoch #234: loss=0.15437628189101815
Epoch #235: loss=0.2479172614403069
Epoch #236: loss=0.18524992326274514
Epoch #237: loss=0.13508945843204856
Epoch #238: loss=0.20064278971403837
Epoch #239: loss=0.11528896307572722
Epoch #240: loss=0.11774243414402008
Epoch #241: loss=0.17970858979970217
Epoch #242: loss=0.0973237007856369
Epoch #243: loss=0.16599573055282235
Epoch #244: loss=0.17297035595402122
Epoch #245: loss=0.20326944766566157
Epoch #246: loss=0.4352837558835745
Epoch #247: loss=0.2596125928685069
Epoch #248: loss=0.2756082462146878
Epoch #249: loss=0.22292754147201777

Training time: 0:01:34.569361

Finished.
n2one setting exchange -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2021/model.pkl', muti_dataset='exchange', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.29071e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.64223e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5704188297883606, 'MAE': 0.5259249656448002}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2021/model.pkl', muti_dataset='exchange', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.44263e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.8616e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.2605520398270633, 'MAE': 0.3607985257411119}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2021/model.pkl', muti_dataset='exchange', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=7.56697e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.46566e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.68384e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=7.56697e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.44266841005093827, 'MAE': 0.45806958397869973}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2021/model.pkl', muti_dataset='exchange', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=7.22022e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.47344e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.59629e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.1777889445219946, 'MAE': 0.2966463741294662}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2021/model.pkl', muti_dataset='exchange', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.10073e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.16312426366351002, 'MAE': 0.282770095960684}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2021/model.pkl', muti_dataset='exchange', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.95285e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.00791e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.08836e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.95285e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8567107646158494, 'MAE': 0.487319238264263}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2021/model.pkl', muti_dataset='exchange', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.33473e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.90228e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.78022e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.33473e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3586228625380777, 'MAE': 0.4173019882049495}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2021/model.pkl', muti_dataset='exchange', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=8.28033e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.63491e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.15188e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=8.28033e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5524981489107413, 'MAE': 0.5592553610265738}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='traffic', random_seed=2021, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/traffic_epochs_250_seed_2021
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=1.0622641604281358
Epoch #1: loss=0.37696993395928163
Epoch #2: loss=0.25655463533238304
Epoch #3: loss=0.19014155369018595
Epoch #4: loss=0.14074744679154763
Epoch #5: loss=0.12429959853579509
Epoch #6: loss=0.10239854324695474
Epoch #7: loss=0.08508095876238117
Epoch #8: loss=0.08052661492145705
Epoch #9: loss=0.06843739487079518
Epoch #10: loss=0.05899860438612007
Epoch #11: loss=0.05776036988831452
Epoch #12: loss=0.05553064649609153
Epoch #13: loss=0.05537306212629959
Epoch #14: loss=0.04532683983157776
Epoch #15: loss=0.044658810041548806
Epoch #16: loss=0.03845310047876064
Epoch #17: loss=0.03659885681559507
Epoch #18: loss=0.030836180888338928
Epoch #19: loss=0.0345742469639982
Epoch #20: loss=0.027857901593167853
Epoch #21: loss=0.03269113069875576
Epoch #22: loss=0.0347617208865026
Epoch #23: loss=0.03934093027185485
Epoch #24: loss=0.03434641521438641
Epoch #25: loss=0.02165590431308914
Epoch #26: loss=0.029626073663905177
Epoch #27: loss=0.022937763669650155
Epoch #28: loss=0.026500214860134968
Epoch #29: loss=0.02319820437649494
Epoch #30: loss=0.021292703119382098
Epoch #31: loss=0.025545946609503278
Epoch #32: loss=0.022725392282365663
Epoch #33: loss=0.025606467713304232
Epoch #34: loss=0.018944645890147098
Epoch #35: loss=0.024690076507227668
Epoch #36: loss=0.020281508716883185
Epoch #37: loss=0.025529373618541826
Epoch #38: loss=0.021948121293280987
Epoch #39: loss=0.014562841357537404
Epoch #40: loss=0.019738632592609207
Epoch #41: loss=0.031000408505966342
Epoch #42: loss=0.021185848657057995
Epoch #43: loss=0.01980911240196655
Epoch #44: loss=0.01925839546355073
Epoch #45: loss=0.02329444026251987
Epoch #46: loss=0.023006249189805216
Epoch #47: loss=0.01897022092052878
Epoch #48: loss=0.01719432107269874
Epoch #49: loss=0.015313565813565709
Epoch #50: loss=0.017002124343528748
Epoch #51: loss=0.024439543715163336
Epoch #52: loss=0.013239152843495637
Epoch #53: loss=0.012190487565312819
Epoch #54: loss=0.027314670417220667
Epoch #55: loss=0.020728238893666342
Epoch #56: loss=0.016461920168730507
Epoch #57: loss=0.015302540188190137
Epoch #58: loss=0.01778039018901874
Epoch #59: loss=0.021576652724229407
Epoch #60: loss=0.015826674251846338
Epoch #61: loss=0.017345754576972825
Epoch #62: loss=0.02488271869584516
Epoch #63: loss=0.015747232709645582
Epoch #64: loss=0.014456178608188123
Epoch #65: loss=0.01795204370459509
Epoch #66: loss=0.012774485249689233
Epoch #67: loss=0.01619355228222829
Epoch #68: loss=0.015935859730166844
Epoch #69: loss=0.016190445200978235
Epoch #70: loss=0.018035001093134113
Epoch #71: loss=0.015795605162481654
Epoch #72: loss=0.012800535168572358
Epoch #73: loss=0.01996949723432961
Epoch #74: loss=0.020083132556076713
Epoch #75: loss=0.012710516438403506
Epoch #76: loss=0.011766538599880387
Epoch #77: loss=0.01297472634708202
Epoch #78: loss=0.018874627490959556
Epoch #79: loss=0.012647022939802487
Epoch #80: loss=0.012842206989614597
Epoch #81: loss=0.013878118222889441
Epoch #82: loss=0.013352630532515751
Epoch #83: loss=0.009746589978705505
Epoch #84: loss=0.012266407805996549
Epoch #85: loss=0.023496998940000804
Epoch #86: loss=0.017272168118128522
Epoch #87: loss=0.010845513005182904
Epoch #88: loss=0.024640865729258207
Epoch #89: loss=0.012352536807384767
Epoch #90: loss=0.013058628543566916
Epoch #91: loss=0.008166749830133003
Epoch #92: loss=0.01260510076128007
Epoch #93: loss=0.015413648175841939
Epoch #94: loss=0.016117657616552455
Epoch #95: loss=0.02755815299637583
Epoch #96: loss=0.011396393843474333
Epoch #97: loss=0.01192568875537265
Epoch #98: loss=0.009462730707015934
Epoch #99: loss=0.015197249454553639
Epoch #100: loss=0.013155666117662005
Epoch #101: loss=0.013629590397824376
Epoch #102: loss=0.012418671319044084
Epoch #103: loss=0.013217900528949566
Epoch #104: loss=0.012717224691906434
Epoch #105: loss=0.012588436101558412
Epoch #106: loss=0.011611815862867575
Epoch #107: loss=0.01203374817297284
Epoch #108: loss=0.009915897262941321
Epoch #109: loss=0.013874015906918037
Epoch #110: loss=0.014738494260485117
Epoch #111: loss=0.014343023404566542
Epoch #112: loss=0.015585316888851074
Epoch #113: loss=0.010675645033273038
Epoch #114: loss=0.012604381713671545
Epoch #115: loss=0.009131622425788782
Epoch #116: loss=0.012175075089050622
Epoch #117: loss=0.021401712295611167
Epoch #118: loss=0.014583887421888833
Epoch #119: loss=0.014905630607675737
Epoch #120: loss=0.013232030342445113
Epoch #121: loss=0.009462776683302533
Epoch #122: loss=0.013725526855808516
Epoch #123: loss=0.011152102663025737
Epoch #124: loss=0.026684036528491547
Epoch #125: loss=0.01384961623921985
Epoch #126: loss=0.00935884615506468
Epoch #127: loss=0.011508183446515614
Epoch #128: loss=0.013794623385764239
Epoch #129: loss=0.010428590099552803
Epoch #130: loss=0.010689255153308428
Epoch #131: loss=0.014087216072604266
Epoch #132: loss=0.010544588142104357
Epoch #133: loss=0.012075763068736148
Epoch #134: loss=0.011536524277414074
Epoch #135: loss=0.009964901426521545
Epoch #136: loss=0.010350652324346989
Epoch #137: loss=0.01660171114193927
Epoch #138: loss=0.012301735063880955
Epoch #139: loss=0.008682524292086134
Epoch #140: loss=0.01018421154591069
Epoch #141: loss=0.011623618531378749
Epoch #142: loss=0.01412168382872285
Epoch #143: loss=0.012333553275239969
Epoch #144: loss=0.007866645340627846
Epoch #145: loss=0.008781310044766675
Epoch #146: loss=0.014656235357428299
Epoch #147: loss=0.012040337326308699
Epoch #148: loss=0.008115242473797855
Epoch #149: loss=0.009275508513459069
Epoch #150: loss=0.009231964494315086
Epoch #151: loss=0.015912007123658384
Epoch #152: loss=0.010708786822421143
Epoch #153: loss=0.006881219956479868
Epoch #154: loss=0.013047577862426846
Epoch #155: loss=0.009658482075127851
Epoch #156: loss=0.009758895023256215
Epoch #157: loss=0.013569466937050748
Epoch #158: loss=0.01026251886009653
Epoch #159: loss=0.007873221142834707
Epoch #160: loss=0.01509453504148594
Epoch #161: loss=0.011484367558946012
Epoch #162: loss=0.012091178791527258
Epoch #163: loss=0.009817902741963465
Epoch #164: loss=0.006550956900619006
Epoch #165: loss=0.012474981478623815
Epoch #166: loss=0.012592238703325277
Epoch #167: loss=0.008625232436425585
Epoch #168: loss=0.008610862050988233
Epoch #169: loss=0.011525684331606948
Epoch #170: loss=0.011369761278347183
Epoch #171: loss=0.014022409178520117
Epoch #172: loss=0.010081074188010694
Epoch #173: loss=0.006439101524609049
Epoch #174: loss=0.00914880805637384
Epoch #175: loss=0.013694310253949267
Epoch #176: loss=0.006880225887633655
Epoch #177: loss=0.0077640300540925
Epoch #178: loss=0.00793659423581668
Epoch #179: loss=0.010407182941334933
Epoch #180: loss=0.015347542755023237
Epoch #181: loss=0.009079728400089731
Epoch #182: loss=0.008404435397459631
Epoch #183: loss=0.00816388014918672
Epoch #184: loss=0.009805317535084021
Epoch #185: loss=0.01076158751184931
Epoch #186: loss=0.010937134514420407
Epoch #187: loss=0.008114120804828569
Epoch #188: loss=0.005583030451647924
Epoch #189: loss=0.013307819162199534
Epoch #190: loss=0.010837265549418289
Epoch #191: loss=0.012076510843597899
Epoch #192: loss=0.00831853117612963
Epoch #193: loss=0.006965999845283002
Epoch #194: loss=0.006387713133154886
Epoch #195: loss=0.013875799312634694
Epoch #196: loss=0.009220673562641463
Epoch #197: loss=0.012860043513347673
Epoch #198: loss=0.009852270203435376
Epoch #199: loss=0.008816547949336192
Epoch #200: loss=0.013411161841934314
Epoch #201: loss=0.006461310943874521
Epoch #202: loss=0.012814972602465571
Epoch #203: loss=0.015237824255815305
Epoch #204: loss=0.019974616402010606
Epoch #205: loss=0.009828308575396079
Epoch #206: loss=0.008748251781265442
Epoch #207: loss=0.007028512050066275
Epoch #208: loss=0.006558716949014687
Epoch #209: loss=0.009448828248609221
Epoch #210: loss=0.006871848133513639
Epoch #211: loss=0.010786295286143412
Epoch #212: loss=0.007195739506530145
Epoch #213: loss=0.008948143751167622
Epoch #214: loss=0.007400462280769306
Epoch #215: loss=0.008794041121552893
Epoch #216: loss=0.010779938441384366
Epoch #217: loss=0.006776036782295005
Epoch #218: loss=0.009411746189988157
Epoch #219: loss=0.010913645977033096
Epoch #220: loss=0.008861553575056892
Epoch #221: loss=0.014363418153443658
Epoch #222: loss=0.004992113998520694
Epoch #223: loss=0.013423235545538825
Epoch #224: loss=0.006788736592198041
Epoch #225: loss=0.010870410599816038
Epoch #226: loss=0.01103564921374597
Epoch #227: loss=0.011611454341812948
Epoch #228: loss=0.005154364525545507
Epoch #229: loss=0.008107926140713161
Epoch #230: loss=0.011051256302817163
Epoch #231: loss=0.007551009425766611
Epoch #232: loss=0.009731414316496498
Epoch #233: loss=0.00943844869425342
Epoch #234: loss=0.009727011265344173
Epoch #235: loss=0.007274175141798251
Epoch #236: loss=0.0043033039264697885
Epoch #237: loss=0.007387673078255302
Epoch #238: loss=0.009553341854153605
Epoch #239: loss=0.008804731628661187
Epoch #240: loss=0.008056739382509625
Epoch #241: loss=0.00834099572176749
Epoch #242: loss=0.011282162416531604
Epoch #243: loss=0.005856598238776405
Epoch #244: loss=0.008237809466809088
Epoch #245: loss=0.006231152682269793
Epoch #246: loss=0.007688056924202768
Epoch #247: loss=0.009464310394647167
Epoch #248: loss=0.009562234546059839
Epoch #249: loss=0.005143475872321491

Training time: 3:32:10.636121

Finished.
n2one setting traffic -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2021/model.pkl', muti_dataset='traffic', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.50571e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.93498e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.50571e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.6171832886243901, 'MAE': 0.5677907955405748}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2021/model.pkl', muti_dataset='traffic', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.35936e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.61344e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3140516146045592, 'MAE': 0.4040893186317407}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2021/model.pkl', muti_dataset='traffic', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.38674e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.85477e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.38674e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5527738068881919, 'MAE': 0.5265290749304868}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2021/model.pkl', muti_dataset='traffic', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.42759e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.91663e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.19463484185006838, 'MAE': 0.3165938367056801}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2021/model.pkl', muti_dataset='traffic', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.96445e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.30321050979663333, 'MAE': 0.36370536703246437}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2021/model.pkl', muti_dataset='traffic', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=6.39765e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.69833e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.23955e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=6.39765e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8285756407135013, 'MAE': 0.47237625138821626}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2021/model.pkl', muti_dataset='traffic', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=6.31628e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.60334e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.54163e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=6.31628e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3924366885907878, 'MAE': 0.4453783765084424}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2021/model.pkl', muti_dataset='traffic', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.38172e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.77079e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.38172e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.4889624562214985, 'MAE': 0.519702540138368}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='electricity', random_seed=2021, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/electricity_epochs_250_seed_2021
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=1.6412209536056281
Epoch #1: loss=0.6489350957291149
Epoch #2: loss=0.454982051132624
Epoch #3: loss=0.35537966621627687
Epoch #4: loss=0.2795911047410371
Epoch #5: loss=0.26195122858631276
Epoch #6: loss=0.24701524017570176
Epoch #7: loss=0.22182805074895282
Epoch #8: loss=0.1908707899792915
Epoch #9: loss=0.16736019542005576
Epoch #10: loss=0.15822097068403
Epoch #11: loss=0.1342557683192495
Epoch #12: loss=0.12433072194642739
Epoch #13: loss=0.10784682992996641
Epoch #14: loss=0.10230170301744872
Epoch #15: loss=0.09800315430718605
Epoch #16: loss=0.08353647723724351
Epoch #17: loss=0.10222984186585447
Epoch #18: loss=0.07118637203543543
Epoch #19: loss=0.07956801230128495
Epoch #20: loss=0.07563454573654868
Epoch #21: loss=0.07098886844153716
Epoch #22: loss=0.0680442675948143
Epoch #23: loss=0.04726593063366701
Epoch #24: loss=0.054776482785996804
Epoch #25: loss=0.048663979753085944
Epoch #26: loss=0.05740346962649874
Epoch #27: loss=0.037748194846536416
Epoch #28: loss=0.04298788530902931
Epoch #29: loss=0.03962804512280356
Epoch #30: loss=0.03293869725930449
Epoch #31: loss=0.03593982895836234
Epoch #32: loss=0.03911007861418191
Epoch #33: loss=0.04258117212470029
Epoch #34: loss=0.055600254150902466
Epoch #35: loss=0.05777334716356711
Epoch #36: loss=0.04082739881364588
Epoch #37: loss=0.03507770657556775
Epoch #38: loss=0.0348565816673279
Epoch #39: loss=0.03401423115471836
Epoch #40: loss=0.0528894842753181
Epoch #41: loss=0.02974604970537637
Epoch #42: loss=0.026617880627031312
Epoch #43: loss=0.026561574422902315
Epoch #44: loss=0.021508056766896093
Epoch #45: loss=0.028651574785412054
Epoch #46: loss=0.033910134290794716
Epoch #47: loss=0.03357071149731606
Epoch #48: loss=0.025944885850747657
Epoch #49: loss=0.018824600934840136
Epoch #50: loss=0.02603215425212888
Epoch #51: loss=0.03252491446116191
Epoch #52: loss=0.03245107982180014
Epoch #53: loss=0.02609737992295386
Epoch #54: loss=0.028619714206406657
Epoch #55: loss=0.02221959935083428
Epoch #56: loss=0.021641536724950967
Epoch #57: loss=0.01893693223346106
Epoch #58: loss=0.030469470525035677
Epoch #59: loss=0.024375712046054456
Epoch #60: loss=0.028814685419259876
Epoch #61: loss=0.018192730868682033
Epoch #62: loss=0.02217185569853113
Epoch #63: loss=0.024005880473454328
Epoch #64: loss=0.01593672303171724
Epoch #65: loss=0.019787591748226818
Epoch #66: loss=0.017364259549587778
Epoch #67: loss=0.019394461558029243
Epoch #68: loss=0.030203186884026314
Epoch #69: loss=0.022646614678952598
Epoch #70: loss=0.01896693712539936
Epoch #71: loss=0.01813204378408969
Epoch #72: loss=0.014537463307371972
Epoch #73: loss=0.017803627702065183
Epoch #74: loss=0.015558644684939718
Epoch #75: loss=0.025223673369903755
Epoch #76: loss=0.016981680213830598
Epoch #77: loss=0.016325106648829798
Epoch #78: loss=0.016853246750996226
Epoch #79: loss=0.01744977988370163
Epoch #80: loss=0.016463054763660927
Epoch #81: loss=0.01588945920619754
Epoch #82: loss=0.024084041677009185
Epoch #83: loss=0.01592641382230115
Epoch #84: loss=0.022347087208457246
Epoch #85: loss=0.017331413983808382
Epoch #86: loss=0.011255459263565373
Epoch #87: loss=0.015296379384777662
Epoch #88: loss=0.01609655784031759
Epoch #89: loss=0.017060281677466073
Epoch #90: loss=0.03219123848901069
Epoch #91: loss=0.013634674980760642
Epoch #92: loss=0.013296451504636741
Epoch #93: loss=0.019579683492508517
Epoch #94: loss=0.011603310454718048
Epoch #95: loss=0.022940879257909396
Epoch #96: loss=0.010968169173866952
Epoch #97: loss=0.013535911620070874
Epoch #98: loss=0.018332201200160214
Epoch #99: loss=0.01848068981463339
Epoch #100: loss=0.02280685499766
Epoch #101: loss=0.012116815181299638
Epoch #102: loss=0.014828373874592772
Epoch #103: loss=0.012423411036357052
Epoch #104: loss=0.011248277653497571
Epoch #105: loss=0.01675984168819056
Epoch #106: loss=0.01658666403295046
Epoch #107: loss=0.010832925760687685
Epoch #108: loss=0.013428320731050871
Epoch #109: loss=0.01404598712390927
Epoch #110: loss=0.018457797226115968
Epoch #111: loss=0.01607346711129043
Epoch #112: loss=0.012528398101953529
Epoch #113: loss=0.010727195760251147
Epoch #114: loss=0.011255829579978775
Epoch #115: loss=0.010544411751921825
Epoch #116: loss=0.009196477497723302
Epoch #117: loss=0.015356067228247049
Epoch #118: loss=0.019847704730840906
Epoch #119: loss=0.01835044792626993
Epoch #120: loss=0.014015883540609892
Epoch #121: loss=0.011076237407775531
Epoch #122: loss=0.011523564373606503
Epoch #123: loss=0.013714828495461366
Epoch #124: loss=0.01338068190729971
Epoch #125: loss=0.009945983536442818
Epoch #126: loss=0.01634895373835748
Epoch #127: loss=0.015083947675639902
Epoch #128: loss=0.014977654698232298
Epoch #129: loss=0.017513264222121346
Epoch #130: loss=0.01200417730673666
Epoch #131: loss=0.010501095064864218
Epoch #132: loss=0.015315849095368265
Epoch #133: loss=0.009543053093010914
Epoch #134: loss=0.011411021930140928
Epoch #135: loss=0.010979724768966269
Epoch #136: loss=0.008074247617545795
Epoch #137: loss=0.016090395477581537
Epoch #138: loss=0.015873298477461256
Epoch #139: loss=0.012714041932177733
Epoch #140: loss=0.011399531550197703
Epoch #141: loss=0.01627187447368916
Epoch #142: loss=0.012063055169025894
Epoch #143: loss=0.011419941883714075
Epoch #144: loss=0.011218130133206147
Epoch #145: loss=0.007871552816928709
Epoch #146: loss=0.009015693727843
Epoch #147: loss=0.013108721019437601
Epoch #148: loss=0.012768094397147805
Epoch #149: loss=0.00940238422862141
Epoch #150: loss=0.015714468836648
Epoch #151: loss=0.012599720988267412
Epoch #152: loss=0.01244544683367368
Epoch #153: loss=0.00885831966533433
Epoch #154: loss=0.009592928503700924
Epoch #155: loss=0.013625124627158534
Epoch #156: loss=0.015837599644132793
Epoch #157: loss=0.024857355418616493
Epoch #158: loss=0.00956830366498666
Epoch #159: loss=0.008271821841091277
Epoch #160: loss=0.011354036291740614
Epoch #161: loss=0.00986962249048121
Epoch #162: loss=0.012228359745175657
Epoch #163: loss=0.012156123464156052
Epoch #164: loss=0.008689745414999932
Epoch #165: loss=0.013157625047626362
Epoch #166: loss=0.009902550036945696
Epoch #167: loss=0.010047854516837264
Epoch #168: loss=0.012589362363629855
Epoch #169: loss=0.01133776112964429
Epoch #170: loss=0.012019688411139973
Epoch #171: loss=0.014108028702765726
Epoch #172: loss=0.009135415467485855
Epoch #173: loss=0.015450509820485958
Epoch #174: loss=0.013942327888028239
Epoch #175: loss=0.009478914652982976
Epoch #176: loss=0.00856083229991442
Epoch #177: loss=0.009024973672588364
Epoch #178: loss=0.009846228694382219
Epoch #179: loss=0.008083219163234396
Epoch #180: loss=0.012272596808231647
Epoch #181: loss=0.016941907424682816
Epoch #182: loss=0.014291368143646064
Epoch #183: loss=0.008162136084285515
Epoch #184: loss=0.008749243394962027
Epoch #185: loss=0.009018448409566372
Epoch #186: loss=0.019240325972756277
Epoch #187: loss=0.006854327206156794
Epoch #188: loss=0.007001913382111094
Epoch #189: loss=0.006807054712047592
Epoch #190: loss=0.00992986183839116
Epoch #191: loss=0.021891884889447846
Epoch #192: loss=0.021016270427629526
Epoch #193: loss=0.007586530490718184
Epoch #194: loss=0.008397794525466157
Epoch #195: loss=0.012747722738814131
Epoch #196: loss=0.010274687131672424
Epoch #197: loss=0.007787009766956391
Epoch #198: loss=0.02643643020245325
Epoch #199: loss=0.010430998843985776
Epoch #200: loss=0.009241852669967947
Epoch #201: loss=0.008500721425288052
Epoch #202: loss=0.010841701036490315
Epoch #203: loss=0.007355070057492497
Epoch #204: loss=0.00941151683690241
Epoch #205: loss=0.0073536026294813185
Epoch #206: loss=0.00938810929336884
Epoch #207: loss=0.012756241765362863
Epoch #208: loss=0.018688801007462823
Epoch #209: loss=0.00737816031813343
Epoch #210: loss=0.006697684058787539
Epoch #211: loss=0.007334385575317542
Epoch #212: loss=0.007177787870859562
Epoch #213: loss=0.009727514526267127
Epoch #214: loss=0.008247865151932732
Epoch #215: loss=0.014722008881162029
Epoch #216: loss=0.011091297173602768
Epoch #217: loss=0.006633609244628951
Epoch #218: loss=0.014820375722743038
Epoch #219: loss=0.011471645862685162
Epoch #220: loss=0.0045632586940126405
Epoch #221: loss=0.009791040231384529
Epoch #222: loss=0.01202495905372671
Epoch #223: loss=0.027860847656829776
Epoch #224: loss=0.008193092167738687
Epoch #225: loss=0.006853005862062234
Epoch #226: loss=0.010191120147651403
Epoch #227: loss=0.00994328638709896
Epoch #228: loss=0.008889335142814836
Epoch #229: loss=0.008211115613431783
Epoch #230: loss=0.013104573185675317
Epoch #231: loss=0.010267221046621821
Epoch #232: loss=0.01245236476711752
Epoch #233: loss=0.008944073785440938
Epoch #234: loss=0.006880849925601692
Epoch #235: loss=0.009490640702417317
Epoch #236: loss=0.01553861750897261
Epoch #237: loss=0.013879184062792876
Epoch #238: loss=0.010963583444283862
Epoch #239: loss=0.008074078818683795
Epoch #240: loss=0.012409271678896012
Epoch #241: loss=0.008601980974823033
Epoch #242: loss=0.005672593005824794
Epoch #243: loss=0.010061672436362828
Epoch #244: loss=0.00654443163419109
Epoch #245: loss=0.008166856806187795
Epoch #246: loss=0.0080203361871768
Epoch #247: loss=0.013811752228777148
Epoch #248: loss=0.004410857265282747
Epoch #249: loss=0.011527897119870253

Training time: 1:27:58.439534

Finished.
n2one setting electricity -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2021/model.pkl', muti_dataset='electricity', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.1785e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.21793e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.95889e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.1785e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5857394322549612, 'MAE': 0.5421490715457035}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2021/model.pkl', muti_dataset='electricity', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.14736e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.18529e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.88305e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3257961036728265, 'MAE': 0.40938737413817805}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2021/model.pkl', muti_dataset='electricity', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.21116e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.33576e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.86546e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.21116e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5475677296225574, 'MAE': 0.5180356754472611}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2021/model.pkl', muti_dataset='electricity', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.16904e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.65977e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.16904e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.20231702446885508, 'MAE': 0.32265600792132154}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2021/model.pkl', muti_dataset='electricity', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.00534e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.25868151379793936, 'MAE': 0.34733751153094206}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2021/model.pkl', muti_dataset='electricity', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.64149e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.625e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.05203e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.64149e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.7853389492166215, 'MAE': 0.4523670707043874}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2021/model.pkl', muti_dataset='electricity', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=6.82884e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.58961e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.8866e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=6.82884e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3649314288571266, 'MAE': 0.43013364054084785}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2021/model.pkl', muti_dataset='electricity', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.0861e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.452e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.95375e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.0861e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.6109051626151953, 'MAE': 0.578516849763022}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='weather', random_seed=2021, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/weather_epochs_250_seed_2021
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=7.373990150598379
Epoch #1: loss=4.836506137481103
Epoch #2: loss=3.1198448492930484
Epoch #3: loss=2.719095835318932
Epoch #4: loss=2.4952684549184947
Epoch #5: loss=2.4238124260535607
Epoch #6: loss=2.2204396541302023
Epoch #7: loss=2.117133310207954
Epoch #8: loss=1.9397514324921827
Epoch #9: loss=1.9087085815576406
Epoch #10: loss=1.758158307809096
Epoch #11: loss=1.669357446523813
Epoch #12: loss=1.5808314772752614
Epoch #13: loss=1.413991208259876
Epoch #14: loss=1.3877660219485943
Epoch #15: loss=1.4464143056135912
Epoch #16: loss=1.2717034816741943
Epoch #17: loss=1.288158038487801
Epoch #18: loss=1.190578818321228
Epoch #19: loss=1.1143662791985731
Epoch #20: loss=1.209057023892036
Epoch #21: loss=1.1389749095990107
Epoch #22: loss=0.9721083205479842
Epoch #23: loss=0.9742521551939157
Epoch #24: loss=0.9811832217069772
Epoch #25: loss=0.8950665570222415
Epoch #26: loss=0.9643708903055924
Epoch #27: loss=0.897311806678772
Epoch #28: loss=0.7755149121467884
Epoch #29: loss=0.8201417556175818
Epoch #30: loss=0.8216622403034797
Epoch #31: loss=0.818294169811102
Epoch #32: loss=0.7685813514085916
Epoch #33: loss=0.7038332269741938
Epoch #34: loss=0.7296620836624732
Epoch #35: loss=0.6627300358735598
Epoch #36: loss=0.7015030406988584
Epoch #37: loss=0.6725383079968966
Epoch #38: loss=0.6212089783870257
Epoch #39: loss=0.6930436744139745
Epoch #40: loss=0.6268156193769895
Epoch #41: loss=0.5894778932516391
Epoch #42: loss=0.727560987839332
Epoch #43: loss=0.6482083063859206
Epoch #44: loss=0.6274798042499102
Epoch #45: loss=0.5653812507024178
Epoch #46: loss=0.5335789116529318
Epoch #47: loss=0.5292701778503565
Epoch #48: loss=0.5031185299158096
Epoch #49: loss=0.534916945374929
Epoch #50: loss=0.5294672262210113
Epoch #51: loss=0.48459000426989335
Epoch #52: loss=0.5375080039867988
Epoch #53: loss=0.4887728519164599
Epoch #54: loss=0.4063370285125879
Epoch #55: loss=0.43084462445515853
Epoch #56: loss=0.42022214142175823
Epoch #57: loss=0.42417552264837116
Epoch #58: loss=0.4248444415055789
Epoch #59: loss=0.9603444131521078
Epoch #60: loss=0.630976086625686
Epoch #61: loss=0.6580992100330499
Epoch #62: loss=0.4801843659235881
Epoch #63: loss=0.41979990670314205
Epoch #64: loss=0.3813595066850002
Epoch #65: loss=0.37488150481994337
Epoch #66: loss=0.384613043986834
Epoch #67: loss=0.3952704627926533
Epoch #68: loss=0.32350290623994976
Epoch #69: loss=0.39882882741781384
Epoch #70: loss=0.34562086772460204
Epoch #71: loss=0.3432667043346625
Epoch #72: loss=0.4040326229654826
Epoch #73: loss=0.3429732872889592
Epoch #74: loss=0.3980931186905274
Epoch #75: loss=0.4303683483829865
Epoch #76: loss=0.37691752784527266
Epoch #77: loss=0.322843968295134
Epoch #78: loss=0.43102796834248763
Epoch #79: loss=0.32482022047042847
Epoch #80: loss=0.2989529623435094
Epoch #81: loss=0.29261753249626893
Epoch #82: loss=0.36181383579969406
Epoch #83: loss=0.37306656115330183
Epoch #84: loss=0.27841845555947375
Epoch #85: loss=0.26998294030244535
Epoch #86: loss=0.28703788782541567
Epoch #87: loss=0.24229001769652733
Epoch #88: loss=0.238722899212287
Epoch #89: loss=0.26265908433840823
Epoch #90: loss=0.23790312501100394
Epoch #91: loss=0.19439610065175936
Epoch #92: loss=0.26398383281551874
Epoch #93: loss=0.23772994342904824
Epoch #94: loss=0.2259210290817114
Epoch #95: loss=0.26023717109973615
Epoch #96: loss=0.19438356189773634
Epoch #97: loss=0.23933891780101335
Epoch #98: loss=0.2430251447054056
Epoch #99: loss=0.20107136981991622
Epoch #100: loss=0.2380829548033384
Epoch #101: loss=0.22241011204627845
Epoch #102: loss=0.25098209799482274
Epoch #103: loss=0.35816601663827896
Epoch #104: loss=0.2404543705857717
Epoch #105: loss=0.18129298778680655
Epoch #106: loss=0.21379824355244637
Epoch #107: loss=0.1888100880269821
Epoch #108: loss=0.16462388233496592
Epoch #109: loss=0.167845300756968
Epoch #110: loss=0.14927397123896158
Epoch #111: loss=0.21456276740019137
Epoch #112: loss=0.13908037801201528
Epoch #113: loss=0.17812628470934355
Epoch #114: loss=0.13973542388815147
Epoch #115: loss=0.11982851160260347
Epoch #116: loss=0.21602791275542516
Epoch #117: loss=0.15718295511144859
Epoch #118: loss=0.17274143346227133
Epoch #119: loss=0.15015144144686368
Epoch #120: loss=0.12315024621784687
Epoch #121: loss=0.14073433282856757
Epoch #122: loss=0.11629299289331986
Epoch #123: loss=0.12844235493013492
Epoch #124: loss=0.14411072404338762
Epoch #125: loss=0.14335937038637125
Epoch #126: loss=0.13983459355166325
Epoch #127: loss=0.1446786103053735
Epoch #128: loss=0.1993478975043847
Epoch #129: loss=0.21884422606000534
Epoch #130: loss=0.16905880920015848
Epoch #131: loss=0.1264449764902775
Epoch #132: loss=0.26215582111707103
Epoch #133: loss=0.20479736133263662
Epoch #134: loss=0.13735803761161292
Epoch #135: loss=0.1218010806120359
Epoch #136: loss=0.10041317572960487
Epoch #137: loss=0.12075916147575928
Epoch #138: loss=0.10261851792725232
Epoch #139: loss=0.1158368461407148
Epoch #140: loss=0.13793287383249173
Epoch #141: loss=0.09041394107043743
Epoch #142: loss=0.2425304506547176
Epoch #143: loss=0.15517391350406867
Epoch #144: loss=0.11287553680057709
Epoch #145: loss=0.12183782544273597
Epoch #146: loss=0.09621785337535235
Epoch #147: loss=0.1337896790355444
Epoch #148: loss=0.09942085553820317
Epoch #149: loss=0.20071762857528833
Epoch #150: loss=0.11605643695936753
Epoch #151: loss=0.1993661276423014
Epoch #152: loss=0.10668135334092838
Epoch #153: loss=0.48029878305701107
Epoch #154: loss=0.7609478349869068
Epoch #155: loss=0.35196942635453665
Epoch #156: loss=0.27302681052914035
Epoch #157: loss=0.27805443623891246
Epoch #158: loss=0.5033031488553836
Epoch #159: loss=0.23411415832547042
Epoch #160: loss=0.22098263997871143
Epoch #161: loss=0.11215421055945066
Epoch #162: loss=0.092505405155512
Epoch #163: loss=0.2593756534445744
Epoch #164: loss=0.1556132324039936
Epoch #165: loss=0.12993667274713516
Epoch #166: loss=0.11263842766101544
Epoch #167: loss=0.08767251949757338
Epoch #168: loss=0.10342284779135998
Epoch #169: loss=0.08182561168303856
Epoch #170: loss=0.10906114787436448
Epoch #171: loss=0.1873389631509781
Epoch #172: loss=0.11707735792375527
Epoch #173: loss=0.10033646670098488
Epoch #174: loss=0.09041819284455134
Epoch #175: loss=0.08474537787529138
Epoch #176: loss=0.07314719904500705
Epoch #177: loss=0.15083052332584673
Epoch #178: loss=0.09562617003058012
Epoch #179: loss=0.07610579701856925
Epoch #180: loss=0.08024397134207763
Epoch #181: loss=0.0706343029697354
Epoch #182: loss=0.0781822087099919
Epoch #183: loss=0.09492935046840173
Epoch #184: loss=0.10631476514614545
Epoch #185: loss=0.06658361322031571
Epoch #186: loss=0.07581655007715409
Epoch #187: loss=0.06394507958052251
Epoch #188: loss=0.06363206664816691
Epoch #189: loss=0.07397450721607758
Epoch #190: loss=0.0605819014689097
Epoch #191: loss=0.05812036661574474
Epoch #192: loss=0.15300627933958402
Epoch #193: loss=0.11311917479794759
Epoch #194: loss=0.24813427704458052
Epoch #195: loss=0.20928955464982069
Epoch #196: loss=0.09309665830089496
Epoch #197: loss=0.09259322299980201
Epoch #198: loss=0.08324390040853849
Epoch #199: loss=0.06739742036622304
Epoch #200: loss=0.07965466215346868
Epoch #201: loss=0.06542210882672897
Epoch #202: loss=0.05636993953241752
Epoch #203: loss=0.1621315645483824
Epoch #204: loss=0.07311604730784893
Epoch #205: loss=0.07753045577555895
Epoch #206: loss=0.06818289245263888
Epoch #207: loss=0.24064082802774814
Epoch #208: loss=0.09385420819028066
Epoch #209: loss=0.07232213149277064
Epoch #210: loss=0.06545876023861077
Epoch #211: loss=0.09677412883880046
Epoch #212: loss=0.08324511571285817
Epoch #213: loss=0.06531944949753009
Epoch #214: loss=0.056998578186791674
Epoch #215: loss=0.057011048237864785
Epoch #216: loss=0.06418661336199595
Epoch #217: loss=0.09949952715004866
Epoch #218: loss=0.08675388561991546
Epoch #219: loss=0.07402163930237293
Epoch #220: loss=0.07454434574510042
Epoch #221: loss=0.08483308940552749
Epoch #222: loss=0.09480962701714955
Epoch #223: loss=0.07129027407902938
Epoch #224: loss=0.13854359204952532
Epoch #225: loss=0.05837912649775927
Epoch #226: loss=0.06167756966673411
Epoch #227: loss=0.04553190514875146
Epoch #228: loss=0.04759590614300508
Epoch #229: loss=0.0659389693934757
Epoch #230: loss=0.059761710214213684
Epoch #231: loss=0.07565579531141199
Epoch #232: loss=0.047907667592740975
Epoch #233: loss=0.040865163605373636
Epoch #234: loss=0.10339888468241462
Epoch #235: loss=0.05593325806638369
Epoch #236: loss=0.061545324905847125
Epoch #237: loss=0.053956468553783804
Epoch #238: loss=0.22496302239596844
Epoch #239: loss=0.09183554129245189
Epoch #240: loss=0.0648055333787432
Epoch #241: loss=0.06132968164120729
Epoch #242: loss=0.06287269810071358
Epoch #243: loss=0.08337288385686967
Epoch #244: loss=0.06561447192843144
Epoch #245: loss=0.03505623061209917
Epoch #246: loss=0.052480598589262135
Epoch #247: loss=0.06399868084834172
Epoch #248: loss=0.08790631448993316
Epoch #249: loss=0.0620720751870137

Training time: 0:09:05.948103

Finished.
n2one setting weather -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2021/model.pkl', muti_dataset='weather', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.90638e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.77637e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.90638e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5750493799152245, 'MAE': 0.5318036925524705}
Finished.
------------------------- record done -------------------------
n2one setting weather -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2021/model.pkl', muti_dataset='weather', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.11521e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.29445e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.11521e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.2837399861848999, 'MAE': 0.37524472635281014}
Finished.
------------------------- record done -------------------------
n2one setting weather -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2021/model.pkl', muti_dataset='weather', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.62712e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.14326e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.62712e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.49573055198445065, 'MAE': 0.49066722430392595}
Finished.
------------------------- record done -------------------------
n2one setting weather -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2021/model.pkl', muti_dataset='weather', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.53772e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.05752e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.53772e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.1843444670564988, 'MAE': 0.30344196855066974}
Finished.
------------------------- record done -------------------------
n2one setting weather -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2021/model.pkl', muti_dataset='weather', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.6383e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.38622e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.18846588014597962, 'MAE': 0.30307643068583623}
Finished.
------------------------- record done -------------------------
n2one setting weather -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2021/model.pkl', muti_dataset='weather', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.97898e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.87197e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.97898e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8056008295860837, 'MAE': 0.4555389591631979}
Finished.
------------------------- record done -------------------------
n2one setting weather -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2021/model.pkl', muti_dataset='weather', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.82544e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.59747e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.82544e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.386135192957709, 'MAE': 0.42179079506816247}
Finished.
------------------------- record done -------------------------
n2one setting weather -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2021/model.pkl', muti_dataset='weather', random_seed=2021, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.75361e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.31704e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.75361e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 1.1054238873998679, 'MAE': 0.8592639355188005}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='ETTh1', random_seed=2022, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/ETTh1_epochs_250_seed_2022
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=6.039025102342878
Epoch #1: loss=3.4527296338762556
Epoch #2: loss=2.8515128067561557
Epoch #3: loss=2.2896504742758617
Epoch #4: loss=2.282594953264509
Epoch #5: loss=2.0273821524211337
Epoch #6: loss=2.1367639132908414
Epoch #7: loss=1.9357098170689173
Epoch #8: loss=1.8224035160882133
Epoch #9: loss=1.7335562195096696
Epoch #10: loss=1.6650551557540894
Epoch #11: loss=1.7623606749943324
Epoch #12: loss=1.5363681827272688
Epoch #13: loss=1.643688542502267
Epoch #14: loss=1.5198812314442225
Epoch #15: loss=1.4565335852759225
Epoch #16: loss=1.4192741768700736
Epoch #17: loss=1.3032009771892004
Epoch #18: loss=1.1739925827298845
Epoch #19: loss=1.3758113895143782
Epoch #20: loss=1.3736824989318848
Epoch #21: loss=1.1912797859736852
Epoch #22: loss=1.1474795171192713
Epoch #23: loss=1.2150178296225411
Epoch #24: loss=1.223568388393947
Epoch #25: loss=1.18652777160917
Epoch #26: loss=1.2009874071393694
Epoch #27: loss=1.032693931034633
Epoch #28: loss=1.0463870678629195
Epoch #29: loss=1.0527771370751517
Epoch #30: loss=1.050950050354004
Epoch #31: loss=1.109869727066585
Epoch #32: loss=1.0523550510406494
Epoch #33: loss=1.0245255827903748
Epoch #34: loss=0.9698192392076764
Epoch #35: loss=0.9551441839763096
Epoch #36: loss=0.8744951145989555
Epoch #37: loss=0.8544253706932068
Epoch #38: loss=0.8899084840502057
Epoch #39: loss=0.8080562949180603
Epoch #40: loss=0.9054551805768695
Epoch #41: loss=0.778716402394431
Epoch #42: loss=0.8622891647475106
Epoch #43: loss=0.9485219035829816
Epoch #44: loss=0.8106806874275208
Epoch #45: loss=0.9008816054889134
Epoch #46: loss=0.8437241315841675
Epoch #47: loss=0.7570756844111851
Epoch #48: loss=0.7419325198446002
Epoch #49: loss=0.7925213405064174
Epoch #50: loss=0.7188809514045715
Epoch #51: loss=0.7176869000707354
Epoch #52: loss=0.6729000806808472
Epoch #53: loss=0.9327969040189471
Epoch #54: loss=0.7880512731415885
Epoch #55: loss=0.7840949637549264
Epoch #56: loss=0.5917154422828129
Epoch #57: loss=0.659518267427172
Epoch #58: loss=0.8286191310201373
Epoch #59: loss=0.7626173070498875
Epoch #60: loss=0.6541525082928794
Epoch #61: loss=0.6235319205692836
Epoch #62: loss=0.6467207755361285
Epoch #63: loss=0.6810439612184253
Epoch #64: loss=0.6987790209906442
Epoch #65: loss=0.815684552703585
Epoch #66: loss=0.6223857317652021
Epoch #67: loss=0.6447068325110844
Epoch #68: loss=0.6314492736543927
Epoch #69: loss=0.5803329178265163
Epoch #70: loss=0.6563096599919456
Epoch #71: loss=0.5547905394009182
Epoch #72: loss=0.5840702652931213
Epoch #73: loss=0.505478207554136
Epoch #74: loss=0.6515999266079494
Epoch #75: loss=0.5837933123111725
Epoch #76: loss=0.5108918462480817
Epoch #77: loss=0.5165434053965977
Epoch #78: loss=0.46331198300634113
Epoch #79: loss=0.6036446605409894
Epoch #80: loss=0.49183538981846403
Epoch #81: loss=0.550918881382261
Epoch #82: loss=0.4774876322065081
Epoch #83: loss=0.3964895393167223
Epoch #84: loss=0.4431379394871848
Epoch #85: loss=0.3926477219377245
Epoch #86: loss=0.5152883742536817
Epoch #87: loss=0.4190116013799395
Epoch #88: loss=0.48306245463235037
Epoch #89: loss=0.6533872144562858
Epoch #90: loss=0.7892775365284511
Epoch #91: loss=0.6941046374184745
Epoch #92: loss=0.651934048959187
Epoch #93: loss=0.6393398216792515
Epoch #94: loss=0.6619678480284554
Epoch #95: loss=0.4789858034678868
Epoch #96: loss=0.6176293109144483
Epoch #97: loss=0.44938680103846956
Epoch #98: loss=0.3606142657143729
Epoch #99: loss=0.43072761808122906
Epoch #100: loss=0.5514407455921173
Epoch #101: loss=0.41887655002730234
Epoch #102: loss=0.5091388268130166
Epoch #103: loss=0.46513459937913076
Epoch #104: loss=0.3872191139629909
Epoch #105: loss=0.509521450315203
Epoch #106: loss=0.38460318531308857
Epoch #107: loss=0.5152488052845001
Epoch #108: loss=0.3441732908998217
Epoch #109: loss=0.5742174514702388
Epoch #110: loss=0.43558051756450106
Epoch #111: loss=0.3940690628119877
Epoch #112: loss=0.5490042780126844
Epoch #113: loss=0.4374767371586391
Epoch #114: loss=0.4038215833050864
Epoch #115: loss=0.33349194696971346
Epoch #116: loss=0.4322896770068577
Epoch #117: loss=0.3414292335510254
Epoch #118: loss=0.34256888713155476
Epoch #119: loss=0.3634741199868066
Epoch #120: loss=0.3901353435856955
Epoch #121: loss=0.43812115277562824
Epoch #122: loss=0.40510199538299013
Epoch #123: loss=0.5290852742535728
Epoch #124: loss=0.399465092590877
Epoch #125: loss=0.5090127118996212
Epoch #126: loss=0.3801165393420628
Epoch #127: loss=0.3939523015703474
Epoch #128: loss=0.3679171715463911
Epoch #129: loss=0.3337789348193577
Epoch #130: loss=0.37018868752888273
Epoch #131: loss=0.302105792931148
Epoch #132: loss=0.4080140122345516
Epoch #133: loss=0.3394877484866551
Epoch #134: loss=0.4402120751993997
Epoch #135: loss=0.32394455799034666
Epoch #136: loss=0.31300144110407147
Epoch #137: loss=0.2970126249960491
Epoch #138: loss=0.3593126961163112
Epoch #139: loss=0.4664794419492994
Epoch #140: loss=0.2959239717040743
Epoch #141: loss=0.3201905105795179
Epoch #142: loss=0.34894745690482004
Epoch #143: loss=0.3308368091072355
Epoch #144: loss=0.3179215575967516
Epoch #145: loss=0.3125936431544168
Epoch #146: loss=0.2931902919496809
Epoch #147: loss=0.3351913392543793
Epoch #148: loss=0.3254520446062088
Epoch #149: loss=0.3739661957536425
Epoch #150: loss=0.30162419165883747
Epoch #151: loss=0.3422927792583193
Epoch #152: loss=0.31241309004170553
Epoch #153: loss=0.33308603721005575
Epoch #154: loss=0.3129102310964039
Epoch #155: loss=0.392564914056233
Epoch #156: loss=0.47243286456380573
Epoch #157: loss=0.33055636073861805
Epoch #158: loss=0.285736294729369
Epoch #159: loss=0.31022228939192636
Epoch #160: loss=0.47870092945439474
Epoch #161: loss=0.3123529212815421
Epoch #162: loss=0.2981098123959133
Epoch #163: loss=0.3526711165904999
Epoch #164: loss=0.30527167660849436
Epoch #165: loss=0.4135102331638336
Epoch #166: loss=0.2667400985956192
Epoch #167: loss=0.28438894876411985
Epoch #168: loss=0.3794610755784171
Epoch #169: loss=0.27829220252377646
Epoch #170: loss=0.3086782715150288
Epoch #171: loss=0.2633828669786453
Epoch #172: loss=0.29353908555848257
Epoch #173: loss=0.3538490299667631
Epoch #174: loss=0.31487905979156494
Epoch #175: loss=0.29722786375454496
Epoch #176: loss=0.24497980305126735
Epoch #177: loss=0.34090846351214815
Epoch #178: loss=0.28918619453907013
Epoch #179: loss=0.23284950426646642
Epoch #180: loss=0.24529316808496202
Epoch #181: loss=0.36999658175877165
Epoch #182: loss=0.4281290535415922
Epoch #183: loss=0.30778553656169344
Epoch #184: loss=0.2398805660860879
Epoch #185: loss=0.2710695288011006
Epoch #186: loss=0.2315672359296254
Epoch #187: loss=0.4282142243215016
Epoch #188: loss=0.2593958420412881
Epoch #189: loss=0.2971993067434856
Epoch #190: loss=0.2843963588987078
Epoch #191: loss=0.27241490355559755
Epoch #192: loss=0.24279240838118962
Epoch #193: loss=0.2892888677971704
Epoch #194: loss=0.4371140492813928
Epoch #195: loss=0.2160799205303192
Epoch #196: loss=0.31799063299383434
Epoch #197: loss=0.2635649485247476
Epoch #198: loss=0.30671026025499615
Epoch #199: loss=0.26606527609484537
Epoch #200: loss=0.3031125068664551
Epoch #201: loss=0.3777275489909308
Epoch #202: loss=0.2988039233854839
Epoch #203: loss=0.3195089123078755
Epoch #204: loss=0.23918414328779494
Epoch #205: loss=0.287979143006461
Epoch #206: loss=0.2786386353628976
Epoch #207: loss=0.3095822185277939
Epoch #208: loss=0.3045076813016619
Epoch #209: loss=0.30783431444849285
Epoch #210: loss=0.24846933356353215
Epoch #211: loss=0.2335887679031917
Epoch #212: loss=0.24701823081289018
Epoch #213: loss=0.19859164953231812
Epoch #214: loss=0.231307395866939
Epoch #215: loss=0.27944013476371765
Epoch #216: loss=0.2200452664068767
Epoch #217: loss=0.2634747305086681
Epoch #218: loss=0.27173036336898804
Epoch #219: loss=0.23668651921408518
Epoch #220: loss=0.2648813767092569
Epoch #221: loss=0.2500896326133183
Epoch #222: loss=0.24164509347506932
Epoch #223: loss=0.2546887163605009
Epoch #224: loss=0.23909354635647365
Epoch #225: loss=0.18076723175389425
Epoch #226: loss=0.2826925984450749
Epoch #227: loss=0.24943404751164572
Epoch #228: loss=0.22777153977325984
Epoch #229: loss=0.19974357741219656
Epoch #230: loss=0.1836594236748559
Epoch #231: loss=0.19829688114779337
Epoch #232: loss=0.22033671821866715
Epoch #233: loss=0.1986485230071204
Epoch #234: loss=0.24252072402409144
Epoch #235: loss=0.1944121335233961
Epoch #236: loss=0.26929149670260294
Epoch #237: loss=0.23932636848517827
Epoch #238: loss=0.26607934066227507
Epoch #239: loss=0.2067094828401293
Epoch #240: loss=0.2907691385064806
Epoch #241: loss=0.29596265511853354
Epoch #242: loss=0.2529516986438206
Epoch #243: loss=0.4972161906106131
Epoch #244: loss=0.35574696958065033
Epoch #245: loss=0.2920074782201222
Epoch #246: loss=0.33688630163669586
Epoch #247: loss=0.3000809188399996
Epoch #248: loss=0.28556061003889355
Epoch #249: loss=0.3515133815152304

Training time: 0:01:49.790508

Finished.
n2one setting ETTh1 -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2022/model.pkl', muti_dataset='ETTh1', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.58025e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.15731e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5898632369363817, 'MAE': 0.5365282663674136}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2022/model.pkl', muti_dataset='ETTh1', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.60409e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.07621e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.26368140527464295, 'MAE': 0.365129528836302}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2022/model.pkl', muti_dataset='ETTh1', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.30418e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.81929e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.42372e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.30418e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.4770143440585126, 'MAE': 0.4710775348269885}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2022/model.pkl', muti_dataset='ETTh1', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.65638e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.82949e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.33307e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.17897211942605398, 'MAE': 0.29840424011349853}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2022/model.pkl', muti_dataset='ETTh1', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.66042e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.1908586758983556, 'MAE': 0.3010942517423785}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2022/model.pkl', muti_dataset='ETTh1', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.10147e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.19679e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.3385e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.10147e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8209036338489586, 'MAE': 0.4631298293586671}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2022/model.pkl', muti_dataset='ETTh1', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.15962e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.26775e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.43223e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.15962e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.35342191813391494, 'MAE': 0.4193833479554537}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2022/model.pkl', muti_dataset='ETTh1', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.67239e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.8547e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.47453e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.8547e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.40230363772623257, 'MAE': 0.4597540553061617}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='ETTh2', random_seed=2022, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/ETTh2_epochs_250_seed_2022
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=6.126313175473895
Epoch #1: loss=3.1668286323547363
Epoch #2: loss=2.66111581666129
Epoch #3: loss=2.3486193077904836
Epoch #4: loss=2.272475208554949
Epoch #5: loss=2.078761952263968
Epoch #6: loss=2.1739968912942067
Epoch #7: loss=1.9152923652103968
Epoch #8: loss=1.8027360779898507
Epoch #9: loss=1.7467155456542969
Epoch #10: loss=1.6522810118538993
Epoch #11: loss=1.7419432231358118
Epoch #12: loss=1.5395103863307409
Epoch #13: loss=1.5874746016093664
Epoch #14: loss=1.474609477179391
Epoch #15: loss=1.4314899444580078
Epoch #16: loss=1.392249243600028
Epoch #17: loss=1.2991456985473633
Epoch #18: loss=1.1548406737191337
Epoch #19: loss=1.3536899600710188
Epoch #20: loss=1.3578598499298096
Epoch #21: loss=1.1422126974378313
Epoch #22: loss=1.1180104272706168
Epoch #23: loss=1.1512961047036308
Epoch #24: loss=1.2140178680419922
Epoch #25: loss=1.166652066367013
Epoch #26: loss=1.1708133816719055
Epoch #27: loss=1.0110483425004142
Epoch #28: loss=1.058667540550232
Epoch #29: loss=1.0374571425574166
Epoch #30: loss=0.9816343273435321
Epoch #31: loss=1.0279031225613184
Epoch #32: loss=0.9703506486756461
Epoch #33: loss=0.9830150348799569
Epoch #34: loss=0.9166329843657357
Epoch #35: loss=0.9378216522080558
Epoch #36: loss=0.7915359394890922
Epoch #37: loss=0.8270401273454938
Epoch #38: loss=0.8983513457434518
Epoch #39: loss=0.7505863308906555
Epoch #40: loss=0.9992996965135846
Epoch #41: loss=0.718330979347229
Epoch #42: loss=0.9194896136011396
Epoch #43: loss=0.8804519517081124
Epoch #44: loss=0.8532619816916329
Epoch #45: loss=0.8716807195118496
Epoch #46: loss=0.8680546539170402
Epoch #47: loss=0.7637888363429478
Epoch #48: loss=0.7171786938394819
Epoch #49: loss=0.7578454869134086
Epoch #50: loss=0.6924976025308881
Epoch #51: loss=0.7058774828910828
Epoch #52: loss=0.6934749356337956
Epoch #53: loss=0.9343226381710598
Epoch #54: loss=0.7794242927006313
Epoch #55: loss=0.757791987487248
Epoch #56: loss=0.5697681478091648
Epoch #57: loss=0.6535282049860273
Epoch #58: loss=0.7643119607652936
Epoch #59: loss=0.7299726009368896
Epoch #60: loss=0.6101949002061572
Epoch #61: loss=0.5977908287729535
Epoch #62: loss=0.557199205671038
Epoch #63: loss=0.6637720806258065
Epoch #64: loss=0.6797861329146794
Epoch #65: loss=0.8050416111946106
Epoch #66: loss=0.5902354121208191
Epoch #67: loss=0.6381636687687465
Epoch #68: loss=0.6103375979832241
Epoch #69: loss=0.5361411018030984
Epoch #70: loss=0.6348511959825244
Epoch #71: loss=0.501806799854551
Epoch #72: loss=0.5551275653498513
Epoch #73: loss=0.477711877652577
Epoch #74: loss=0.5910281751837049
Epoch #75: loss=0.5406625398567745
Epoch #76: loss=0.5060735600335258
Epoch #77: loss=0.4981474535805838
Epoch #78: loss=0.47865105526787893
Epoch #79: loss=0.5847631394863129
Epoch #80: loss=0.4855907985142299
Epoch #81: loss=0.6142901139599937
Epoch #82: loss=0.4943119244916098
Epoch #83: loss=0.4015138489859445
Epoch #84: loss=0.42109234418187824
Epoch #85: loss=0.36964151263237
Epoch #86: loss=0.5052843136446816
Epoch #87: loss=0.4859477324145181
Epoch #88: loss=0.40794290815080914
Epoch #89: loss=0.6109954799924578
Epoch #90: loss=0.7621386860098157
Epoch #91: loss=0.704169750213623
Epoch #92: loss=0.6077139803341457
Epoch #93: loss=0.5590189737933022
Epoch #94: loss=0.584170686347144
Epoch #95: loss=0.4115022804055895
Epoch #96: loss=0.511904103415353
Epoch #97: loss=0.378012831721987
Epoch #98: loss=0.31405115127563477
Epoch #99: loss=0.4140229267733438
Epoch #100: loss=0.5582817494869232
Epoch #101: loss=0.3825685126440866
Epoch #102: loss=0.4732309877872467
Epoch #103: loss=0.46285121355737957
Epoch #104: loss=0.37227825607572285
Epoch #105: loss=0.5378994515963963
Epoch #106: loss=0.4122426211833954
Epoch #107: loss=0.5586768686771393
Epoch #108: loss=0.3220945511545454
Epoch #109: loss=0.5953734687396458
Epoch #110: loss=0.4711631621633257
Epoch #111: loss=0.4097071588039398
Epoch #112: loss=0.5762271242482322
Epoch #113: loss=0.4504642443997519
Epoch #114: loss=0.3924325278827122
Epoch #115: loss=0.32943038429532734
Epoch #116: loss=0.42289636390549795
Epoch #117: loss=0.3339494360344751
Epoch #118: loss=0.34294662731034414
Epoch #119: loss=0.342985742858478
Epoch #120: loss=0.33935504087380003
Epoch #121: loss=0.34812456369400024
Epoch #122: loss=0.3785639362675803
Epoch #123: loss=0.4937857559749058
Epoch #124: loss=0.33274972438812256
Epoch #125: loss=0.43064671754837036
Epoch #126: loss=0.326630847794669
Epoch #127: loss=0.37798374465533663
Epoch #128: loss=0.3323894015380314
Epoch #129: loss=0.27966112537043436
Epoch #130: loss=0.34034551892961773
Epoch #131: loss=0.3202498129435948
Epoch #132: loss=0.3649659071649824
Epoch #133: loss=0.3845629606928144
Epoch #134: loss=0.4375858647482736
Epoch #135: loss=0.3395197370222637
Epoch #136: loss=0.30645119292395456
Epoch #137: loss=0.3032196526016508
Epoch #138: loss=0.33160717146737234
Epoch #139: loss=0.4394792488643101
Epoch #140: loss=0.2863732895680836
Epoch #141: loss=0.2931525068623679
Epoch #142: loss=0.35825043490954805
Epoch #143: loss=0.3175033373492105
Epoch #144: loss=0.32214164308139254
Epoch #145: loss=0.28304637117045267
Epoch #146: loss=0.28405018363680157
Epoch #147: loss=0.32190308826310293
Epoch #148: loss=0.3137366643973759
Epoch #149: loss=0.3681352010795048
Epoch #150: loss=0.2717365175485611
Epoch #151: loss=0.38346537947654724
Epoch #152: loss=0.36011495760508944
Epoch #153: loss=0.31003702751227785
Epoch #154: loss=0.3599952246461596
Epoch #155: loss=0.3823958124433245
Epoch #156: loss=0.456748902797699
Epoch #157: loss=0.27827538762773785
Epoch #158: loss=0.27761991747788023
Epoch #159: loss=0.25685868305819376
Epoch #160: loss=0.46468584878104074
Epoch #161: loss=0.3203225497688566
Epoch #162: loss=0.3244720441954477
Epoch #163: loss=0.3405710245881762
Epoch #164: loss=0.3598915423665728
Epoch #165: loss=0.43444920224802835
Epoch #166: loss=0.2907663754054478
Epoch #167: loss=0.30221274495124817
Epoch #168: loss=0.3618414912905012
Epoch #169: loss=0.3065317486013685
Epoch #170: loss=0.3490415875400816
Epoch #171: loss=0.2691000189099993
Epoch #172: loss=0.2913913535220282
Epoch #173: loss=0.35148911816733225
Epoch #174: loss=0.2646354500736509
Epoch #175: loss=0.2774983559335981
Epoch #176: loss=0.23329296920980727
Epoch #177: loss=0.3298218271562031
Epoch #178: loss=0.2656695991754532
Epoch #179: loss=0.2339893707207271
Epoch #180: loss=0.23721820328916823
Epoch #181: loss=0.3690533574138369
Epoch #182: loss=0.415937568460192
Epoch #183: loss=0.2762761414051056
Epoch #184: loss=0.24209981731006078
Epoch #185: loss=0.28040249219962526
Epoch #186: loss=0.22597481523241317
Epoch #187: loss=0.4165404162236622
Epoch #188: loss=0.22711222512381418
Epoch #189: loss=0.2930483860628946
Epoch #190: loss=0.2527818977832794
Epoch #191: loss=0.24815243695463454
Epoch #192: loss=0.24587760865688324
Epoch #193: loss=0.3159234864371164
Epoch #194: loss=0.4017635328429086
Epoch #195: loss=0.24075194128922053
Epoch #196: loss=0.25800820546490805
Epoch #197: loss=0.24473826374326432
Epoch #198: loss=0.28964565481458393
Epoch #199: loss=0.28075773801122395
Epoch #200: loss=0.29429973449025837
Epoch #201: loss=0.388308904000691
Epoch #202: loss=0.2823369375297001
Epoch #203: loss=0.3439344934054783
Epoch #204: loss=0.24584061545985086
Epoch #205: loss=0.27681604453495573
Epoch #206: loss=0.29318955540657043
Epoch #207: loss=0.2738768586090633
Epoch #208: loss=0.3078329201255526
Epoch #209: loss=0.30391291848250795
Epoch #210: loss=0.2544362459863935
Epoch #211: loss=0.25209098628589083
Epoch #212: loss=0.2623226323298046
Epoch #213: loss=0.19706979393959045
Epoch #214: loss=0.25120491428034647
Epoch #215: loss=0.28570414440972464
Epoch #216: loss=0.23374501296452113
Epoch #217: loss=0.21672925565923964
Epoch #218: loss=0.33693390020302366
Epoch #219: loss=0.24940899653094156
Epoch #220: loss=0.2836320059640067
Epoch #221: loss=0.25437056379658834
Epoch #222: loss=0.23093764909676143
Epoch #223: loss=0.2750151881149837
Epoch #224: loss=0.248834918652262
Epoch #225: loss=0.18849411606788635
Epoch #226: loss=0.3148892841168812
Epoch #227: loss=0.2558813605989729
Epoch #228: loss=0.22499727989946092
Epoch #229: loss=0.19841085800102778
Epoch #230: loss=0.1900766364165715
Epoch #231: loss=0.20251654088497162
Epoch #232: loss=0.19689152070454188
Epoch #233: loss=0.22122548733438765
Epoch #234: loss=0.19812810846737453
Epoch #235: loss=0.19029465104852403
Epoch #236: loss=0.28500196976321085
Epoch #237: loss=0.21028236831937516
Epoch #238: loss=0.26540803057806833
Epoch #239: loss=0.22470272651740483
Epoch #240: loss=0.31489709658282145
Epoch #241: loss=0.29083902282374247
Epoch #242: loss=0.22452612221240997
Epoch #243: loss=0.511183711034911
Epoch #244: loss=0.3164255768060684
Epoch #245: loss=0.23945615121296474
Epoch #246: loss=0.2574145176580974
Epoch #247: loss=0.2606441101857594
Epoch #248: loss=0.23459595441818237
Epoch #249: loss=0.24671554139682225

Training time: 0:01:46.013961

Finished.
n2one setting ETTh2 -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2022/model.pkl', muti_dataset='ETTh2', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.62842e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.12845e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.12845e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5857209757332981, 'MAE': 0.5365035892095842}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2022/model.pkl', muti_dataset='ETTh2', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.60659e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.12733e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.28266815447406857, 'MAE': 0.37905888562413}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2022/model.pkl', muti_dataset='ETTh2', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.7507e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.75431e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.39429e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.7507e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.48207299827366135, 'MAE': 0.47553353365834955}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2022/model.pkl', muti_dataset='ETTh2', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=8.74024e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.80124e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.26197e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.18019024304605302, 'MAE': 0.300171452272579}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2022/model.pkl', muti_dataset='ETTh2', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.929e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.16647312541079223, 'MAE': 0.2954861269513732}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2022/model.pkl', muti_dataset='ETTh2', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.15841e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.23801e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.44495e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.15841e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8204409841993756, 'MAE': 0.46288088701789437}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2022/model.pkl', muti_dataset='ETTh2', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.16151e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.22416e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.43745e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.16151e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3526864555033642, 'MAE': 0.4206916853703975}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2022/model.pkl', muti_dataset='ETTh2', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.19704e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.78701e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.22577e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.19704e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.4083978657034183, 'MAE': 0.46381245313060354}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='ETTm1', random_seed=2022, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/ETTm1_epochs_250_seed_2022
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=6.1812992529435595
Epoch #1: loss=3.6587712331251665
Epoch #2: loss=2.8379404978318648
Epoch #3: loss=2.4992835738442163
Epoch #4: loss=2.3096831061623315
Epoch #5: loss=2.1359243501316416
Epoch #6: loss=2.0475715507160532
Epoch #7: loss=1.955585544759577
Epoch #8: loss=1.8997605063698508
Epoch #9: loss=1.6955412084406072
Epoch #10: loss=1.6830647641962224
Epoch #11: loss=1.6232634566046975
Epoch #12: loss=1.489311467517506
Epoch #13: loss=1.464840748093345
Epoch #14: loss=1.4129631844433872
Epoch #15: loss=1.3741759820417925
Epoch #16: loss=1.2650636434555054
Epoch #17: loss=1.1779801141132007
Epoch #18: loss=1.1819443594325671
Epoch #19: loss=1.140892418948087
Epoch #20: loss=1.198458563197743
Epoch #21: loss=1.0884861024943264
Epoch #22: loss=1.1253802342848345
Epoch #23: loss=1.1105153181336143
Epoch #24: loss=1.0132394974881953
Epoch #25: loss=0.9066068530082703
Epoch #26: loss=1.0003294294530696
Epoch #27: loss=0.9851602207530629
Epoch #28: loss=1.0235638510097156
Epoch #29: loss=0.8944844820282676
Epoch #30: loss=0.8736392097039656
Epoch #31: loss=0.8265106732195074
Epoch #32: loss=0.8897816484624689
Epoch #33: loss=0.8850511745973066
Epoch #34: loss=0.9403435750441118
Epoch #35: loss=0.7388875972140919
Epoch #36: loss=0.7544992132620378
Epoch #37: loss=0.669528684832833
Epoch #38: loss=0.8091036243872209
Epoch #39: loss=0.655846590345556
Epoch #40: loss=0.8528939431363886
Epoch #41: loss=0.7685071609236978
Epoch #42: loss=0.8050672737034884
Epoch #43: loss=0.771326254714619
Epoch #44: loss=0.6355404637076638
Epoch #45: loss=0.6417945135723461
Epoch #46: loss=0.7218797640366987
Epoch #47: loss=0.750384352423928
Epoch #48: loss=0.6683943271636963
Epoch #49: loss=0.5927212211218748
Epoch #50: loss=0.6401793387803164
Epoch #51: loss=0.6227526502175764
Epoch #52: loss=0.6321267783641815
Epoch #53: loss=0.5193792446093126
Epoch #54: loss=0.5630050111900676
Epoch #55: loss=0.5313797186721455
Epoch #56: loss=0.6124042435125872
Epoch #57: loss=0.5248165266080336
Epoch #58: loss=0.6841774799607017
Epoch #59: loss=0.5937511216510426
Epoch #60: loss=0.5001505450768904
Epoch #61: loss=0.7117046361619775
Epoch #62: loss=0.5717078366062858
Epoch #63: loss=0.505227034742182
Epoch #64: loss=0.4898758991198106
Epoch #65: loss=0.5601513439958746
Epoch #66: loss=0.5613193782893094
Epoch #67: loss=0.4948083297772841
Epoch #68: loss=0.5444753657687794
Epoch #69: loss=0.5351199209690094
Epoch #70: loss=0.4686251499436118
Epoch #71: loss=0.426391831853173
Epoch #72: loss=0.46992564743215387
Epoch #73: loss=0.500261897390539
Epoch #74: loss=0.6227848665280775
Epoch #75: loss=0.44797775691205804
Epoch #76: loss=0.4626652110706676
Epoch #77: loss=0.44418063488873566
Epoch #78: loss=0.4575554972345179
Epoch #79: loss=0.39828246560963715
Epoch #80: loss=0.40679417144168506
Epoch #81: loss=0.5050486109473489
Epoch #82: loss=0.3724478943781419
Epoch #83: loss=0.4603116756135767
Epoch #84: loss=0.43213407559828326
Epoch #85: loss=0.4782988970929926
Epoch #86: loss=0.3904195915568959
Epoch #87: loss=0.42512819983742456
Epoch #88: loss=0.44722851839932526
Epoch #89: loss=0.4022762341932817
Epoch #90: loss=0.39630602300167084
Epoch #91: loss=0.30910223722457886
Epoch #92: loss=0.33510867573998193
Epoch #93: loss=0.36910058151591907
Epoch #94: loss=0.3114978467876261
Epoch #95: loss=0.323132107203657
Epoch #96: loss=0.3197024708444422
Epoch #97: loss=0.3082806860858744
Epoch #98: loss=0.37924853509122675
Epoch #99: loss=0.3287039372054013
Epoch #100: loss=0.4447287673299963
Epoch #101: loss=0.4297279038212516
Epoch #102: loss=0.3529502817175605
Epoch #103: loss=0.384273347529498
Epoch #104: loss=0.29978553273461084
Epoch #105: loss=0.4460856264287775
Epoch #106: loss=0.255669195543636
Epoch #107: loss=0.33959265730597754
Epoch #108: loss=0.2959069149060683
Epoch #109: loss=0.3960457593202591
Epoch #110: loss=0.29256223006681964
Epoch #111: loss=0.367339857599952
Epoch #112: loss=0.4047256383028897
Epoch #113: loss=0.29532532529397443
Epoch #114: loss=0.3819360827857798
Epoch #115: loss=0.27176462791182776
Epoch #116: loss=0.23772626708854327
Epoch #117: loss=0.2545629252086986
Epoch #118: loss=0.24109285798939792
Epoch #119: loss=0.28578136454929004
Epoch #120: loss=0.261581769043749
Epoch #121: loss=0.3215849277648059
Epoch #122: loss=0.2901588407429782
Epoch #123: loss=0.2791228931058537
Epoch #124: loss=0.24162165414203296
Epoch #125: loss=0.21167108552022415
Epoch #126: loss=0.23149349879134784
Epoch #127: loss=0.2155643579634753
Epoch #128: loss=0.21148605509237808
Epoch #129: loss=0.18216900459744714
Epoch #130: loss=0.22160379656336524
Epoch #131: loss=0.2153392495079474
Epoch #132: loss=0.14269110492684625
Epoch #133: loss=0.223930184814063
Epoch #134: loss=0.199852700937878
Epoch #135: loss=0.2418271160938523
Epoch #136: loss=0.20240088349038904
Epoch #137: loss=0.4152186655185439
Epoch #138: loss=0.2551508105613969
Epoch #139: loss=0.3151899535547603
Epoch #140: loss=0.4226777756756002
Epoch #141: loss=0.19220323860645294
Epoch #142: loss=0.23010963607918133
Epoch #143: loss=0.2047549161044034
Epoch #144: loss=0.42282613840970124
Epoch #145: loss=0.2402734946120869
Epoch #146: loss=0.2202141203663566
Epoch #147: loss=0.19685617902062155
Epoch #148: loss=0.1919315680861473
Epoch #149: loss=0.28588557785207575
Epoch #150: loss=0.18523041971705176
Epoch #151: loss=0.18531727587634866
Epoch #152: loss=0.19219855828718704
Epoch #153: loss=0.14523185789585114
Epoch #154: loss=0.16602956842292438
Epoch #155: loss=0.17925703525543213
Epoch #156: loss=0.19777564907615836
Epoch #157: loss=0.1885134611617435
Epoch #158: loss=0.21043572642586447
Epoch #159: loss=0.22990526800805872
Epoch #160: loss=0.15299813110720029
Epoch #161: loss=0.20235443386164578
Epoch #162: loss=0.32175563885407016
Epoch #163: loss=0.24342519519003955
Epoch #164: loss=0.17032434317198666
Epoch #165: loss=0.23834635520523245
Epoch #166: loss=0.13634195111014627
Epoch #167: loss=0.13831180401823737
Epoch #168: loss=0.16526250304146248
Epoch #169: loss=0.13024031912738626
Epoch #170: loss=0.12146403775973753
Epoch #171: loss=0.11524733291430907
Epoch #172: loss=0.18184190108017487
Epoch #173: loss=0.1784996370022947
Epoch #174: loss=0.19925923205234788
Epoch #175: loss=0.1584291166879914
Epoch #176: loss=0.20279335907914423
Epoch #177: loss=0.17302580922842026
Epoch #178: loss=0.1921131583777341
Epoch #179: loss=0.12753558633002368
Epoch #180: loss=0.14884041690013625
Epoch #181: loss=0.1186182593757456
Epoch #182: loss=0.14795750108632175
Epoch #183: loss=0.10288388451392
Epoch #184: loss=0.13523645292628894
Epoch #185: loss=0.12131438201124017
Epoch #186: loss=0.2351577722213485
Epoch #187: loss=0.14087963510643353
Epoch #188: loss=0.12927444685589184
Epoch #189: loss=0.07896775650707158
Epoch #190: loss=0.14806475016203793
Epoch #191: loss=0.3170591335405003
Epoch #192: loss=0.10689916461706161
Epoch #193: loss=0.24885418062860315
Epoch #194: loss=0.10828619585795836
Epoch #195: loss=0.1820878880945119
Epoch #196: loss=0.15533854744651102
Epoch #197: loss=0.1257662597027692
Epoch #198: loss=0.1568971062925729
Epoch #199: loss=0.46777804297479714
Epoch #200: loss=0.19718197259035977
Epoch #201: loss=0.13214524699883026
Epoch #202: loss=0.1528334292498502
Epoch #203: loss=0.1214223090897907
Epoch #204: loss=0.11562677472829819
Epoch #205: loss=0.09940507804805582
Epoch #206: loss=0.10055822879076004
Epoch #207: loss=0.09664449908516624
Epoch #208: loss=0.07742112671787088
Epoch #209: loss=0.09760050136934627
Epoch #210: loss=0.07657519897276704
Epoch #211: loss=0.10644010166552934
Epoch #212: loss=0.10287722843614491
Epoch #213: loss=0.16697249764745886
Epoch #214: loss=0.09496668726205826
Epoch #215: loss=0.13613645630803975
Epoch #216: loss=0.2051789513365789
Epoch #217: loss=0.15972064943476158
Epoch #218: loss=0.11841036514802412
Epoch #219: loss=0.09295341541821306
Epoch #220: loss=0.20294404673305425
Epoch #221: loss=0.153128944337368
Epoch #222: loss=0.09971398081291806
Epoch #223: loss=0.10698239369825883
Epoch #224: loss=0.11173904145305807
Epoch #225: loss=0.09733727269551971
Epoch #226: loss=0.23207474703138525
Epoch #227: loss=0.14788758517666298
Epoch #228: loss=0.09600240229205652
Epoch #229: loss=0.11354272372343323
Epoch #230: loss=0.09078500623052771
Epoch #231: loss=0.07216979868032715
Epoch #232: loss=0.08808036114681851
Epoch #233: loss=0.06730771505019882
Epoch #234: loss=0.0457616580480879
Epoch #235: loss=0.04751395705071362
Epoch #236: loss=0.09466247074306011
Epoch #237: loss=0.08977471325885165
Epoch #238: loss=0.058381130918860435
Epoch #239: loss=0.0746027146550742
Epoch #240: loss=0.07704866914586588
Epoch #241: loss=0.1170928410508416
Epoch #242: loss=0.07537092505530878
Epoch #243: loss=0.07728354023261504
Epoch #244: loss=0.05866168049926108
Epoch #245: loss=0.0806480845944448
Epoch #246: loss=0.12201041541993618
Epoch #247: loss=0.056512247093699196
Epoch #248: loss=0.05296150781214237
Epoch #249: loss=0.06925694678317416

Training time: 0:04:01.343172

Finished.
n2one setting ETTm1 -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2022/model.pkl', muti_dataset='ETTm1', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.02915e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.80749e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.02915e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5799990866355567, 'MAE': 0.536379561038039}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2022/model.pkl', muti_dataset='ETTm1', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.01649e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.8112e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.2625633541650511, 'MAE': 0.3641837743627082}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2022/model.pkl', muti_dataset='ETTm1', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.34017e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.5913e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.34017e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.48917236998481906, 'MAE': 0.4854713845127874}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2022/model.pkl', muti_dataset='ETTm1', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.3003e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.55923e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.3003e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.18040241790404496, 'MAE': 0.2997845546984144}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2022/model.pkl', muti_dataset='ETTm1', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.02931e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.20360515770556678, 'MAE': 0.30838062219445433}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2022/model.pkl', muti_dataset='ETTm1', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.40175e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.65782e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.40175e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8156655730517367, 'MAE': 0.45857076896712307}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2022/model.pkl', muti_dataset='ETTm1', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.40454e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.71722e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.40454e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3485294691544957, 'MAE': 0.4179342882000921}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2022/model.pkl', muti_dataset='ETTm1', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.3935e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.60228e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.3935e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.35321449225655277, 'MAE': 0.41858453533238327}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='ETTm2', random_seed=2022, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/ETTm2_epochs_250_seed_2022
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=6.774770649996671
Epoch #1: loss=3.854453845457597
Epoch #2: loss=2.924233089793812
Epoch #3: loss=2.629446181384
Epoch #4: loss=2.4039107019251045
Epoch #5: loss=2.255410996350375
Epoch #6: loss=2.15187931060791
Epoch #7: loss=2.0763425176793877
Epoch #8: loss=1.9880463643507524
Epoch #9: loss=1.810961213978854
Epoch #10: loss=1.8128305998715488
Epoch #11: loss=1.7031882784583352
Epoch #12: loss=1.5629036209800027
Epoch #13: loss=1.5523396947167136
Epoch #14: loss=1.4755489826202393
Epoch #15: loss=1.4366620128804988
Epoch #16: loss=1.3740158731287175
Epoch #17: loss=1.2440861571918835
Epoch #18: loss=1.2534274404699153
Epoch #19: loss=1.217021877115423
Epoch #20: loss=1.2491664344614202
Epoch #21: loss=1.1642092087052085
Epoch #22: loss=1.1771631565960972
Epoch #23: loss=1.1651605042544277
Epoch #24: loss=1.0833654512058606
Epoch #25: loss=0.999549307606437
Epoch #26: loss=1.0880468433553523
Epoch #27: loss=1.0220479369163513
Epoch #28: loss=1.0892389470880681
Epoch #29: loss=0.9298523501916365
Epoch #30: loss=0.9325864098288796
Epoch #31: loss=0.8747413971207358
Epoch #32: loss=0.9313016479665582
Epoch #33: loss=0.9259629899805243
Epoch #34: loss=0.9721647013317455
Epoch #35: loss=0.7962104786526073
Epoch #36: loss=0.7925897890871222
Epoch #37: loss=0.7262067903171886
Epoch #38: loss=0.8438649719411676
Epoch #39: loss=0.694891322742809
Epoch #40: loss=0.8727662292393771
Epoch #41: loss=0.7881234071471475
Epoch #42: loss=0.8537433309988542
Epoch #43: loss=0.8343945145606995
Epoch #44: loss=0.6861049749634482
Epoch #45: loss=0.6540193097157911
Epoch #46: loss=0.7540474371476606
Epoch #47: loss=0.7836222377690402
Epoch #48: loss=0.6928926977244291
Epoch #49: loss=0.6418221430345015
Epoch #50: loss=0.683800686489452
Epoch #51: loss=0.6797899549657648
Epoch #52: loss=0.680289011109959
Epoch #53: loss=0.5849949419498444
Epoch #54: loss=0.6167390942573547
Epoch #55: loss=0.554518994959918
Epoch #56: loss=0.6109770834445953
Epoch #57: loss=0.5439368134195154
Epoch #58: loss=0.7085298137231306
Epoch #59: loss=0.6203086484562267
Epoch #60: loss=0.5330913635817441
Epoch #61: loss=0.7407309873537584
Epoch #62: loss=0.5869209305806593
Epoch #63: loss=0.522645424712788
Epoch #64: loss=0.5046756104989485
Epoch #65: loss=0.5444282266226682
Epoch #66: loss=0.5097437771883878
Epoch #67: loss=0.48642723939635535
Epoch #68: loss=0.5846458700570193
Epoch #69: loss=0.5709603428840637
Epoch #70: loss=0.5020269426432523
Epoch #71: loss=0.4841637367551977
Epoch #72: loss=0.5315262377262115
Epoch #73: loss=0.5386276814070615
Epoch #74: loss=0.6099145304072987
Epoch #75: loss=0.46841295740821143
Epoch #76: loss=0.4501740742813457
Epoch #77: loss=0.46407299962910736
Epoch #78: loss=0.4875559454614466
Epoch #79: loss=0.4248801686547019
Epoch #80: loss=0.423654323274439
Epoch #81: loss=0.5217444815418937
Epoch #82: loss=0.3781886778094552
Epoch #83: loss=0.4707361107522791
Epoch #84: loss=0.42537609013644134
Epoch #85: loss=0.47603758898648346
Epoch #86: loss=0.37620063803412696
Epoch #87: loss=0.42434381354938855
Epoch #88: loss=0.4342634677886963
Epoch #89: loss=0.4419424127448689
Epoch #90: loss=0.4131887284192172
Epoch #91: loss=0.3408153382214633
Epoch #92: loss=0.3771558972922238
Epoch #93: loss=0.4251260500062596
Epoch #94: loss=0.4023630375211889
Epoch #95: loss=0.40305836363272235
Epoch #96: loss=0.37549716234207153
Epoch #97: loss=0.34208493341099133
Epoch #98: loss=0.4120317575606433
Epoch #99: loss=0.35652111877094617
Epoch #100: loss=0.4483453766866164
Epoch #101: loss=0.41113596612756903
Epoch #102: loss=0.35288700325922534
Epoch #103: loss=0.39102548360824585
Epoch #104: loss=0.32420364157720044
Epoch #105: loss=0.4710525572299957
Epoch #106: loss=0.27271483025767584
Epoch #107: loss=0.3518793366172097
Epoch #108: loss=0.2970668240026994
Epoch #109: loss=0.4220633384856311
Epoch #110: loss=0.3008178553797982
Epoch #111: loss=0.4161331355571747
Epoch #112: loss=0.44189150495962665
Epoch #113: loss=0.317201550711285
Epoch #114: loss=0.4308194003321908
Epoch #115: loss=0.29030498455871234
Epoch #116: loss=0.24509608339179645
Epoch #117: loss=0.2779159044677561
Epoch #118: loss=0.2626819895072417
Epoch #119: loss=0.3371890756216916
Epoch #120: loss=0.29083211855454877
Epoch #121: loss=0.34773649546233093
Epoch #122: loss=0.29179285873066296
Epoch #123: loss=0.2794905332001773
Epoch #124: loss=0.28785842521624133
Epoch #125: loss=0.25041586702520197
Epoch #126: loss=0.26063748652284796
Epoch #127: loss=0.22657412561503323
Epoch #128: loss=0.22762141850861636
Epoch #129: loss=0.2126473608342084
Epoch #130: loss=0.2469500953500921
Epoch #131: loss=0.24590555917132983
Epoch #132: loss=0.18289471079002728
Epoch #133: loss=0.26509362052787433
Epoch #134: loss=0.22833345153115012
Epoch #135: loss=0.27128120444037696
Epoch #136: loss=0.24953557686372238
Epoch #137: loss=0.37824794921008026
Epoch #138: loss=0.2688134570013393
Epoch #139: loss=0.31739839098670264
Epoch #140: loss=0.40415131503885443
Epoch #141: loss=0.22152611477808518
Epoch #142: loss=0.24362392655827783
Epoch #143: loss=0.1903242739764127
Epoch #144: loss=0.4103441739624197
Epoch #145: loss=0.2457847541028803
Epoch #146: loss=0.2190664214166728
Epoch #147: loss=0.2054272104393352
Epoch #148: loss=0.2054587406190959
Epoch #149: loss=0.294562965631485
Epoch #150: loss=0.2074791043996811
Epoch #151: loss=0.23841556364839728
Epoch #152: loss=0.21870663626627487
Epoch #153: loss=0.1636944223533977
Epoch #154: loss=0.19166618991981854
Epoch #155: loss=0.16192435879598965
Epoch #156: loss=0.16541025177998978
Epoch #157: loss=0.17048511383208362
Epoch #158: loss=0.19458930600773205
Epoch #159: loss=0.27075526186011056
Epoch #160: loss=0.17381000451066278
Epoch #161: loss=0.25191043452783063
Epoch #162: loss=0.3869812691753561
Epoch #163: loss=0.3261250704526901
Epoch #164: loss=0.23160434446551584
Epoch #165: loss=0.3147498816251755
Epoch #166: loss=0.17028193243525244
Epoch #167: loss=0.17828041721474042
Epoch #168: loss=0.20850271460684863
Epoch #169: loss=0.20456938174637881
Epoch #170: loss=0.1731710203669288
Epoch #171: loss=0.16742767596786673
Epoch #172: loss=0.23455063727768985
Epoch #173: loss=0.19425415789539163
Epoch #174: loss=0.20297388867898422
Epoch #175: loss=0.15145083313638513
Epoch #176: loss=0.17998178912834686
Epoch #177: loss=0.19004150920293547
Epoch #178: loss=0.17533404447815634
Epoch #179: loss=0.11269878596067429
Epoch #180: loss=0.16756433045322244
Epoch #181: loss=0.13473781672391025
Epoch #182: loss=0.19236311384222723
Epoch #183: loss=0.11920500614426353
Epoch #184: loss=0.1478344974192706
Epoch #185: loss=0.12135911360383034
Epoch #186: loss=0.24718768725341017
Epoch #187: loss=0.14864075725728815
Epoch #188: loss=0.17581942812962967
Epoch #189: loss=0.1263328269124031
Epoch #190: loss=0.17152237756685776
Epoch #191: loss=0.36532963676886127
Epoch #192: loss=0.1163369132713838
Epoch #193: loss=0.2522772550582886
Epoch #194: loss=0.119493440809575
Epoch #195: loss=0.17658246274698863
Epoch #196: loss=0.13135647333481096
Epoch #197: loss=0.12171163409948349
Epoch #198: loss=0.12765629826621575
Epoch #199: loss=0.5056485496461391
Epoch #200: loss=0.22203743660991843
Epoch #201: loss=0.16153823245655408
Epoch #202: loss=0.16204909032041376
Epoch #203: loss=0.13298547369512645
Epoch #204: loss=0.09298800880258734
Epoch #205: loss=0.14931385998021474
Epoch #206: loss=0.13412308354269376
Epoch #207: loss=0.1310680081898516
Epoch #208: loss=0.09992757202549414
Epoch #209: loss=0.11037321795116771
Epoch #210: loss=0.08957607062025504
Epoch #211: loss=0.11275246705521237
Epoch #212: loss=0.13132076507264917
Epoch #213: loss=0.15771119499748404
Epoch #214: loss=0.11821987344460054
Epoch #215: loss=0.15540479529987683
Epoch #216: loss=0.2394453307444399
Epoch #217: loss=0.19816603342240507
Epoch #218: loss=0.1612936874682253
Epoch #219: loss=0.11976895752278241
Epoch #220: loss=0.20603533969684082
Epoch #221: loss=0.1520653556693684
Epoch #222: loss=0.0876834782009775
Epoch #223: loss=0.14478633417324585
Epoch #224: loss=0.18801161375912753
Epoch #225: loss=0.11039857430891557
Epoch #226: loss=0.20461846413937482
Epoch #227: loss=0.15691535344178026
Epoch #228: loss=0.10813873159614476
Epoch #229: loss=0.1411435648121617
Epoch #230: loss=0.10229752720756964
Epoch #231: loss=0.08470082757147876
Epoch #232: loss=0.09434221515601332
Epoch #233: loss=0.08736668899655342
Epoch #234: loss=0.057095170359719886
Epoch #235: loss=0.06694706766442819
Epoch #236: loss=0.10369112359529192
Epoch #237: loss=0.10323117808862166
Epoch #238: loss=0.05474877272817222
Epoch #239: loss=0.08215021545236761
Epoch #240: loss=0.0814858465032144
Epoch #241: loss=0.12293925966051492
Epoch #242: loss=0.060298948802731255
Epoch #243: loss=0.09304479543458331
Epoch #244: loss=0.06150365485386415
Epoch #245: loss=0.08341502398252487
Epoch #246: loss=0.10031111690808427
Epoch #247: loss=0.06808218055150726
Epoch #248: loss=0.055022856389934365
Epoch #249: loss=0.07935378649695353

Training time: 0:03:59.382501

Finished.
n2one setting ETTm2 -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2022/model.pkl', muti_dataset='ETTm2', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.14969e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.12199e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.14969e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5847464161803154, 'MAE': 0.5379079214642425}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2022/model.pkl', muti_dataset='ETTm2', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.09949e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.89695e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.31014890156838537, 'MAE': 0.3953353070207211}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2022/model.pkl', muti_dataset='ETTm2', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.43186e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.67727e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.43186e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5172326219382335, 'MAE': 0.49850754209600023}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2022/model.pkl', muti_dataset='ETTm2', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.44729e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.7824e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.19839848958675624, 'MAE': 0.31639621644415505}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2022/model.pkl', muti_dataset='ETTm2', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.64383e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.23118169055992496, 'MAE': 0.3247721238101371}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2022/model.pkl', muti_dataset='ETTm2', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.45946e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.81746e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.45946e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8159003630448455, 'MAE': 0.4619914372144914}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2022/model.pkl', muti_dataset='ETTm2', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.48781e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.94898e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.48781e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.354809718952109, 'MAE': 0.4210423464176657}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2022/model.pkl', muti_dataset='ETTm2', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.37978e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.60626e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3063657369434312, 'MAE': 0.3831260170795849}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='exchange', random_seed=2022, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/exchange_epochs_250_seed_2022
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=4.97146674990654
Epoch #1: loss=2.6573524326086044
Epoch #2: loss=1.9554360955953598
Epoch #3: loss=1.8288611322641373
Epoch #4: loss=1.7792748361825943
Epoch #5: loss=1.6922289282083511
Epoch #6: loss=1.6511296778917313
Epoch #7: loss=1.5953776091337204
Epoch #8: loss=1.553644984960556
Epoch #9: loss=1.507642924785614
Epoch #10: loss=1.472693219780922
Epoch #11: loss=1.470269337296486
Epoch #12: loss=1.3665851950645447
Epoch #13: loss=1.3984828442335129
Epoch #14: loss=1.340942069888115
Epoch #15: loss=1.3254126608371735
Epoch #16: loss=1.287166178226471
Epoch #17: loss=1.252504974603653
Epoch #18: loss=1.2928961366415024
Epoch #19: loss=1.2720020115375519
Epoch #20: loss=1.2188784033060074
Epoch #21: loss=1.2028509229421616
Epoch #22: loss=1.148029312491417
Epoch #23: loss=1.1913602501153946
Epoch #24: loss=1.1311406195163727
Epoch #25: loss=1.1440424770116806
Epoch #26: loss=1.18425053358078
Epoch #27: loss=1.1972007751464844
Epoch #28: loss=1.009173832833767
Epoch #29: loss=1.0486152693629265
Epoch #30: loss=1.0051622837781906
Epoch #31: loss=0.9811826646327972
Epoch #32: loss=0.9929575994610786
Epoch #33: loss=0.9486619979143143
Epoch #34: loss=1.0230541601777077
Epoch #35: loss=1.0372561514377594
Epoch #36: loss=1.127281814813614
Epoch #37: loss=0.8769669160246849
Epoch #38: loss=0.9682485908269882
Epoch #39: loss=0.8937051594257355
Epoch #40: loss=0.8452053591609001
Epoch #41: loss=0.9231400936841965
Epoch #42: loss=0.8953457176685333
Epoch #43: loss=0.8035788759589195
Epoch #44: loss=0.8596671596169472
Epoch #45: loss=0.799902506172657
Epoch #46: loss=0.7835041508078575
Epoch #47: loss=0.7718805968761444
Epoch #48: loss=0.6926893591880798
Epoch #49: loss=0.701942652463913
Epoch #50: loss=0.6595660671591759
Epoch #51: loss=0.6277474537491798
Epoch #52: loss=0.6888187751173973
Epoch #53: loss=0.5492520108819008
Epoch #54: loss=0.6593908369541168
Epoch #55: loss=0.6068607233464718
Epoch #56: loss=0.618805643171072
Epoch #57: loss=0.7268431186676025
Epoch #58: loss=0.6763618998229504
Epoch #59: loss=0.5140290632843971
Epoch #60: loss=0.6522680632770061
Epoch #61: loss=0.7764845229685307
Epoch #62: loss=0.6051305718719959
Epoch #63: loss=0.4866306111216545
Epoch #64: loss=1.0074606724083424
Epoch #65: loss=0.708371527493
Epoch #66: loss=0.471205897629261
Epoch #67: loss=0.6075959391891956
Epoch #68: loss=0.555643517524004
Epoch #69: loss=0.5196701213717461
Epoch #70: loss=0.4932141341269016
Epoch #71: loss=0.48771013505756855
Epoch #72: loss=0.3922670818865299
Epoch #73: loss=0.5478038191795349
Epoch #74: loss=0.41590234637260437
Epoch #75: loss=0.5854179859161377
Epoch #76: loss=0.40587916038930416
Epoch #77: loss=0.4470605719834566
Epoch #78: loss=0.3812171705067158
Epoch #79: loss=0.5457290802150965
Epoch #80: loss=0.8036381751298904
Epoch #81: loss=0.44720267318189144
Epoch #82: loss=0.41738447174429893
Epoch #83: loss=0.42119625955820084
Epoch #84: loss=0.3322300985455513
Epoch #85: loss=0.27091512829065323
Epoch #86: loss=0.3966254275292158
Epoch #87: loss=0.4157722070813179
Epoch #88: loss=0.3350909426808357
Epoch #89: loss=0.44375486113131046
Epoch #90: loss=0.4984406363219023
Epoch #91: loss=0.41661561094224453
Epoch #92: loss=0.36795400083065033
Epoch #93: loss=0.38669321686029434
Epoch #94: loss=0.29984510131180286
Epoch #95: loss=0.2891217768192291
Epoch #96: loss=0.24034369550645351
Epoch #97: loss=0.3097740076482296
Epoch #98: loss=0.313450425863266
Epoch #99: loss=0.43022844940423965
Epoch #100: loss=0.3758063577115536
Epoch #101: loss=0.35124570690095425
Epoch #102: loss=0.27468380704522133
Epoch #103: loss=0.5859985463321209
Epoch #104: loss=0.28693245351314545
Epoch #105: loss=0.3965791277587414
Epoch #106: loss=0.4463489940389991
Epoch #107: loss=0.46901328302919865
Epoch #108: loss=0.4250915516167879
Epoch #109: loss=0.5143061988055706
Epoch #110: loss=0.2759000360965729
Epoch #111: loss=0.30642382241785526
Epoch #112: loss=0.3430006466805935
Epoch #113: loss=0.4170861952006817
Epoch #114: loss=0.32735042832791805
Epoch #115: loss=0.345727302134037
Epoch #116: loss=0.34228249453008175
Epoch #117: loss=0.23740647546947002
Epoch #118: loss=0.27515518851578236
Epoch #119: loss=0.517524192109704
Epoch #120: loss=0.38793996162712574
Epoch #121: loss=0.35201360285282135
Epoch #122: loss=0.3129496965557337
Epoch #123: loss=0.2662463588640094
Epoch #124: loss=0.2628320995718241
Epoch #125: loss=0.36475956812500954
Epoch #126: loss=0.23209060076624155
Epoch #127: loss=0.2429620362818241
Epoch #128: loss=0.28258538246154785
Epoch #129: loss=0.2325625978410244
Epoch #130: loss=0.3003873713314533
Epoch #131: loss=0.34043731912970543
Epoch #132: loss=0.25315991416573524
Epoch #133: loss=0.5776260811835527
Epoch #134: loss=0.2984553575515747
Epoch #135: loss=0.26043001003563404
Epoch #136: loss=0.25797950103878975
Epoch #137: loss=0.2822320135310292
Epoch #138: loss=0.3242714498192072
Epoch #139: loss=0.2630417235195637
Epoch #140: loss=0.29329781979322433
Epoch #141: loss=0.30393701884895563
Epoch #142: loss=0.2889970811083913
Epoch #143: loss=0.34097907692193985
Epoch #144: loss=0.5024720914661884
Epoch #145: loss=0.23371057026088238
Epoch #146: loss=0.22308150120079517
Epoch #147: loss=0.259326103143394
Epoch #148: loss=0.23379219137132168
Epoch #149: loss=0.21290865633636713
Epoch #150: loss=0.27781426813453436
Epoch #151: loss=0.15328129660338163
Epoch #152: loss=0.19178062118589878
Epoch #153: loss=0.1335670417174697
Epoch #154: loss=0.2702603507786989
Epoch #155: loss=0.29775718320161104
Epoch #156: loss=0.4321965556591749
Epoch #157: loss=0.2055954784154892
Epoch #158: loss=0.24623184092342854
Epoch #159: loss=0.22461649496108294
Epoch #160: loss=0.24874530732631683
Epoch #161: loss=0.23908459953963757
Epoch #162: loss=0.2399450335651636
Epoch #163: loss=0.16994538670405746
Epoch #164: loss=0.2114113075658679
Epoch #165: loss=0.1883935621008277
Epoch #166: loss=0.1897128950804472
Epoch #167: loss=0.23478417843580246
Epoch #168: loss=0.17697882233187556
Epoch #169: loss=0.18295042542740703
Epoch #170: loss=0.19566873740404844
Epoch #171: loss=0.2862854008562863
Epoch #172: loss=0.1784090595319867
Epoch #173: loss=0.2477260995656252
Epoch #174: loss=0.1706896936520934
Epoch #175: loss=0.2573691103607416
Epoch #176: loss=0.18632202968001366
Epoch #177: loss=0.2070347312837839
Epoch #178: loss=0.19510309491306543
Epoch #179: loss=0.17154203727841377
Epoch #180: loss=0.17286425596103072
Epoch #181: loss=0.40179597586393356
Epoch #182: loss=0.33987019769847393
Epoch #183: loss=0.21342859603464603
Epoch #184: loss=0.19014495331794024
Epoch #185: loss=0.23119882494211197
Epoch #186: loss=0.2622883408330381
Epoch #187: loss=0.2611973322927952
Epoch #188: loss=0.12397489324212074
Epoch #189: loss=0.22756613045930862
Epoch #190: loss=0.16091871540993452
Epoch #191: loss=0.2972263116389513
Epoch #192: loss=0.24448306439444423
Epoch #193: loss=0.1923481160774827
Epoch #194: loss=0.18554685451090336
Epoch #195: loss=0.17688273545354605
Epoch #196: loss=0.20628399681299925
Epoch #197: loss=0.19869530107825994
Epoch #198: loss=0.2635647780261934
Epoch #199: loss=0.1610256894491613
Epoch #200: loss=0.2456605606712401
Epoch #201: loss=0.2068397644907236
Epoch #202: loss=0.2129214070737362
Epoch #203: loss=0.22316932678222656
Epoch #204: loss=0.20642248634248972
Epoch #205: loss=0.18831946980208158
Epoch #206: loss=0.18780188169330359
Epoch #207: loss=0.16788568999618292
Epoch #208: loss=0.144486500415951
Epoch #209: loss=0.19183161482214928
Epoch #210: loss=0.11922404495999217
Epoch #211: loss=0.10824187938123941
Epoch #212: loss=0.16134060081094503
Epoch #213: loss=0.1436138590797782
Epoch #214: loss=0.19878740143030882
Epoch #215: loss=0.22999427653849125
Epoch #216: loss=0.23465313110500574
Epoch #217: loss=0.14979530312120914
Epoch #218: loss=0.3588161841034889
Epoch #219: loss=0.21361779049038887
Epoch #220: loss=0.16361057944595814
Epoch #221: loss=0.15908442996442318
Epoch #222: loss=0.17596790194511414
Epoch #223: loss=0.16057967208325863
Epoch #224: loss=0.2617851565591991
Epoch #225: loss=0.10362644726410508
Epoch #226: loss=0.19250678503885865
Epoch #227: loss=0.22208805428817868
Epoch #228: loss=0.20404678210616112
Epoch #229: loss=0.17638280615210533
Epoch #230: loss=0.24756752466782928
Epoch #231: loss=0.15566906752064824
Epoch #232: loss=0.1263546091504395
Epoch #233: loss=0.13855076488107443
Epoch #234: loss=0.2254738872870803
Epoch #235: loss=0.16447177156805992
Epoch #236: loss=0.13535061292350292
Epoch #237: loss=0.1475503770634532
Epoch #238: loss=0.2876604553312063
Epoch #239: loss=0.28509577456861734
Epoch #240: loss=0.24716691579669714
Epoch #241: loss=0.2219030619598925
Epoch #242: loss=0.13849536748602986
Epoch #243: loss=0.19032043404877186
Epoch #244: loss=0.2358539430424571
Epoch #245: loss=0.24291484663262963
Epoch #246: loss=0.1804249994456768
Epoch #247: loss=0.25746587105095387
Epoch #248: loss=0.24435593094676733
Epoch #249: loss=0.1371138822287321

Training time: 0:01:29.803627

Finished.
n2one setting exchange -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2022/model.pkl', muti_dataset='exchange', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.43528e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.89891e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5683769621186319, 'MAE': 0.5295368654748315}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2022/model.pkl', muti_dataset='exchange', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.39945e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.9469e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.26249726115005106, 'MAE': 0.3624739044819675}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2022/model.pkl', muti_dataset='exchange', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=8.71174e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.0586e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.0877e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=8.71174e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.4561844656884722, 'MAE': 0.4631727146915739}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2022/model.pkl', muti_dataset='exchange', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.766e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.069e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.14779e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.17973055973194577, 'MAE': 0.2988470552559562}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2022/model.pkl', muti_dataset='exchange', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.87331e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.75023e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.1398389403990865, 'MAE': 0.261469143470835}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2022/model.pkl', muti_dataset='exchange', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.12382e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.26875e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.57418e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.12382e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8602998103922985, 'MAE': 0.485700508219799}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2022/model.pkl', muti_dataset='exchange', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.94613e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.00877e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.21343e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.94613e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.38128595173308805, 'MAE': 0.4243636335606869}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2022/model.pkl', muti_dataset='exchange', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.00916e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.93147e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.05053e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.505254701122497, 'MAE': 0.5363625556309236}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='traffic', random_seed=2022, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/traffic_epochs_250_seed_2022
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=0.9902509382457025
Epoch #1: loss=0.34638563071630396
Epoch #2: loss=0.24265542674783763
Epoch #3: loss=0.1753714342154303
Epoch #4: loss=0.14054055532695522
Epoch #5: loss=0.11815586132310728
Epoch #6: loss=0.09905510682292853
Epoch #7: loss=0.08889685426309289
Epoch #8: loss=0.0895411727664746
Epoch #9: loss=0.06435092288369784
Epoch #10: loss=0.05700262988703606
Epoch #11: loss=0.054962033968799145
Epoch #12: loss=0.05104282298968055
Epoch #13: loss=0.04937312982705251
Epoch #14: loss=0.049854819556987756
Epoch #15: loss=0.042526153997753655
Epoch #16: loss=0.04013357101561471
Epoch #17: loss=0.033286287392848314
Epoch #18: loss=0.035958540284187206
Epoch #19: loss=0.03383566148167481
Epoch #20: loss=0.033646954439597726
Epoch #21: loss=0.030464184924251382
Epoch #22: loss=0.03234745323141548
Epoch #23: loss=0.03894028053678391
Epoch #24: loss=0.02881567153915992
Epoch #25: loss=0.026759628038148433
Epoch #26: loss=0.029703863555151675
Epoch #27: loss=0.031094175416072983
Epoch #28: loss=0.022850368383085018
Epoch #29: loss=0.028024484698858928
Epoch #30: loss=0.025073512201116414
Epoch #31: loss=0.026500851613455376
Epoch #32: loss=0.019743712560266684
Epoch #33: loss=0.024191295397883873
Epoch #34: loss=0.021498918636235258
Epoch #35: loss=0.02553735690457712
Epoch #36: loss=0.02211514989461365
Epoch #37: loss=0.017616936953180836
Epoch #38: loss=0.020862611040652335
Epoch #39: loss=0.02154894080647784
Epoch #40: loss=0.023569899150780824
Epoch #41: loss=0.019503231405530647
Epoch #42: loss=0.020860792550808274
Epoch #43: loss=0.04973422938136961
Epoch #44: loss=0.019729463790873987
Epoch #45: loss=0.01981053751782058
Epoch #46: loss=0.016635791237737223
Epoch #47: loss=0.02241366065944342
Epoch #48: loss=0.01855245670793943
Epoch #49: loss=0.02320897001515844
Epoch #50: loss=0.018597270164260882
Epoch #51: loss=0.01601957007818542
Epoch #52: loss=0.01777511641824523
Epoch #53: loss=0.02654286352239588
Epoch #54: loss=0.015503085908421105
Epoch #55: loss=0.014740035008693659
Epoch #56: loss=0.017273383853260726
Epoch #57: loss=0.01482777089674513
Epoch #58: loss=0.020690115254921752
Epoch #59: loss=0.016191159720881573
Epoch #60: loss=0.02095423504983544
Epoch #61: loss=0.01565319831629463
Epoch #62: loss=0.016781129600064778
Epoch #63: loss=0.016623090801240872
Epoch #64: loss=0.016453803549201947
Epoch #65: loss=0.018425313195469195
Epoch #66: loss=0.014842252512548872
Epoch #67: loss=0.0168283108065149
Epoch #68: loss=0.01625202184837698
Epoch #69: loss=0.016090126201972848
Epoch #70: loss=0.012616685665646901
Epoch #71: loss=0.023694245927185716
Epoch #72: loss=0.01173115963190027
Epoch #73: loss=0.013240955550251409
Epoch #74: loss=0.018326679934688634
Epoch #75: loss=0.016755439040913915
Epoch #76: loss=0.019340952315079825
Epoch #77: loss=0.020514865467711644
Epoch #78: loss=0.011652469110127923
Epoch #79: loss=0.01691286979521908
Epoch #80: loss=0.01685802231968452
Epoch #81: loss=0.011296395159640087
Epoch #82: loss=0.026171946307821707
Epoch #83: loss=0.01518948382725415
Epoch #84: loss=0.012965995351837413
Epoch #85: loss=0.013270135084531764
Epoch #86: loss=0.01416201772891958
Epoch #87: loss=0.015868807690144624
Epoch #88: loss=0.018617397214349775
Epoch #89: loss=0.015615506855521908
Epoch #90: loss=0.011285994353292514
Epoch #91: loss=0.012323199767867058
Epoch #92: loss=0.014821837228353367
Epoch #93: loss=0.023013021167394166
Epoch #94: loss=0.0132499286419282
Epoch #95: loss=0.012743472178209208
Epoch #96: loss=0.01639351955748146
Epoch #97: loss=0.016129949256594632
Epoch #98: loss=0.016349536644057437
Epoch #99: loss=0.016418303975117232
Epoch #100: loss=0.014476434111003893
Epoch #101: loss=0.010624564718117445
Epoch #102: loss=0.013170931873715585
Epoch #103: loss=0.017572501449195588
Epoch #104: loss=0.011963672059842844
Epoch #105: loss=0.013453667942626864
Epoch #106: loss=0.009793105098314091
Epoch #107: loss=0.010611121177063173
Epoch #108: loss=0.015344316393884899
Epoch #109: loss=0.009398653961541433
Epoch #110: loss=0.014286655360632797
Epoch #111: loss=0.011958790063125236
Epoch #112: loss=0.014663564815209463
Epoch #113: loss=0.01435205920527418
Epoch #114: loss=0.019426913606691694
Epoch #115: loss=0.011368659634653343
Epoch #116: loss=0.013934323821936517
Epoch #117: loss=0.011631253654772812
Epoch #118: loss=0.011907570792676497
Epoch #119: loss=0.011108511295942093
Epoch #120: loss=0.012510512386814134
Epoch #121: loss=0.010775605824358951
Epoch #122: loss=0.012467970592485014
Epoch #123: loss=0.011497690844458416
Epoch #124: loss=0.012170986208244684
Epoch #125: loss=0.014432045723520394
Epoch #126: loss=0.010607198040005686
Epoch #127: loss=0.015472721391594633
Epoch #128: loss=0.014087226292404201
Epoch #129: loss=0.00740390526234921
Epoch #130: loss=0.010634997301880706
Epoch #131: loss=0.011408422677210487
Epoch #132: loss=0.014289351091584437
Epoch #133: loss=0.01032882846721106
Epoch #134: loss=0.009104818637754142
Epoch #135: loss=0.007230678762003629
Epoch #136: loss=0.013351278238427463
Epoch #137: loss=0.013298559692612523
Epoch #138: loss=0.010008582618087396
Epoch #139: loss=0.008543454438183992
Epoch #140: loss=0.01608636573218298
Epoch #141: loss=0.008608917157114251
Epoch #142: loss=0.009603958818594235
Epoch #143: loss=0.011195632835726952
Epoch #144: loss=0.012348927882539969
Epoch #145: loss=0.009839206866710595
Epoch #146: loss=0.012223799041573715
Epoch #147: loss=0.01116377459586438
Epoch #148: loss=0.014653379159367465
Epoch #149: loss=0.011757372960987373
Epoch #150: loss=0.01859375873572877
Epoch #151: loss=0.009074355320133695
Epoch #152: loss=0.009790580978402609
Epoch #153: loss=0.011888893521861513
Epoch #154: loss=0.009015269926175197
Epoch #155: loss=0.0129226080622141
Epoch #156: loss=0.01623281001119196
Epoch #157: loss=0.009113544822409057
Epoch #158: loss=0.009549635415802237
Epoch #159: loss=0.010687448144064521
Epoch #160: loss=0.007908478461783578
Epoch #161: loss=0.012107187368730926
Epoch #162: loss=0.008715712731264385
Epoch #163: loss=0.008048886875338364
Epoch #164: loss=0.01333349754031693
Epoch #165: loss=0.01016020991273193
Epoch #166: loss=0.012743049710855296
Epoch #167: loss=0.008812470543953569
Epoch #168: loss=0.02034343435571551
Epoch #169: loss=0.0211392517287766
Epoch #170: loss=0.012383424171216607
Epoch #171: loss=0.010158255686809248
Epoch #172: loss=0.010688594787530417
Epoch #173: loss=0.011415783238106703
Epoch #174: loss=0.0062512245050718165
Epoch #175: loss=0.014324234068962818
Epoch #176: loss=0.010374735705208075
Epoch #177: loss=0.011012284799346326
Epoch #178: loss=0.010530566979705464
Epoch #179: loss=0.009390865039318276
Epoch #180: loss=0.010133399091505126
Epoch #181: loss=0.009444593291424065
Epoch #182: loss=0.006500389369497759
Epoch #183: loss=0.009554470537897262
Epoch #184: loss=0.012380719531918804
Epoch #185: loss=0.012822669394934991
Epoch #186: loss=0.009251451545263686
Epoch #187: loss=0.009846315618438036
Epoch #188: loss=0.011454109029829277
Epoch #189: loss=0.006180099449161146
Epoch #190: loss=0.012499469254910568
Epoch #191: loss=0.006971201759163361
Epoch #192: loss=0.009553972454503904
Epoch #193: loss=0.01059550561368119
Epoch #194: loss=0.008867609920888397
Epoch #195: loss=0.011010517293116398
Epoch #196: loss=0.010362156379001357
Epoch #197: loss=0.009226776374595265
Epoch #198: loss=0.010067624159840912
Epoch #199: loss=0.008301095849037031
Epoch #200: loss=0.008534687318328939
Epoch #201: loss=0.012588731523011265
Epoch #202: loss=0.00940178745971715
Epoch #203: loss=0.007542854165425051
Epoch #204: loss=0.009876703329599331
Epoch #205: loss=0.008535544763459245
Epoch #206: loss=0.01027735885268611
Epoch #207: loss=0.008257911335182447
Epoch #208: loss=0.015929912639777243
Epoch #209: loss=0.008003429267161797
Epoch #210: loss=0.008687048411002356
Epoch #211: loss=0.007970593760441517
Epoch #212: loss=0.010543756964291
Epoch #213: loss=0.00938841181872653
Epoch #214: loss=0.006237100106604326
Epoch #215: loss=0.008019243598597722
Epoch #216: loss=0.009668355888761084
Epoch #217: loss=0.011979151651057417
Epoch #218: loss=0.007250627672463055
Epoch #219: loss=0.010065527543056327
Epoch #220: loss=0.009173911898105956
Epoch #221: loss=0.008132801177744281
Epoch #222: loss=0.012405087546238258
Epoch #223: loss=0.0075833120903544765
Epoch #224: loss=0.007832302703716487
Epoch #225: loss=0.013590591086591016
Epoch #226: loss=0.006442257403225228
Epoch #227: loss=0.010081442742122434
Epoch #228: loss=0.0051266768832077605
Epoch #229: loss=0.011485672742759743
Epoch #230: loss=0.01174449921599665
Epoch #231: loss=0.011285568387823621
Epoch #232: loss=0.007888475697526218
Epoch #233: loss=0.025710987453248995
Epoch #234: loss=0.00851912155676241
Epoch #235: loss=0.005390690990937458
Epoch #236: loss=0.010695553666892538
Epoch #237: loss=0.007382209393694287
Epoch #238: loss=0.0057918678820603866
Epoch #239: loss=0.012495397378811007
Epoch #240: loss=0.010012821664512665
Epoch #241: loss=0.009314222798818883
Epoch #242: loss=0.008877870232887868
Epoch #243: loss=0.015913890766647315
Epoch #244: loss=0.0072192445830153
Epoch #245: loss=0.006921651467640483
Epoch #246: loss=0.006872688957609278
Epoch #247: loss=0.009955312520295426
Epoch #248: loss=0.010296719034011028
Epoch #249: loss=0.005680424683132282

Training time: 3:20:37.413463

Finished.
n2one setting traffic -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2022/model.pkl', muti_dataset='traffic', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.19908e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.34603e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.19908e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.6381438510162962, 'MAE': 0.5793088715791544}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2022/model.pkl', muti_dataset='traffic', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.16519e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.46073e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3306808583804328, 'MAE': 0.41844243373329953}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2022/model.pkl', muti_dataset='traffic', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.14345e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.30291e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.88063e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.14345e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.595571261285006, 'MAE': 0.5488758964729461}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2022/model.pkl', muti_dataset='traffic', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.04811e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.31534e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.61905e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.21027093118883097, 'MAE': 0.32977043371851045}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2022/model.pkl', muti_dataset='traffic', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.98585e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.98585e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.44030498778199995, 'MAE': 0.4239274501195015}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2022/model.pkl', muti_dataset='traffic', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=7.89402e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.65551e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.3481e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=7.89402e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8394049105998946, 'MAE': 0.47530781454850163}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2022/model.pkl', muti_dataset='traffic', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=8.25679e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.71258e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.18936e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=8.25679e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.39253292824335934, 'MAE': 0.4454329111594877}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2022/model.pkl', muti_dataset='traffic', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.4751e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.88097e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.4751e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.7588987609305521, 'MAE': 0.6616984663858995}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='electricity', random_seed=2022, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/electricity_epochs_250_seed_2022
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=1.629263533795734
Epoch #1: loss=0.6392540670815287
Epoch #2: loss=0.43812259818163246
Epoch #3: loss=0.3213045351973204
Epoch #4: loss=0.2990521010115882
Epoch #5: loss=0.2654273923823024
Epoch #6: loss=0.21327176683138463
Epoch #7: loss=0.20077850228622324
Epoch #8: loss=0.17010957550408312
Epoch #9: loss=0.14911764621084725
Epoch #10: loss=0.15332242330054627
Epoch #11: loss=0.1344176376023768
Epoch #12: loss=0.10882366061024948
Epoch #13: loss=0.11600518947310537
Epoch #14: loss=0.10063584400137822
Epoch #15: loss=0.09890331359829672
Epoch #16: loss=0.07095534379979904
Epoch #17: loss=0.07989825901351985
Epoch #18: loss=0.07296272407277166
Epoch #19: loss=0.06622946756743939
Epoch #20: loss=0.0676205922846575
Epoch #21: loss=0.06285553032131953
Epoch #22: loss=0.04341123670316374
Epoch #23: loss=0.05616324127439955
Epoch #24: loss=0.049638407190281
Epoch #25: loss=0.04701003160275449
Epoch #26: loss=0.059133434092272015
Epoch #27: loss=0.037841571151130945
Epoch #28: loss=0.047825601327630494
Epoch #29: loss=0.033001604062037955
Epoch #30: loss=0.042944886340147516
Epoch #31: loss=0.03727659522019025
Epoch #32: loss=0.036665927655733774
Epoch #33: loss=0.03291735307652956
Epoch #34: loss=0.047564115485530405
Epoch #35: loss=0.03992136516187607
Epoch #36: loss=0.029209491202747014
Epoch #37: loss=0.02786946289656202
Epoch #38: loss=0.03344958810486781
Epoch #39: loss=0.025402988984635406
Epoch #40: loss=0.03425996330917763
Epoch #41: loss=0.028927099406487102
Epoch #42: loss=0.028330205187543856
Epoch #43: loss=0.024765307064142043
Epoch #44: loss=0.037176915407441904
Epoch #45: loss=0.023435807906561225
Epoch #46: loss=0.013829564262251152
Epoch #47: loss=0.034325985101594174
Epoch #48: loss=0.0185617142784151
Epoch #49: loss=0.02439456717060397
Epoch #50: loss=0.026656819890453435
Epoch #51: loss=0.027206898878714376
Epoch #52: loss=0.023842224071521857
Epoch #53: loss=0.020561663774814096
Epoch #54: loss=0.021079149167561134
Epoch #55: loss=0.017947477020535074
Epoch #56: loss=0.025162073153990824
Epoch #57: loss=0.027611977144034225
Epoch #58: loss=0.02353968099158582
Epoch #59: loss=0.023410762555395308
Epoch #60: loss=0.017527851793259337
Epoch #61: loss=0.02377344721440818
Epoch #62: loss=0.019495416636436575
Epoch #63: loss=0.023521085827889913
Epoch #64: loss=0.022296559516372407
Epoch #65: loss=0.01949300029499288
Epoch #66: loss=0.02193512367425527
Epoch #67: loss=0.024480456545821323
Epoch #68: loss=0.028394596921744238
Epoch #69: loss=0.020590901524234692
Epoch #70: loss=0.012384287507608359
Epoch #71: loss=0.018627730077074557
Epoch #72: loss=0.020176054754604895
Epoch #73: loss=0.020606749162304205
Epoch #74: loss=0.014180054804716387
Epoch #75: loss=0.015539954315995757
Epoch #76: loss=0.025814315209142007
Epoch #77: loss=0.014671108270364282
Epoch #78: loss=0.025370453811842497
Epoch #79: loss=0.0339994940863606
Epoch #80: loss=0.015327450308863167
Epoch #81: loss=0.015320562501510496
Epoch #82: loss=0.01624507682014988
Epoch #83: loss=0.011177678438370635
Epoch #84: loss=0.012405754847457847
Epoch #85: loss=0.018343255892860184
Epoch #86: loss=0.014257014101672906
Epoch #87: loss=0.019957991298056
Epoch #88: loss=0.012093416221854726
Epoch #89: loss=0.010809622262894666
Epoch #90: loss=0.014850685969169173
Epoch #91: loss=0.01904919286417366
Epoch #92: loss=0.02893859991075535
Epoch #93: loss=0.016593277322728986
Epoch #94: loss=0.03686403674312876
Epoch #95: loss=0.010629378766187024
Epoch #96: loss=0.011489362189890034
Epoch #97: loss=0.00748104099871524
Epoch #98: loss=0.015134095618496953
Epoch #99: loss=0.018018957610986257
Epoch #100: loss=0.021244375631749933
Epoch #101: loss=0.014078491230312492
Epoch #102: loss=0.010714197479481475
Epoch #103: loss=0.015037293064645912
Epoch #104: loss=0.014056933291961447
Epoch #105: loss=0.015044653070767808
Epoch #106: loss=0.017066025154300998
Epoch #107: loss=0.01792825171629669
Epoch #108: loss=0.015907972276238348
Epoch #109: loss=0.011304811844159776
Epoch #110: loss=0.013173445631101484
Epoch #111: loss=0.023205606441297846
Epoch #112: loss=0.010270249034710391
Epoch #113: loss=0.01978755480322604
Epoch #114: loss=0.008859822253215728
Epoch #115: loss=0.029373028358035486
Epoch #116: loss=0.011509488116241876
Epoch #117: loss=0.011821025052264542
Epoch #118: loss=0.01622026201937423
Epoch #119: loss=0.009358554815416002
Epoch #120: loss=0.013279666287303725
Epoch #121: loss=0.010875551217537362
Epoch #122: loss=0.010574580907239216
Epoch #123: loss=0.009092435280003983
Epoch #124: loss=0.013852793524423295
Epoch #125: loss=0.012003419554148253
Epoch #126: loss=0.009916304633880144
Epoch #127: loss=0.016250542216140754
Epoch #128: loss=0.012560705333908968
Epoch #129: loss=0.014875347580799884
Epoch #130: loss=0.017114785680296393
Epoch #131: loss=0.01883240200461663
Epoch #132: loss=0.0139752640616478
Epoch #133: loss=0.00993723203547769
Epoch #134: loss=0.009533018312860147
Epoch #135: loss=0.015222194361953047
Epoch #136: loss=0.009449805814128753
Epoch #137: loss=0.013402077183435668
Epoch #138: loss=0.011514967538465709
Epoch #139: loss=0.011954769351072841
Epoch #140: loss=0.021570612406075246
Epoch #141: loss=0.01736183342998238
Epoch #142: loss=0.010827981759003447
Epoch #143: loss=0.009974627064253026
Epoch #144: loss=0.010065804508088935
Epoch #145: loss=0.0073100990211232815
Epoch #146: loss=0.010195452194516562
Epoch #147: loss=0.013052278377639413
Epoch #148: loss=0.02079616068021722
Epoch #149: loss=0.016632189771096654
Epoch #150: loss=0.01926448705353748
Epoch #151: loss=0.00989113040351834
Epoch #152: loss=0.011767726126264758
Epoch #153: loss=0.02354527281044556
Epoch #154: loss=0.011886926931278298
Epoch #155: loss=0.011623700361153419
Epoch #156: loss=0.008771623970126164
Epoch #157: loss=0.010470043860935835
Epoch #158: loss=0.00749913441672605
Epoch #159: loss=0.009964111656374139
Epoch #160: loss=0.013932426587473224
Epoch #161: loss=0.007711481055911381
Epoch #162: loss=0.010909321755091036
Epoch #163: loss=0.008459319459198977
Epoch #164: loss=0.017405553060660654
Epoch #165: loss=0.010037867613575592
Epoch #166: loss=0.012680939646587182
Epoch #167: loss=0.009237749051452089
Epoch #168: loss=0.010431718038260136
Epoch #169: loss=0.012093608236778818
Epoch #170: loss=0.014342935960029028
Epoch #171: loss=0.0058483999610386755
Epoch #172: loss=0.01633566190529255
Epoch #173: loss=0.008677625018636177
Epoch #174: loss=0.01026394653145472
Epoch #175: loss=0.01155743727341187
Epoch #176: loss=0.01637257235374946
Epoch #177: loss=0.013177966863472548
Epoch #178: loss=0.00970487947274011
Epoch #179: loss=0.018636747511797162
Epoch #180: loss=0.014924840624821358
Epoch #181: loss=0.01111351085298715
Epoch #182: loss=0.006520597714237358
Epoch #183: loss=0.022659447414595982
Epoch #184: loss=0.0106231515505061
Epoch #185: loss=0.009979233079890189
Epoch #186: loss=0.009597395037734631
Epoch #187: loss=0.0066675557200057065
Epoch #188: loss=0.007530705571012148
Epoch #189: loss=0.05357935644829112
Epoch #190: loss=0.0192502970916779
Epoch #191: loss=0.011701914109180847
Epoch #192: loss=0.014541458564076421
Epoch #193: loss=0.009630388378303838
Epoch #194: loss=0.009989365674207143
Epoch #195: loss=0.009189036800370138
Epoch #196: loss=0.011375871252317876
Epoch #197: loss=0.009409797685061266
Epoch #198: loss=0.007345099897360331
Epoch #199: loss=0.0077208270882930885
Epoch #200: loss=0.005866978368544197
Epoch #201: loss=0.0176485464101254
Epoch #202: loss=0.014789990393330293
Epoch #203: loss=0.009113898463627016
Epoch #204: loss=0.0067093331875233125
Epoch #205: loss=0.005925234963513934
Epoch #206: loss=0.009301013830937503
Epoch #207: loss=0.009802021145148963
Epoch #208: loss=0.009514517906068234
Epoch #209: loss=0.00942096249314643
Epoch #210: loss=0.014411224340084313
Epoch #211: loss=0.007791412344189343
Epoch #212: loss=0.01883012888702126
Epoch #213: loss=0.01326931141769496
Epoch #214: loss=0.01225486622187251
Epoch #215: loss=0.010418163285542837
Epoch #216: loss=0.004615811777055972
Epoch #217: loss=0.011005001765950742
Epoch #218: loss=0.01246466725535917
Epoch #219: loss=0.010497612542308856
Epoch #220: loss=0.013948551451223772
Epoch #221: loss=0.008195195387235793
Epoch #222: loss=0.00875346552908081
Epoch #223: loss=0.008237640016909537
Epoch #224: loss=0.010167614088830396
Epoch #225: loss=0.010752683775510342
Epoch #226: loss=0.01006122562819236
Epoch #227: loss=0.010729465004045088
Epoch #228: loss=0.005846747984464869
Epoch #229: loss=0.01325458435022027
Epoch #230: loss=0.010102876650265236
Epoch #231: loss=0.005632465454311664
Epoch #232: loss=0.008455372617668487
Epoch #233: loss=0.009424393228472812
Epoch #234: loss=0.006114875982039335
Epoch #235: loss=0.00904884431799482
Epoch #236: loss=0.019545910557198145
Epoch #237: loss=0.009202447246685421
Epoch #238: loss=0.009151971353888164
Epoch #239: loss=0.00552159063004877
Epoch #240: loss=0.009170597180237447
Epoch #241: loss=0.007967040674870463
Epoch #242: loss=0.007646419069924859
Epoch #243: loss=0.0078015819764398675
Epoch #244: loss=0.007247327973524317
Epoch #245: loss=0.009261716508801237
Epoch #246: loss=0.005332020556552747
Epoch #247: loss=0.004208549416683487
Epoch #248: loss=0.00779243575019553
Epoch #249: loss=0.0073792755440047235

Training time: 1:26:43.141404

Finished.
n2one setting electricity -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2022/model.pkl', muti_dataset='electricity', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.05065e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.06796e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.98447e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.05065e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.596861888040726, 'MAE': 0.547854870778765}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2022/model.pkl', muti_dataset='electricity', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.01836e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.0407e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.19829e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3302530103828608, 'MAE': 0.4117636508241305}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2022/model.pkl', muti_dataset='electricity', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.42229e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.00707e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.88902e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.42229e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5659987498898259, 'MAE': 0.5244738558815827}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2022/model.pkl', muti_dataset='electricity', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.40008e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.85555e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.6631e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.40008e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.20472333492820718, 'MAE': 0.32555949269840134}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2022/model.pkl', muti_dataset='electricity', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.98361e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.29915139299265786, 'MAE': 0.36662627096356737}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2022/model.pkl', muti_dataset='electricity', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=6.97277e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.43885e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.57047e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=6.97277e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.7907643909981066, 'MAE': 0.45653793458510855}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2022/model.pkl', muti_dataset='electricity', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=7.13843e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.46395e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.70473e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=7.13843e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3733446213581912, 'MAE': 0.43422798429295384}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2022/model.pkl', muti_dataset='electricity', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.24096e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.45891e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.87118e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.45891e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.9952704372690453, 'MAE': 0.7743767162693006}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='weather', random_seed=2022, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/weather_epochs_250_seed_2022
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=16.807687447621273
Epoch #1: loss=6.043915326778706
Epoch #2: loss=3.2665232786765466
Epoch #3: loss=3.0082979385669413
Epoch #4: loss=2.6225882310133715
Epoch #5: loss=2.934204651759221
Epoch #6: loss=3.097774725693923
Epoch #7: loss=2.5755665393976064
Epoch #8: loss=2.3528816608282237
Epoch #9: loss=2.1368739421551046
Epoch #10: loss=1.9571452966103187
Epoch #11: loss=1.9833566683989305
Epoch #12: loss=1.9174493092757006
Epoch #13: loss=1.8331852371876056
Epoch #14: loss=1.7697068269436176
Epoch #15: loss=1.7331817333514874
Epoch #16: loss=1.6376197338104248
Epoch #17: loss=1.5503164254702055
Epoch #18: loss=1.52980198768469
Epoch #19: loss=1.505500683417687
Epoch #20: loss=1.4086996912956238
Epoch #21: loss=1.370675660096682
Epoch #22: loss=1.2825711277815013
Epoch #23: loss=1.2415642211070428
Epoch #24: loss=1.2181134521961212
Epoch #25: loss=1.179603948042943
Epoch #26: loss=1.083721623970912
Epoch #27: loss=1.1479656512920673
Epoch #28: loss=1.0398300725680132
Epoch #29: loss=1.0242810868299925
Epoch #30: loss=0.9786532956820267
Epoch #31: loss=1.0333210092324476
Epoch #32: loss=1.0736292187984173
Epoch #33: loss=1.0203088980454664
Epoch #34: loss=0.8785478174686432
Epoch #35: loss=0.8961190925194666
Epoch #36: loss=0.9416092061079465
Epoch #37: loss=0.8205307309444134
Epoch #38: loss=0.9931813593094165
Epoch #39: loss=0.7840187687140244
Epoch #40: loss=0.775287960584347
Epoch #41: loss=0.8050363178436573
Epoch #42: loss=0.8325572243103614
Epoch #43: loss=0.74536555317732
Epoch #44: loss=0.7114662321714255
Epoch #45: loss=0.6424358980013773
Epoch #46: loss=0.7323775039269373
Epoch #47: loss=0.6885803639888763
Epoch #48: loss=0.7481716091816242
Epoch #49: loss=0.6377276686521677
Epoch #50: loss=0.676048878293771
Epoch #51: loss=0.6524528906895564
Epoch #52: loss=0.6190671106943717
Epoch #53: loss=0.5800980982872156
Epoch #54: loss=0.5451317418080109
Epoch #55: loss=0.6199099891460859
Epoch #56: loss=0.5901034439985569
Epoch #57: loss=0.5576352706322303
Epoch #58: loss=0.586791258591872
Epoch #59: loss=0.5344121616620284
Epoch #60: loss=0.5815262060899001
Epoch #61: loss=0.6826001279629194
Epoch #62: loss=0.5861815282931695
Epoch #63: loss=0.6068528225788703
Epoch #64: loss=0.5498696038356194
Epoch #65: loss=0.5691469357563899
Epoch #66: loss=0.4817674286090411
Epoch #67: loss=0.5217760709615854
Epoch #68: loss=0.6645333881561573
Epoch #69: loss=0.7350773146519294
Epoch #70: loss=0.664832292841031
Epoch #71: loss=0.8398731270661721
Epoch #72: loss=0.6707158925441595
Epoch #73: loss=0.47294650284143597
Epoch #74: loss=0.5042014935841928
Epoch #75: loss=0.4481780127837108
Epoch #76: loss=0.43048478548343366
Epoch #77: loss=0.5864623131660315
Epoch #78: loss=0.4522064316731233
Epoch #79: loss=0.43432724131987643
Epoch #80: loss=0.45530175131100875
Epoch #81: loss=0.4399555182227722
Epoch #82: loss=0.49620021191927105
Epoch #83: loss=0.49251207365439487
Epoch #84: loss=0.48781774021112
Epoch #85: loss=0.4725530113165195
Epoch #86: loss=0.4102945144359882
Epoch #87: loss=0.34741627138394576
Epoch #88: loss=0.39984333171294284
Epoch #89: loss=0.43871032618559325
Epoch #90: loss=0.4233651121075337
Epoch #91: loss=0.4053662493824959
Epoch #92: loss=0.4510924644195117
Epoch #93: loss=0.3568370101543573
Epoch #94: loss=0.3878056464286951
Epoch #95: loss=0.2649658820950068
Epoch #96: loss=0.35728099369085753
Epoch #97: loss=0.38531603148350346
Epoch #98: loss=0.30159956904558033
Epoch #99: loss=0.2728483510705141
Epoch #100: loss=0.29704418549170863
Epoch #101: loss=0.32849692897154736
Epoch #102: loss=0.3136100648687436
Epoch #103: loss=0.3370933383703232
Epoch #104: loss=0.33423769072844434
Epoch #105: loss=0.2708181354861993
Epoch #106: loss=0.24463914506710494
Epoch #107: loss=0.24992592747394854
Epoch #108: loss=0.2988748332628837
Epoch #109: loss=0.37068418986522234
Epoch #110: loss=0.4189380556344986
Epoch #111: loss=0.30486652369682604
Epoch #112: loss=0.26853393476742965
Epoch #113: loss=0.33029625049004185
Epoch #114: loss=0.23832408854594597
Epoch #115: loss=0.2906597950137578
Epoch #116: loss=0.29971470683813095
Epoch #117: loss=0.2444491581274913
Epoch #118: loss=0.2468917014507147
Epoch #119: loss=0.3379789029176419
Epoch #120: loss=0.26863665649524104
Epoch #121: loss=0.2758857688078514
Epoch #122: loss=0.2268339954316616
Epoch #123: loss=0.19233268270125756
Epoch #124: loss=0.22535458436379066
Epoch #125: loss=0.1972153542133478
Epoch #126: loss=0.22117517315424406
Epoch #127: loss=0.1867834094625253
Epoch #128: loss=0.26303653247081316
Epoch #129: loss=0.1997372038089312
Epoch #130: loss=0.22058386326982424
Epoch #131: loss=0.1801218788784284
Epoch #132: loss=0.18104010505171922
Epoch #133: loss=0.24741128402260634
Epoch #134: loss=0.1960806376658953
Epoch #135: loss=0.17786047865565008
Epoch #136: loss=0.1718802432028147
Epoch #137: loss=0.1810448272870137
Epoch #138: loss=0.1736232449228947
Epoch #139: loss=0.1568501563026355
Epoch #140: loss=0.22624230155578026
Epoch #141: loss=0.18909312469454911
Epoch #142: loss=0.16062657936261251
Epoch #143: loss=0.15401516224329287
Epoch #144: loss=0.1985755511201345
Epoch #145: loss=0.1856037533053985
Epoch #146: loss=0.16615850363786405
Epoch #147: loss=0.15735954963243926
Epoch #148: loss=0.15056908159301832
Epoch #149: loss=0.1367298662662506
Epoch #150: loss=0.12382341448504192
Epoch #151: loss=0.12063469279270905
Epoch #152: loss=0.15452612177110636
Epoch #153: loss=0.13576797467584795
Epoch #154: loss=0.16788570296305877
Epoch #155: loss=0.23421497299120977
Epoch #156: loss=0.1752720303260363
Epoch #157: loss=0.15430818985287958
Epoch #158: loss=0.12006295887896648
Epoch #159: loss=0.12322483254739872
Epoch #160: loss=0.2697548777438127
Epoch #161: loss=0.24669330165936396
Epoch #162: loss=0.15739023685455322
Epoch #163: loss=0.1328885592520237
Epoch #164: loss=0.14473342823867613
Epoch #165: loss=0.13441815298910326
Epoch #166: loss=0.15690870669025642
Epoch #167: loss=0.09492728429344985
Epoch #168: loss=0.13371667609764978
Epoch #169: loss=0.11049159401311325
Epoch #170: loss=0.12466621298629504
Epoch #171: loss=0.12142926569168384
Epoch #172: loss=0.09223436320630404
Epoch #173: loss=0.1281598757665891
Epoch #174: loss=0.15134702522594196
Epoch #175: loss=0.24868360290733668
Epoch #176: loss=0.16819832015496033
Epoch #177: loss=0.16904277798648065
Epoch #178: loss=0.09239506649856384
Epoch #179: loss=0.12113212249599971
Epoch #180: loss=0.19831141242041037
Epoch #181: loss=0.16340527024406654
Epoch #182: loss=0.14574891085234973
Epoch #183: loss=0.22153563195696244
Epoch #184: loss=0.386580718967777
Epoch #185: loss=0.45008666584124934
Epoch #186: loss=0.7383634628584752
Epoch #187: loss=0.18340320684588873
Epoch #188: loss=0.2583239780595669
Epoch #189: loss=0.49962570518255234
Epoch #190: loss=0.21464714522545153
Epoch #191: loss=0.16911093045312625
Epoch #192: loss=0.16273403927110708
Epoch #193: loss=0.16597756327917942
Epoch #194: loss=0.3843375051823946
Epoch #195: loss=0.18044135332680666
Epoch #196: loss=0.11712721849863346
Epoch #197: loss=0.1315971568513375
Epoch #198: loss=0.13014676679785436
Epoch #199: loss=0.114148590570459
Epoch #200: loss=0.0939568500392712
Epoch #201: loss=0.10939062315110977
Epoch #202: loss=0.11641375390956035
Epoch #203: loss=0.09021676618319291
Epoch #204: loss=0.07567634440671939
Epoch #205: loss=0.09800063503476289
Epoch #206: loss=0.12813495450581497
Epoch #207: loss=0.08124106105130452
Epoch #208: loss=0.10299699997099546
Epoch #209: loss=0.06819648266984867
Epoch #210: loss=0.06405912404163526
Epoch #211: loss=0.12345771964352864
Epoch #212: loss=0.11620476039556357
Epoch #213: loss=0.10798060134626351
Epoch #214: loss=0.18498451828670043
Epoch #215: loss=0.10514734642436871
Epoch #216: loss=0.10711381254860988
Epoch #217: loss=0.07582638441370083
Epoch #218: loss=0.23754325795632142
Epoch #219: loss=0.11208893401691547
Epoch #220: loss=0.08896954651348866
Epoch #221: loss=0.11237203222341262
Epoch #222: loss=0.27895056241406846
Epoch #223: loss=0.10834135716924301
Epoch #224: loss=0.07834283763972613
Epoch #225: loss=0.05292539556439106
Epoch #226: loss=0.09604267740192321
Epoch #227: loss=0.16022382547649053
Epoch #228: loss=0.09534578354885945
Epoch #229: loss=0.08037019886363012
Epoch #230: loss=0.08556739627741851
Epoch #231: loss=0.07456593158153388
Epoch #232: loss=0.09173929490722142
Epoch #233: loss=0.08861589661011329
Epoch #234: loss=0.0783689311490609
Epoch #235: loss=0.07145457421071254
Epoch #236: loss=0.09812213415996386
Epoch #237: loss=0.06474291963072923
Epoch #238: loss=0.1513005570293619
Epoch #239: loss=0.09289624083500642
Epoch #240: loss=0.15893249127727288
Epoch #241: loss=0.05568618255739029
Epoch #242: loss=0.05097645091322752
Epoch #243: loss=0.07062697152678783
Epoch #244: loss=0.07024594496649045
Epoch #245: loss=0.06832582876086235
Epoch #246: loss=0.05330688527856882
Epoch #247: loss=0.058783811588700004
Epoch #248: loss=0.08328409338943087
Epoch #249: loss=0.053141123364464596

Training time: 0:09:15.366872

Finished.
n2one setting weather -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2022/model.pkl', muti_dataset='weather', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.02561e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.2569e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.2569e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5755362114609017, 'MAE': 0.5317057238585203}
Finished.
------------------------- record done -------------------------
n2one setting weather -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2022/model.pkl', muti_dataset='weather', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.0247e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.85888e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.26551394698177333, 'MAE': 0.3672349830310968}
Finished.
------------------------- record done -------------------------
n2one setting weather -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2022/model.pkl', muti_dataset='weather', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.42216e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.70965e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.42216e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.49431448606112677, 'MAE': 0.4854168593205106}
Finished.
------------------------- record done -------------------------
n2one setting weather -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2022/model.pkl', muti_dataset='weather', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.40356e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.67992e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.40356e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.17937225894546494, 'MAE': 0.29980094793014955}
Finished.
------------------------- record done -------------------------
n2one setting weather -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2022/model.pkl', muti_dataset='weather', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.61855e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.21994777172939406, 'MAE': 0.3224721522757478}
Finished.
------------------------- record done -------------------------
n2one setting weather -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2022/model.pkl', muti_dataset='weather', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.42914e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.81433e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.42914e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.814895434606645, 'MAE': 0.45750386367628887}
Finished.
------------------------- record done -------------------------
n2one setting weather -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2022/model.pkl', muti_dataset='weather', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.4099e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.83284e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.4099e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.39461748289654147, 'MAE': 0.42364349902067433}
Finished.
------------------------- record done -------------------------
n2one setting weather -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2022/model.pkl', muti_dataset='weather', random_seed=2022, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.49565e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.7748e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.49565e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.6991909165190535, 'MAE': 0.6330579120311556}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='ETTh1', random_seed=2023, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/ETTh1_epochs_250_seed_2023
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=6.096199989318848
Epoch #1: loss=3.634674038205828
Epoch #2: loss=2.8470840794699535
Epoch #3: loss=2.4440315110342845
Epoch #4: loss=2.3342394828796387
Epoch #5: loss=2.2197279930114746
Epoch #6: loss=2.0726690462657382
Epoch #7: loss=1.9143849440983363
Epoch #8: loss=1.8682271242141724
Epoch #9: loss=1.7474274465015955
Epoch #10: loss=1.7460879938943046
Epoch #11: loss=1.7776982613972254
Epoch #12: loss=1.6209824766431535
Epoch #13: loss=1.6575110980442591
Epoch #14: loss=1.5605428900037492
Epoch #15: loss=1.4647563866206579
Epoch #16: loss=1.4534948893955775
Epoch #17: loss=1.490979450089591
Epoch #18: loss=1.411103401865278
Epoch #19: loss=1.247890659740993
Epoch #20: loss=1.2847726004464286
Epoch #21: loss=1.2040701253073556
Epoch #22: loss=1.1790011440004622
Epoch #23: loss=1.5005887746810913
Epoch #24: loss=1.2111421482903617
Epoch #25: loss=1.1186576996530806
Epoch #26: loss=1.1662415095738001
Epoch #27: loss=1.168161588055747
Epoch #28: loss=1.051740186555045
Epoch #29: loss=1.0570400527545385
Epoch #30: loss=1.0496838518551417
Epoch #31: loss=0.9975884556770325
Epoch #32: loss=1.0279447776930672
Epoch #33: loss=0.8992887394768851
Epoch #34: loss=0.9308346084186009
Epoch #35: loss=1.0098574927874975
Epoch #36: loss=0.9390600749424526
Epoch #37: loss=0.9353043351854596
Epoch #38: loss=0.8725097605160305
Epoch #39: loss=0.9797911218234471
Epoch #40: loss=0.9366306236812046
Epoch #41: loss=0.9088446072169712
Epoch #42: loss=0.9311090792928424
Epoch #43: loss=0.7339804087366376
Epoch #44: loss=0.7715376019477844
Epoch #45: loss=0.7524176750864301
Epoch #46: loss=0.9636543818882534
Epoch #47: loss=0.8466112102781024
Epoch #48: loss=0.8601522190230233
Epoch #49: loss=0.8294168284961155
Epoch #50: loss=0.8045915450368609
Epoch #51: loss=0.8616501263209752
Epoch #52: loss=0.7759638769286019
Epoch #53: loss=0.7422687326158796
Epoch #54: loss=0.7881870014326913
Epoch #55: loss=0.7611557074955532
Epoch #56: loss=0.6530864068440029
Epoch #57: loss=0.769804699080331
Epoch #58: loss=0.685930711882455
Epoch #59: loss=0.6382082530430385
Epoch #60: loss=0.5670908604349408
Epoch #61: loss=0.6627797186374664
Epoch #62: loss=0.5752936005592346
Epoch #63: loss=0.6416643857955933
Epoch #64: loss=0.5571653970650264
Epoch #65: loss=0.853961957352502
Epoch #66: loss=0.604500412940979
Epoch #67: loss=0.6094459167548588
Epoch #68: loss=0.5103228347642081
Epoch #69: loss=0.6820490658283234
Epoch #70: loss=0.7205821573734283
Epoch #71: loss=0.5734791542802539
Epoch #72: loss=0.6784425973892212
Epoch #73: loss=0.7050299559320722
Epoch #74: loss=0.6174697961126056
Epoch #75: loss=0.6010826655796596
Epoch #76: loss=0.6191346304757255
Epoch #77: loss=0.4838750404970987
Epoch #78: loss=0.49970682178224834
Epoch #79: loss=0.4387871835912977
Epoch #80: loss=0.5767470257622855
Epoch #81: loss=0.5082199956689563
Epoch #82: loss=0.4997011848858425
Epoch #83: loss=0.4781455525330135
Epoch #84: loss=0.4283565069947924
Epoch #85: loss=0.429069527557918
Epoch #86: loss=0.43063378759792875
Epoch #87: loss=0.6176687777042389
Epoch #88: loss=0.49920691762651714
Epoch #89: loss=0.3991949643407549
Epoch #90: loss=0.44547965696879793
Epoch #91: loss=0.5343654496329171
Epoch #92: loss=0.6497661343642643
Epoch #93: loss=0.5242077154772622
Epoch #94: loss=0.7046605433736529
Epoch #95: loss=0.5026024452277592
Epoch #96: loss=0.4427906700542995
Epoch #97: loss=0.3940005770751408
Epoch #98: loss=0.45828722204480854
Epoch #99: loss=0.421206785099847
Epoch #100: loss=0.4245633270059313
Epoch #101: loss=0.39883158462388174
Epoch #102: loss=0.37585030283246723
Epoch #103: loss=0.5132814986365182
Epoch #104: loss=0.582585232598441
Epoch #105: loss=0.4347537415368216
Epoch #106: loss=0.35826848660196575
Epoch #107: loss=0.341660065310342
Epoch #108: loss=0.5304014257022313
Epoch #109: loss=0.4112881315605981
Epoch #110: loss=0.45236043844904217
Epoch #111: loss=0.41138261556625366
Epoch #112: loss=0.4126848110130855
Epoch #113: loss=0.6467810528618949
Epoch #114: loss=0.5445359136377063
Epoch #115: loss=0.5155704617500305
Epoch #116: loss=0.4159741571971348
Epoch #117: loss=0.44181126781872343
Epoch #118: loss=0.4037046560219356
Epoch #119: loss=0.48583937117031645
Epoch #120: loss=0.5380316546985081
Epoch #121: loss=0.45756333640643526
Epoch #122: loss=0.4369567334651947
Epoch #123: loss=0.5051070238862719
Epoch #124: loss=0.38547301292419434
Epoch #125: loss=0.3604391430105482
Epoch #126: loss=0.40417775937489103
Epoch #127: loss=0.4092436943735395
Epoch #128: loss=0.3157245261328561
Epoch #129: loss=0.3299152169908796
Epoch #130: loss=0.5231021131787982
Epoch #131: loss=0.4863247722387314
Epoch #132: loss=0.31561065145901274
Epoch #133: loss=0.3561901705605643
Epoch #134: loss=0.44215923973492216
Epoch #135: loss=0.3449988578047071
Epoch #136: loss=0.4432795430932726
Epoch #137: loss=0.4299193322658539
Epoch #138: loss=0.3092593082359859
Epoch #139: loss=0.3946312218904495
Epoch #140: loss=0.3533445681844439
Epoch #141: loss=0.29843625852039884
Epoch #142: loss=0.3252969724791391
Epoch #143: loss=0.3417773225477764
Epoch #144: loss=0.44511863589286804
Epoch #145: loss=0.45525974886757986
Epoch #146: loss=0.3351959415844509
Epoch #147: loss=0.38892469235828947
Epoch #148: loss=0.33387560290949686
Epoch #149: loss=0.3133780764681952
Epoch #150: loss=0.43134860907282147
Epoch #151: loss=0.2909752832991736
Epoch #152: loss=0.32036193779536654
Epoch #153: loss=0.27127199513571604
Epoch #154: loss=0.295712268778256
Epoch #155: loss=0.30760724416800905
Epoch #156: loss=0.39256040113312857
Epoch #157: loss=0.4862078215394701
Epoch #158: loss=0.35866459778376986
Epoch #159: loss=0.39061032235622406
Epoch #160: loss=0.2988629809447697
Epoch #161: loss=0.44514561550957815
Epoch #162: loss=0.31020950419562204
Epoch #163: loss=0.3235764652490616
Epoch #164: loss=0.2679011289562498
Epoch #165: loss=0.29050403407641817
Epoch #166: loss=0.27901341233934673
Epoch #167: loss=0.31462468206882477
Epoch #168: loss=0.2521553209849766
Epoch #169: loss=0.38197584663118633
Epoch #170: loss=0.3435621793781008
Epoch #171: loss=0.2564549573830196
Epoch #172: loss=0.287364872438567
Epoch #173: loss=0.23060585132666997
Epoch #174: loss=0.3029253546680723
Epoch #175: loss=0.42969469513211933
Epoch #176: loss=0.38035160090242115
Epoch #177: loss=0.3641218053443091
Epoch #178: loss=0.2823805809020996
Epoch #179: loss=0.24459923803806305
Epoch #180: loss=0.3321465083530971
Epoch #181: loss=0.23118128521101816
Epoch #182: loss=0.27702334948948454
Epoch #183: loss=0.25186535928930553
Epoch #184: loss=0.23609098153454916
Epoch #185: loss=0.3727437002318246
Epoch #186: loss=0.501116441828864
Epoch #187: loss=0.30456991493701935
Epoch #188: loss=0.30812008891786846
Epoch #189: loss=0.3130291168178831
Epoch #190: loss=0.2716848488364901
Epoch #191: loss=0.2722929758684976
Epoch #192: loss=0.28794045533452717
Epoch #193: loss=0.252035596540996
Epoch #194: loss=0.38490306053842815
Epoch #195: loss=0.3334575721195766
Epoch #196: loss=0.27571371836321695
Epoch #197: loss=0.3545508895601545
Epoch #198: loss=0.2777255518095834
Epoch #199: loss=0.329330176115036
Epoch #200: loss=0.28431935821260723
Epoch #201: loss=0.3891633855445044
Epoch #202: loss=0.27308647121701923
Epoch #203: loss=0.2996881625482014
Epoch #204: loss=0.30058458021708895
Epoch #205: loss=0.2963760771921703
Epoch #206: loss=0.26906431359904154
Epoch #207: loss=0.29602877157075064
Epoch #208: loss=0.3165439878191267
Epoch #209: loss=0.3483723487172808
Epoch #210: loss=0.37326260123934063
Epoch #211: loss=0.2536654110465731
Epoch #212: loss=0.36424065700599123
Epoch #213: loss=0.43726360372134615
Epoch #214: loss=0.3983043794121061
Epoch #215: loss=0.34763295522757937
Epoch #216: loss=0.29657842431749615
Epoch #217: loss=0.30638064656938824
Epoch #218: loss=0.21777560668332235
Epoch #219: loss=0.20276662494455064
Epoch #220: loss=0.23183321527072362
Epoch #221: loss=0.21538869610854558
Epoch #222: loss=0.24104840627738408
Epoch #223: loss=0.2548547791583197
Epoch #224: loss=0.23230351081916265
Epoch #225: loss=0.2777532551969801
Epoch #226: loss=0.2925039849111012
Epoch #227: loss=0.26589013636112213
Epoch #228: loss=0.22421932433332717
Epoch #229: loss=0.2220378645828792
Epoch #230: loss=0.31065160036087036
Epoch #231: loss=0.23904527510915483
Epoch #232: loss=0.3382369407585689
Epoch #233: loss=0.23333387289728438
Epoch #234: loss=0.26263011566230227
Epoch #235: loss=0.2658081672021321
Epoch #236: loss=0.2240386541400637
Epoch #237: loss=0.25143323625837055
Epoch #238: loss=0.24168800456183298
Epoch #239: loss=0.2490581806216921
Epoch #240: loss=0.24973564914294652
Epoch #241: loss=0.2501447839396341
Epoch #242: loss=0.2988701675619398
Epoch #243: loss=0.23620344485555375
Epoch #244: loss=0.3407075511557715
Epoch #245: loss=0.34090621769428253
Epoch #246: loss=0.2039587731872286
Epoch #247: loss=0.22884459793567657
Epoch #248: loss=0.26272327985082355
Epoch #249: loss=0.21578421124390193

Training time: 0:01:47.255775

Finished.
n2one setting ETTh1 -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2023/model.pkl', muti_dataset='ETTh1', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.8883e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.79665e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5992804740427989, 'MAE': 0.5425499053512477}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2023/model.pkl', muti_dataset='ETTh1', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.88341e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.80606e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.2588109903603291, 'MAE': 0.3619790690754806}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2023/model.pkl', muti_dataset='ETTh1', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.89663e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.88243e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.51462e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.89663e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.48251034042102986, 'MAE': 0.4781251782834209}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2023/model.pkl', muti_dataset='ETTh1', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.86254e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.88861e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.49124e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.86254e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.1766761219463253, 'MAE': 0.2967182090153078}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2023/model.pkl', muti_dataset='ETTh1', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
Evaluation result: {'MSE': 0.1647921602045822, 'MAE': 0.28345077579922334}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2023/model.pkl', muti_dataset='ETTh1', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.27124e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.49907e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.27124e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8166337496179958, 'MAE': 0.46455191327636647}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2023/model.pkl', muti_dataset='ETTh1', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.25138e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.48163e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.86e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.25138e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3645191779245256, 'MAE': 0.42404207390710275}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2023/model.pkl', muti_dataset='ETTh1', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.09101e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.0642e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.06685e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.09101e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.4736540444178079, 'MAE': 0.5030989508173428}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='ETTh2', random_seed=2023, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/ETTh2_epochs_250_seed_2023
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=5.543636798858643
Epoch #1: loss=3.407106672014509
Epoch #2: loss=2.855267354420253
Epoch #3: loss=2.500960418156215
Epoch #4: loss=2.3060341562543596
Epoch #5: loss=2.1923471689224243
Epoch #6: loss=2.0310148000717163
Epoch #7: loss=1.9287370783942086
Epoch #8: loss=1.8498778343200684
Epoch #9: loss=1.6721719673701696
Epoch #10: loss=1.7374152626310075
Epoch #11: loss=1.7156329836164201
Epoch #12: loss=1.587204132761274
Epoch #13: loss=1.6244922876358032
Epoch #14: loss=1.5470733983176095
Epoch #15: loss=1.4604509387697493
Epoch #16: loss=1.456875000681196
Epoch #17: loss=1.4283193009240287
Epoch #18: loss=1.4624416828155518
Epoch #19: loss=1.2787089518138341
Epoch #20: loss=1.3166081053870065
Epoch #21: loss=1.2053614684513636
Epoch #22: loss=1.15207667861666
Epoch #23: loss=1.4964890139443534
Epoch #24: loss=1.2051034484590804
Epoch #25: loss=1.1196826611246382
Epoch #26: loss=1.1769171782902308
Epoch #27: loss=1.1118568607739039
Epoch #28: loss=1.012641659804753
Epoch #29: loss=0.972086523260389
Epoch #30: loss=1.0978461589132036
Epoch #31: loss=1.0357667718614851
Epoch #32: loss=1.0572969572884696
Epoch #33: loss=0.8804113694599697
Epoch #34: loss=0.9145618677139282
Epoch #35: loss=1.0034135494913374
Epoch #36: loss=0.9481496129717145
Epoch #37: loss=0.8961313196590969
Epoch #38: loss=0.8718835115432739
Epoch #39: loss=0.9163941740989685
Epoch #40: loss=0.9092285718236651
Epoch #41: loss=0.8808662976537432
Epoch #42: loss=0.9266639266695295
Epoch #43: loss=0.6891199180058071
Epoch #44: loss=0.7510396667889186
Epoch #45: loss=0.7505980134010315
Epoch #46: loss=0.9872575231960842
Epoch #47: loss=0.7944948247500828
Epoch #48: loss=0.8365354282515389
Epoch #49: loss=0.7703394549233573
Epoch #50: loss=0.7677936383656093
Epoch #51: loss=0.8609138812337603
Epoch #52: loss=0.7904836109706334
Epoch #53: loss=0.7591757774353027
Epoch #54: loss=0.807611346244812
Epoch #55: loss=0.7513607655252729
Epoch #56: loss=0.6086183190345764
Epoch #57: loss=0.7705877678734916
Epoch #58: loss=0.7067337121282306
Epoch #59: loss=0.605095624923706
Epoch #60: loss=0.6086616430963788
Epoch #61: loss=0.6591453935418811
Epoch #62: loss=0.5801795125007629
Epoch #63: loss=0.603288756949561
Epoch #64: loss=0.5443678157670158
Epoch #65: loss=0.837497170482363
Epoch #66: loss=0.5817212249551501
Epoch #67: loss=0.6075010853154319
Epoch #68: loss=0.537420813526426
Epoch #69: loss=0.6681931657450539
Epoch #70: loss=0.6613781111580985
Epoch #71: loss=0.565519494669778
Epoch #72: loss=0.6557265477521079
Epoch #73: loss=0.661443259034838
Epoch #74: loss=0.5971298260348183
Epoch #75: loss=0.6030805579253605
Epoch #76: loss=0.6433477912630353
Epoch #77: loss=0.47747765694345745
Epoch #78: loss=0.532561936548778
Epoch #79: loss=0.45278930238315035
Epoch #80: loss=0.5518335785184588
Epoch #81: loss=0.5044687645775932
Epoch #82: loss=0.43894846524511066
Epoch #83: loss=0.4282065544809614
Epoch #84: loss=0.4461691209248134
Epoch #85: loss=0.42062405177525114
Epoch #86: loss=0.4044071776526315
Epoch #87: loss=0.6690685408455985
Epoch #88: loss=0.4586409160069057
Epoch #89: loss=0.403108332838331
Epoch #90: loss=0.40546954955373493
Epoch #91: loss=0.47529956698417664
Epoch #92: loss=0.6527476225580487
Epoch #93: loss=0.49402961134910583
Epoch #94: loss=0.6557632258960179
Epoch #95: loss=0.48338964581489563
Epoch #96: loss=0.42154807278088163
Epoch #97: loss=0.37440371939114164
Epoch #98: loss=0.4364925069468362
Epoch #99: loss=0.37050948824201313
Epoch #100: loss=0.411398994071143
Epoch #101: loss=0.38805200372423443
Epoch #102: loss=0.3383216517312186
Epoch #103: loss=0.48180937341281344
Epoch #104: loss=0.5305682505880084
Epoch #105: loss=0.39385511193956646
Epoch #106: loss=0.35713175790650503
Epoch #107: loss=0.33385991198675974
Epoch #108: loss=0.5403181484767369
Epoch #109: loss=0.4018719920090267
Epoch #110: loss=0.4341545956475394
Epoch #111: loss=0.3830332543168749
Epoch #112: loss=0.3489046607698713
Epoch #113: loss=0.6667640805244446
Epoch #114: loss=0.5500677951744625
Epoch #115: loss=0.5419993656022208
Epoch #116: loss=0.39498962249074665
Epoch #117: loss=0.4411779046058655
Epoch #118: loss=0.4142892616135733
Epoch #119: loss=0.5245941281318665
Epoch #120: loss=0.5295208437102181
Epoch #121: loss=0.431966632604599
Epoch #122: loss=0.45077854820660185
Epoch #123: loss=0.5484612371240344
Epoch #124: loss=0.4148887310709272
Epoch #125: loss=0.3558000496455601
Epoch #126: loss=0.4033510216644832
Epoch #127: loss=0.46618989961487906
Epoch #128: loss=0.31298493487494333
Epoch #129: loss=0.3499189146927425
Epoch #130: loss=0.5101156532764435
Epoch #131: loss=0.4503625673907144
Epoch #132: loss=0.32140131507601055
Epoch #133: loss=0.38117744454315733
Epoch #134: loss=0.4542081526347569
Epoch #135: loss=0.3763619661331177
Epoch #136: loss=0.4705053525311606
Epoch #137: loss=0.4611699538571494
Epoch #138: loss=0.3145124614238739
Epoch #139: loss=0.3830233407872064
Epoch #140: loss=0.3634054362773895
Epoch #141: loss=0.29452313269887653
Epoch #142: loss=0.30952881063733784
Epoch #143: loss=0.36686137105737415
Epoch #144: loss=0.3750232607126236
Epoch #145: loss=0.4247722008398601
Epoch #146: loss=0.30553629994392395
Epoch #147: loss=0.3577514631407602
Epoch #148: loss=0.313216256243842
Epoch #149: loss=0.2943096650498254
Epoch #150: loss=0.46834339627197813
Epoch #151: loss=0.3211166730948857
Epoch #152: loss=0.32306036353111267
Epoch #153: loss=0.27989316838128225
Epoch #154: loss=0.3083829879760742
Epoch #155: loss=0.3113485702446529
Epoch #156: loss=0.3650967116866793
Epoch #157: loss=0.4886144995689392
Epoch #158: loss=0.3781234749725887
Epoch #159: loss=0.3669332776750837
Epoch #160: loss=0.29190232285431456
Epoch #161: loss=0.37529146671295166
Epoch #162: loss=0.32892424506800516
Epoch #163: loss=0.30754382482596804
Epoch #164: loss=0.24836515103067672
Epoch #165: loss=0.28117452774729046
Epoch #166: loss=0.27747571894100737
Epoch #167: loss=0.3220600868974413
Epoch #168: loss=0.29217318977628437
Epoch #169: loss=0.39494702007089344
Epoch #170: loss=0.2733210474252701
Epoch #171: loss=0.24607977909701212
Epoch #172: loss=0.25239597048078266
Epoch #173: loss=0.21070078015327454
Epoch #174: loss=0.26053978502750397
Epoch #175: loss=0.4261029618127005
Epoch #176: loss=0.34861052674906595
Epoch #177: loss=0.3327923161642892
Epoch #178: loss=0.26497174373694826
Epoch #179: loss=0.23612813438688005
Epoch #180: loss=0.33206277447087423
Epoch #181: loss=0.22580711543560028
Epoch #182: loss=0.31121685462338583
Epoch #183: loss=0.25949724870068686
Epoch #184: loss=0.23630025344235556
Epoch #185: loss=0.3605707138776779
Epoch #186: loss=0.4816771277359554
Epoch #187: loss=0.30360732121126993
Epoch #188: loss=0.3094484635761806
Epoch #189: loss=0.2701205781527928
Epoch #190: loss=0.2490207999944687
Epoch #191: loss=0.2554633149078914
Epoch #192: loss=0.26841260279927937
Epoch #193: loss=0.2533742380993707
Epoch #194: loss=0.35016903068338123
Epoch #195: loss=0.2683135803256716
Epoch #196: loss=0.2463942084993635
Epoch #197: loss=0.2615241301911218
Epoch #198: loss=0.22932573088577815
Epoch #199: loss=0.2554081082344055
Epoch #200: loss=0.29940767160483767
Epoch #201: loss=0.4076451382466725
Epoch #202: loss=0.24264596828392573
Epoch #203: loss=0.3218775199992316
Epoch #204: loss=0.3027408591338566
Epoch #205: loss=0.2441215898309435
Epoch #206: loss=0.24801782412188395
Epoch #207: loss=0.28330189628260477
Epoch #208: loss=0.32024384822164265
Epoch #209: loss=0.33319637179374695
Epoch #210: loss=0.4073905625513622
Epoch #211: loss=0.24598151871136256
Epoch #212: loss=0.4006259058203016
Epoch #213: loss=0.4684505718094962
Epoch #214: loss=0.4967670908996037
Epoch #215: loss=0.4052830295903342
Epoch #216: loss=0.3248210442917688
Epoch #217: loss=0.3072880783251354
Epoch #218: loss=0.22740375782762254
Epoch #219: loss=0.1963370442390442
Epoch #220: loss=0.23856181970664433
Epoch #221: loss=0.2208530306816101
Epoch #222: loss=0.2303537279367447
Epoch #223: loss=0.23202180649553025
Epoch #224: loss=0.20984692658696855
Epoch #225: loss=0.28653509489127565
Epoch #226: loss=0.2928853652306965
Epoch #227: loss=0.23173148930072784
Epoch #228: loss=0.22499120022569383
Epoch #229: loss=0.25076052972248625
Epoch #230: loss=0.29600768429892405
Epoch #231: loss=0.20394888945988246
Epoch #232: loss=0.3282344107116972
Epoch #233: loss=0.23944244640214102
Epoch #234: loss=0.2397190715585436
Epoch #235: loss=0.23872891707079752
Epoch #236: loss=0.18669337034225464
Epoch #237: loss=0.2112067277942385
Epoch #238: loss=0.21658934439931596
Epoch #239: loss=0.24242726181234633
Epoch #240: loss=0.2093760073184967
Epoch #241: loss=0.257935317499297
Epoch #242: loss=0.27465527398245676
Epoch #243: loss=0.24480295181274414
Epoch #244: loss=0.29799576103687286
Epoch #245: loss=0.33342911303043365
Epoch #246: loss=0.21826626786163875
Epoch #247: loss=0.2176610380411148
Epoch #248: loss=0.27304953975336893
Epoch #249: loss=0.21701020428112575

Training time: 0:01:44.681230

Finished.
n2one setting ETTh2 -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2023/model.pkl', muti_dataset='ETTh2', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.74253e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.49139e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.74253e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5977608360849542, 'MAE': 0.5422761542530636}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2023/model.pkl', muti_dataset='ETTh2', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.80116e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.4526e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.2831116728072128, 'MAE': 0.37791582712772853}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2023/model.pkl', muti_dataset='ETTh2', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.26025e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.7975e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.35875e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.26025e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.49839946809833735, 'MAE': 0.4846274618532348}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2023/model.pkl', muti_dataset='ETTh2', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.19081e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.81491e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.36407e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.18223095332507772, 'MAE': 0.3010795702344182}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2023/model.pkl', muti_dataset='ETTh2', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.9353e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.15598040516511436, 'MAE': 0.2842219321262996}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2023/model.pkl', muti_dataset='ETTh2', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.27658e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.51846e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.27658e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8224472335516491, 'MAE': 0.4669013153168168}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2023/model.pkl', muti_dataset='ETTh2', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.23844e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.3305e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.91321e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.23844e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3715888394779072, 'MAE': 0.42949447466839774}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2023/model.pkl', muti_dataset='ETTh2', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.03098e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.93772e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.69099e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.03098e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.4596821788430963, 'MAE': 0.5017318845498576}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='ETTm1', random_seed=2023, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/ETTm1_epochs_250_seed_2023
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=6.4673472534526475
Epoch #1: loss=3.737583420493386
Epoch #2: loss=2.76700496673584
Epoch #3: loss=2.5645154172723945
Epoch #4: loss=2.4488951726393267
Epoch #5: loss=2.2620995478196577
Epoch #6: loss=2.0624196746132593
Epoch #7: loss=1.9566124244169756
Epoch #8: loss=1.8473508466373791
Epoch #9: loss=1.7359346259724011
Epoch #10: loss=1.629947770725597
Epoch #11: loss=1.6241591735319658
Epoch #12: loss=1.5176955353129993
Epoch #13: loss=1.443925846706737
Epoch #14: loss=1.3476239117709072
Epoch #15: loss=1.2599393887953325
Epoch #16: loss=1.2499581900509922
Epoch #17: loss=1.1741153326901523
Epoch #18: loss=1.1902885870500044
Epoch #19: loss=1.1794322403994473
Epoch #20: loss=1.1370586969635703
Epoch #21: loss=1.041558487848802
Epoch #22: loss=1.1463099392977627
Epoch #23: loss=1.0319599942727522
Epoch #24: loss=0.9691703915596008
Epoch #25: loss=1.0372505296360364
Epoch #26: loss=0.9230121374130249
Epoch #27: loss=0.940523852001537
Epoch #28: loss=0.8741818395527926
Epoch #29: loss=1.0846480889753862
Epoch #30: loss=0.9927766973322089
Epoch #31: loss=0.940243964845484
Epoch #32: loss=0.8892636786807667
Epoch #33: loss=0.7953805544159629
Epoch #34: loss=0.7334415858442133
Epoch #35: loss=0.7503584785894915
Epoch #36: loss=0.7865398688749834
Epoch #37: loss=0.7654641270637512
Epoch #38: loss=0.7480362057685852
Epoch #39: loss=0.884688057682731
Epoch #40: loss=0.7532239231196317
Epoch #41: loss=0.7130542397499084
Epoch #42: loss=0.6670204888690602
Epoch #43: loss=0.7187130776318637
Epoch #44: loss=0.8825564547018572
Epoch #45: loss=0.706426967274059
Epoch #46: loss=0.6607384139841254
Epoch #47: loss=0.6751943311908029
Epoch #48: loss=0.721090473911979
Epoch #49: loss=0.639845075932416
Epoch #50: loss=0.6432030498981476
Epoch #51: loss=0.6998286030509255
Epoch #52: loss=0.7616105486046184
Epoch #53: loss=0.7261743491346185
Epoch #54: loss=0.7565598271109841
Epoch #55: loss=0.9139484329657122
Epoch #56: loss=0.5534575879573822
Epoch #57: loss=0.7453464242545041
Epoch #58: loss=0.5588679584589872
Epoch #59: loss=0.5336818180300973
Epoch #60: loss=0.6662537970326163
Epoch #61: loss=0.5912928987633098
Epoch #62: loss=0.5560971796512604
Epoch #63: loss=0.5916724015365947
Epoch #64: loss=0.5354913933710619
Epoch #65: loss=0.5241799869320609
Epoch #66: loss=0.47803168947046454
Epoch #67: loss=0.49596678939732636
Epoch #68: loss=0.5239385718649084
Epoch #69: loss=0.6401476426558061
Epoch #70: loss=0.5548488226803866
Epoch #71: loss=0.4998537545854395
Epoch #72: loss=0.4459014589136297
Epoch #73: loss=0.49310231750661676
Epoch #74: loss=0.5872372172095559
Epoch #75: loss=0.4714515751058405
Epoch #76: loss=0.5315429839220914
Epoch #77: loss=0.47447017377073114
Epoch #78: loss=0.3859703784639185
Epoch #79: loss=0.43337901613929053
Epoch #80: loss=0.41278746182268317
Epoch #81: loss=0.4433557933027094
Epoch #82: loss=0.40026170015335083
Epoch #83: loss=0.5109835239973936
Epoch #84: loss=0.4194367988543077
Epoch #85: loss=0.3739101101051677
Epoch #86: loss=0.3560050536285747
Epoch #87: loss=0.3261750096624548
Epoch #88: loss=0.36013690449974756
Epoch #89: loss=0.5016254213723269
Epoch #90: loss=0.4678080434148962
Epoch #91: loss=0.3623904667117379
Epoch #92: loss=0.3486697159030221
Epoch #93: loss=0.3568949780680917
Epoch #94: loss=0.4004059135913849
Epoch #95: loss=0.36016053232279693
Epoch #96: loss=0.38651940497485077
Epoch #97: loss=0.42749871719967236
Epoch #98: loss=0.3517496748404069
Epoch #99: loss=0.4469397095116702
Epoch #100: loss=0.3246115324172107
Epoch #101: loss=0.3727870989929546
Epoch #102: loss=0.3631449179215865
Epoch #103: loss=0.37644217772917316
Epoch #104: loss=0.3104314844716679
Epoch #105: loss=0.3021463697606867
Epoch #106: loss=0.3816294859756123
Epoch #107: loss=0.2996502044526013
Epoch #108: loss=0.311615603891286
Epoch #109: loss=0.2949741225350987
Epoch #110: loss=0.2513833316889676
Epoch #111: loss=0.2849622951312499
Epoch #112: loss=0.24065701392563907
Epoch #113: loss=0.2119803469289433
Epoch #114: loss=0.35678113861517474
Epoch #115: loss=0.3921597491611134
Epoch #116: loss=0.4245458881963383
Epoch #117: loss=0.26406248049302533
Epoch #118: loss=0.27020876515995373
Epoch #119: loss=0.23263417319817978
Epoch #120: loss=0.5292213098569349
Epoch #121: loss=0.27757488191127777
Epoch #122: loss=0.30430837111039594
Epoch #123: loss=0.268582746386528
Epoch #124: loss=0.2669680254025893
Epoch #125: loss=0.33472650159489026
Epoch #126: loss=0.25484339757399127
Epoch #127: loss=0.2564750015735626
Epoch #128: loss=0.2993081496520476
Epoch #129: loss=0.22554047270254654
Epoch #130: loss=0.24980597604404797
Epoch #131: loss=0.22679257934743707
Epoch #132: loss=0.38286843557249417
Epoch #133: loss=0.2110857150771401
Epoch #134: loss=0.1650518781759522
Epoch #135: loss=0.18059195239435544
Epoch #136: loss=0.18079651485789905
Epoch #137: loss=0.24144102971662174
Epoch #138: loss=0.25641526552763855
Epoch #139: loss=0.1884013902057301
Epoch #140: loss=0.3422054187818007
Epoch #141: loss=0.19595258208838376
Epoch #142: loss=0.19228973984718323
Epoch #143: loss=0.2954678792845119
Epoch #144: loss=0.20180407166481018
Epoch #145: loss=0.1912465813485059
Epoch #146: loss=0.20657587119124152
Epoch #147: loss=0.1710213456641544
Epoch #148: loss=0.14891119978644632
Epoch #149: loss=0.28005665608427743
Epoch #150: loss=0.25621073828502133
Epoch #151: loss=0.22600909932093186
Epoch #152: loss=0.24601759016513824
Epoch #153: loss=0.2601489228281108
Epoch #154: loss=0.14416844736446033
Epoch #155: loss=0.19250182130120017
Epoch #156: loss=0.11305824328552593
Epoch #157: loss=0.2877058359709653
Epoch #158: loss=0.19538216631520877
Epoch #159: loss=0.15124795856800946
Epoch #160: loss=0.13908298110420053
Epoch #161: loss=0.13960311697287994
Epoch #162: loss=0.15423099154775793
Epoch #163: loss=0.17466999793594534
Epoch #164: loss=0.2725639749657024
Epoch #165: loss=0.243345822122964
Epoch #166: loss=0.22848654131997714
Epoch #167: loss=0.1494542048736052
Epoch #168: loss=0.22611049630425192
Epoch #169: loss=0.15214875475926834
Epoch #170: loss=0.10294997827573256
Epoch #171: loss=0.10971940342675555
Epoch #172: loss=0.1031680012291128
Epoch #173: loss=0.12655675106427886
Epoch #174: loss=0.10345277393406088
Epoch #175: loss=0.18805840001864868
Epoch #176: loss=0.15131534161892804
Epoch #177: loss=0.1246713362634182
Epoch #178: loss=0.1745437400584871
Epoch #179: loss=0.1306782253086567
Epoch #180: loss=0.11065646328709343
Epoch #181: loss=0.13667857071215456
Epoch #182: loss=0.23683925514871423
Epoch #183: loss=0.129712390628728
Epoch #184: loss=0.11326600137082013
Epoch #185: loss=0.11104546792127869
Epoch #186: loss=0.07680288397453049
Epoch #187: loss=0.07424451478502968
Epoch #188: loss=0.10076923736117104
Epoch #189: loss=0.07892366532575
Epoch #190: loss=0.09891834211620418
Epoch #191: loss=0.06973518024791371
Epoch #192: loss=0.08741051466627554
Epoch #193: loss=0.08509806475856087
Epoch #194: loss=0.10781547494909981
Epoch #195: loss=0.10931921411644328
Epoch #196: loss=0.14872304688800464
Epoch #197: loss=0.1839772117408839
Epoch #198: loss=0.3391146463426677
Epoch #199: loss=0.197769049893726
Epoch #200: loss=0.09417906335809013
Epoch #201: loss=0.08729506758126346
Epoch #202: loss=0.0837109728970311
Epoch #203: loss=0.14348488233306192
Epoch #204: loss=0.10878497903997247
Epoch #205: loss=0.08258720284158533
Epoch #206: loss=0.13279738869856705
Epoch #207: loss=0.23787846890362827
Epoch #208: loss=0.25314043868671765
Epoch #209: loss=0.13249236751686444
Epoch #210: loss=0.10466169193387032
Epoch #211: loss=0.0663925778459419
Epoch #212: loss=0.09380218251184984
Epoch #213: loss=0.11924926293167201
Epoch #214: loss=0.12783902781930837
Epoch #215: loss=0.09627523815090006
Epoch #216: loss=0.1025038713758642
Epoch #217: loss=0.10816825689239935
Epoch #218: loss=0.15828760814937679
Epoch #219: loss=0.2036655226891691
Epoch #220: loss=0.13212151215835052
Epoch #221: loss=0.07679328898137266
Epoch #222: loss=0.07402796230532906
Epoch #223: loss=0.0890664119612087
Epoch #224: loss=0.060774004086852074
Epoch #225: loss=0.09942178563638167
Epoch #226: loss=0.09658130410720002
Epoch #227: loss=0.1337516304444183
Epoch #228: loss=0.13077658110044219
Epoch #229: loss=0.12147835608233105
Epoch #230: loss=0.09221863170916383
Epoch #231: loss=0.06957691349089146
Epoch #232: loss=0.07360502061518756
Epoch #233: loss=0.061517648229544815
Epoch #234: loss=0.0793266599489884
Epoch #235: loss=0.06869145516644824
Epoch #236: loss=0.0909850915724581
Epoch #237: loss=0.08722961389205673
Epoch #238: loss=0.12141967158425938
Epoch #239: loss=0.12185967578129335
Epoch #240: loss=0.15739586746150797
Epoch #241: loss=0.1334159147333015
Epoch #242: loss=0.10470041700384834
Epoch #243: loss=0.1194561245766553
Epoch #244: loss=0.08412212844599377
Epoch #245: loss=0.11406930231235245
Epoch #246: loss=0.06697090952233835
Epoch #247: loss=0.1222334670072252
Epoch #248: loss=0.07430379668420012
Epoch #249: loss=0.13651315867900848

Training time: 0:04:01.604352

Finished.
n2one setting ETTm1 -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2023/model.pkl', muti_dataset='ETTm1', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.91653e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.78873e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5883034628574897, 'MAE': 0.5356611337327601}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2023/model.pkl', muti_dataset='ETTm1', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.9583e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.86175e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.26653699100522854, 'MAE': 0.3671406896543791}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2023/model.pkl', muti_dataset='ETTm1', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.56193e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.75306e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.56193e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.48218326730282324, 'MAE': 0.4799441580217069}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2023/model.pkl', muti_dataset='ETTm1', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.57049e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.75684e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.1786216025984724, 'MAE': 0.29795951215187094}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2023/model.pkl', muti_dataset='ETTm1', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.89381e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.20066617472947662, 'MAE': 0.3102175539052589}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2023/model.pkl', muti_dataset='ETTm1', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.43945e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.82169e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.43945e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8136520998109956, 'MAE': 0.45679777626721}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2023/model.pkl', muti_dataset='ETTm1', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.3839e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.74106e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.3839e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.35434585377423666, 'MAE': 0.418056668918402}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2023/model.pkl', muti_dataset='ETTm1', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.38881e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.55209e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.55209e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5917061012450249, 'MAE': 0.5947915722560978}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='ETTm2', random_seed=2023, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/ETTm2_epochs_250_seed_2023
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=7.811103343963623
Epoch #1: loss=3.857215491208163
Epoch #2: loss=2.887565482746471
Epoch #3: loss=2.7012836933135986
Epoch #4: loss=2.5656263611533423
Epoch #5: loss=2.3807059851559726
Epoch #6: loss=2.1884307861328125
Epoch #7: loss=2.1010631647976963
Epoch #8: loss=1.9965673034841365
Epoch #9: loss=1.9129474704915828
Epoch #10: loss=1.7961573709141125
Epoch #11: loss=1.7652313384142788
Epoch #12: loss=1.6552739468487827
Epoch #13: loss=1.61118454282934
Epoch #14: loss=1.4922318892045454
Epoch #15: loss=1.3787939223376187
Epoch #16: loss=1.3730234991420398
Epoch #17: loss=1.2798269445245916
Epoch #18: loss=1.322944164276123
Epoch #19: loss=1.2875713218342175
Epoch #20: loss=1.2303708358244463
Epoch #21: loss=1.129529064351862
Epoch #22: loss=1.247231900691986
Epoch #23: loss=1.087215076793324
Epoch #24: loss=1.0477761463685469
Epoch #25: loss=1.1323034438219937
Epoch #26: loss=1.0318504030054265
Epoch #27: loss=1.0102933699434453
Epoch #28: loss=0.9756263223561373
Epoch #29: loss=1.1565891016613354
Epoch #30: loss=1.0796669017184863
Epoch #31: loss=1.0436299659989097
Epoch #32: loss=0.9848227446729486
Epoch #33: loss=0.8619057211008939
Epoch #34: loss=0.8223744630813599
Epoch #35: loss=0.8302713686769659
Epoch #36: loss=0.84030512788079
Epoch #37: loss=0.8119418837807395
Epoch #38: loss=0.778653540394523
Epoch #39: loss=0.9230110374363986
Epoch #40: loss=0.792961906303059
Epoch #41: loss=0.7619128335605968
Epoch #42: loss=0.7054730924693021
Epoch #43: loss=0.7764266350052573
Epoch #44: loss=0.9026239351792769
Epoch #45: loss=0.7483581575480375
Epoch #46: loss=0.6968129223043268
Epoch #47: loss=0.7146782170642506
Epoch #48: loss=0.7449579726565968
Epoch #49: loss=0.6659679467027838
Epoch #50: loss=0.6599985361099243
Epoch #51: loss=0.7454219677231528
Epoch #52: loss=0.8476486151868646
Epoch #53: loss=0.7662778659300371
Epoch #54: loss=0.8009741089560769
Epoch #55: loss=0.9230909293348138
Epoch #56: loss=0.6161437441002239
Epoch #57: loss=0.7971202324737202
Epoch #58: loss=0.5803826451301575
Epoch #59: loss=0.5678934454917908
Epoch #60: loss=0.6782624504782937
Epoch #61: loss=0.6048116873611104
Epoch #62: loss=0.5759988914836537
Epoch #63: loss=0.6256273795257915
Epoch #64: loss=0.5683023848316886
Epoch #65: loss=0.5646281052719463
Epoch #66: loss=0.4929089844226837
Epoch #67: loss=0.5380202856930819
Epoch #68: loss=0.5395024825226177
Epoch #69: loss=0.7274430123242465
Epoch #70: loss=0.6292580609971826
Epoch #71: loss=0.5682490955699574
Epoch #72: loss=0.49814102053642273
Epoch #73: loss=0.543368399143219
Epoch #74: loss=0.6419158361174844
Epoch #75: loss=0.501354380087419
Epoch #76: loss=0.5578084154562517
Epoch #77: loss=0.5167625004594977
Epoch #78: loss=0.4202514724297957
Epoch #79: loss=0.4742820669304241
Epoch #80: loss=0.4583263397216797
Epoch #81: loss=0.4869747216051275
Epoch #82: loss=0.44707593050870026
Epoch #83: loss=0.5362346524542029
Epoch #84: loss=0.47312973846088757
Epoch #85: loss=0.41680700941519305
Epoch #86: loss=0.39551846005699853
Epoch #87: loss=0.3543929728594693
Epoch #88: loss=0.3985870968211781
Epoch #89: loss=0.5151488618417219
Epoch #90: loss=0.48484444889155304
Epoch #91: loss=0.371861148964275
Epoch #92: loss=0.3956599669022994
Epoch #93: loss=0.41917549209161237
Epoch #94: loss=0.4531821445985274
Epoch #95: loss=0.4374630559574474
Epoch #96: loss=0.4375290139154954
Epoch #97: loss=0.49014198780059814
Epoch #98: loss=0.406081730669195
Epoch #99: loss=0.48018414053049957
Epoch #100: loss=0.34581140225583856
Epoch #101: loss=0.38644480163400824
Epoch #102: loss=0.36556948856873944
Epoch #103: loss=0.4173355725678531
Epoch #104: loss=0.34905711629173974
Epoch #105: loss=0.3148713856935501
Epoch #106: loss=0.36805004423314874
Epoch #107: loss=0.2831711999394677
Epoch #108: loss=0.3146997080607848
Epoch #109: loss=0.3124532388015227
Epoch #110: loss=0.28719569607214496
Epoch #111: loss=0.30466497350822797
Epoch #112: loss=0.25594589656049554
Epoch #113: loss=0.2613577504049648
Epoch #114: loss=0.397840598767454
Epoch #115: loss=0.4254244024103338
Epoch #116: loss=0.46571735360405664
Epoch #117: loss=0.31328522346236487
Epoch #118: loss=0.3009854839606719
Epoch #119: loss=0.27509220757267694
Epoch #120: loss=0.5124082253737883
Epoch #121: loss=0.37101533873514697
Epoch #122: loss=0.3533655093474822
Epoch #123: loss=0.3092745298689062
Epoch #124: loss=0.33236739987676794
Epoch #125: loss=0.3949756066907536
Epoch #126: loss=0.31592040034857666
Epoch #127: loss=0.2969271649013866
Epoch #128: loss=0.32544815133918414
Epoch #129: loss=0.27028502794829284
Epoch #130: loss=0.2683130976828662
Epoch #131: loss=0.2629877559163354
Epoch #132: loss=0.4914811226454648
Epoch #133: loss=0.23940735784443942
Epoch #134: loss=0.19879678569056772
Epoch #135: loss=0.21397398005832324
Epoch #136: loss=0.2139518843455748
Epoch #137: loss=0.28255321898243646
Epoch #138: loss=0.2935398275201971
Epoch #139: loss=0.2015674595128406
Epoch #140: loss=0.35404418070207944
Epoch #141: loss=0.2194069434296001
Epoch #142: loss=0.3609559346329082
Epoch #143: loss=0.3900793425061486
Epoch #144: loss=0.29219622774557635
Epoch #145: loss=0.26736376908692444
Epoch #146: loss=0.2458205751397393
Epoch #147: loss=0.2154350538145412
Epoch #148: loss=0.19409526816823267
Epoch #149: loss=0.3024595799771222
Epoch #150: loss=0.2414801215583628
Epoch #151: loss=0.21226520159027792
Epoch #152: loss=0.21865928714925592
Epoch #153: loss=0.2839919240637259
Epoch #154: loss=0.1715643426234072
Epoch #155: loss=0.20464458113366907
Epoch #156: loss=0.1287791742519899
Epoch #157: loss=0.32663261754946277
Epoch #158: loss=0.2522271058776162
Epoch #159: loss=0.18537679246880792
Epoch #160: loss=0.20733999460935593
Epoch #161: loss=0.17265408011999997
Epoch #162: loss=0.1941360289400274
Epoch #163: loss=0.1947271688417955
Epoch #164: loss=0.2723524766889485
Epoch #165: loss=0.20106122100895102
Epoch #166: loss=0.22965635765682568
Epoch #167: loss=0.16142731498588214
Epoch #168: loss=0.24362337250601163
Epoch #169: loss=0.1628004854375666
Epoch #170: loss=0.13384238088672812
Epoch #171: loss=0.11536517197435553
Epoch #172: loss=0.11651921306144107
Epoch #173: loss=0.12236497212540019
Epoch #174: loss=0.126342427324165
Epoch #175: loss=0.2196571867574345
Epoch #176: loss=0.1698683493516662
Epoch #177: loss=0.13141502439975739
Epoch #178: loss=0.20005623318932272
Epoch #179: loss=0.1369775418530811
Epoch #180: loss=0.11152328449216756
Epoch #181: loss=0.16849227249622345
Epoch #182: loss=0.28600022061304614
Epoch #183: loss=0.14089199765162033
Epoch #184: loss=0.12496173212474043
Epoch #185: loss=0.09957453777844255
Epoch #186: loss=0.08356332270936533
Epoch #187: loss=0.0968817723068324
Epoch #188: loss=0.1094485152174126
Epoch #189: loss=0.07962071658535437
Epoch #190: loss=0.09501738676970656
Epoch #191: loss=0.08276212520220062
Epoch #192: loss=0.09429565207524733
Epoch #193: loss=0.10272264514457095
Epoch #194: loss=0.10678383470936255
Epoch #195: loss=0.10710167850960385
Epoch #196: loss=0.13790852000767534
Epoch #197: loss=0.15024065429514105
Epoch #198: loss=0.3257172368466854
Epoch #199: loss=0.181263729929924
Epoch #200: loss=0.11764674972404134
Epoch #201: loss=0.10919970985163342
Epoch #202: loss=0.11305385624820535
Epoch #203: loss=0.16575432534922252
Epoch #204: loss=0.12980815700509332
Epoch #205: loss=0.1038640673187646
Epoch #206: loss=0.1651631769808856
Epoch #207: loss=0.246991481970657
Epoch #208: loss=0.2248560522090305
Epoch #209: loss=0.14141210439530286
Epoch #210: loss=0.10564412684603171
Epoch #211: loss=0.0683157393200831
Epoch #212: loss=0.09280766546726227
Epoch #213: loss=0.1031519394706596
Epoch #214: loss=0.10199072076515718
Epoch #215: loss=0.07716949622739445
Epoch #216: loss=0.08393537337807092
Epoch #217: loss=0.09488325159658086
Epoch #218: loss=0.16010690649802034
Epoch #219: loss=0.20941037515347655
Epoch #220: loss=0.1534166159954938
Epoch #221: loss=0.08673918416554277
Epoch #222: loss=0.10868289965120229
Epoch #223: loss=0.11217644234949892
Epoch #224: loss=0.06985034251754935
Epoch #225: loss=0.10769594562324611
Epoch #226: loss=0.10869509151036089
Epoch #227: loss=0.13052960654551332
Epoch #228: loss=0.17704578759995374
Epoch #229: loss=0.14818010851740837
Epoch #230: loss=0.11946275152943352
Epoch #231: loss=0.09438361904837868
Epoch #232: loss=0.08761059560559013
Epoch #233: loss=0.07578143917701462
Epoch #234: loss=0.09111795032566244
Epoch #235: loss=0.0734769685024565
Epoch #236: loss=0.09945590116760948
Epoch #237: loss=0.10807326334443959
Epoch #238: loss=0.13337051089514385
Epoch #239: loss=0.14510358836163173
Epoch #240: loss=0.17019431801004845
Epoch #241: loss=0.1302186775613915
Epoch #242: loss=0.08277944475412369
Epoch #243: loss=0.10144771601666104
Epoch #244: loss=0.10078888589685614
Epoch #245: loss=0.11519262093034657
Epoch #246: loss=0.06368240883404558
Epoch #247: loss=0.11929254233837128
Epoch #248: loss=0.08517248115756294
Epoch #249: loss=0.19430742582136934

Training time: 0:03:59.999913

Finished.
n2one setting ETTm2 -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2023/model.pkl', muti_dataset='ETTm2', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.19894e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.28158e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.19894e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5954262013500742, 'MAE': 0.5414797136877261}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2023/model.pkl', muti_dataset='ETTm2', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.09164e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.37251e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.30044914081307783, 'MAE': 0.3880467095788508}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2023/model.pkl', muti_dataset='ETTm2', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.36164e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.57399e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.84401e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.36164e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5137358658293598, 'MAE': 0.49798149561852073}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2023/model.pkl', muti_dataset='ETTm2', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.36441e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.55939e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.19689034409769018, 'MAE': 0.3154220995570263}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2023/model.pkl', muti_dataset='ETTm2', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.53808e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.19005455248775951, 'MAE': 0.30445809156751613}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2023/model.pkl', muti_dataset='ETTm2', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.55716e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.0955e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.55716e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8179961771333247, 'MAE': 0.46124268915853656}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2023/model.pkl', muti_dataset='ETTm2', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.61673e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.11337e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.61673e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.376022516537578, 'MAE': 0.42733128524300384}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2023/model.pkl', muti_dataset='ETTm2', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.14429e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.21593e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.31947e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.14429e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.40020575486793875, 'MAE': 0.46632233426911673}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='exchange', random_seed=2023, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/exchange_epochs_250_seed_2023
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=3.9551292657852173
Epoch #1: loss=2.2943741530179977
Epoch #2: loss=2.0396082550287247
Epoch #3: loss=1.8436211496591568
Epoch #4: loss=1.6573166400194168
Epoch #5: loss=1.7496251910924911
Epoch #6: loss=1.6368746012449265
Epoch #7: loss=1.5851471275091171
Epoch #8: loss=1.5955010056495667
Epoch #9: loss=1.5152789950370789
Epoch #10: loss=1.488388791680336
Epoch #11: loss=1.4858732372522354
Epoch #12: loss=1.3245937079191208
Epoch #13: loss=1.4126148521900177
Epoch #14: loss=1.3399639874696732
Epoch #15: loss=1.2643855959177017
Epoch #16: loss=1.287991687655449
Epoch #17: loss=1.2981574982404709
Epoch #18: loss=1.238091692328453
Epoch #19: loss=1.2471065372228622
Epoch #20: loss=1.1263088136911392
Epoch #21: loss=1.1642169654369354
Epoch #22: loss=1.1920196413993835
Epoch #23: loss=1.1470638439059258
Epoch #24: loss=1.073537565767765
Epoch #25: loss=1.0194262862205505
Epoch #26: loss=1.0020292103290558
Epoch #27: loss=1.0592015385627747
Epoch #28: loss=1.0005237683653831
Epoch #29: loss=0.9294862076640129
Epoch #30: loss=0.855590708553791
Epoch #31: loss=0.8985945582389832
Epoch #32: loss=0.9404187873005867
Epoch #33: loss=0.825157605111599
Epoch #34: loss=0.8785693794488907
Epoch #35: loss=0.883084125816822
Epoch #36: loss=0.9963899999856949
Epoch #37: loss=0.8854356035590172
Epoch #38: loss=0.7869487553834915
Epoch #39: loss=0.8039829730987549
Epoch #40: loss=0.7486534938216209
Epoch #41: loss=0.9216042831540108
Epoch #42: loss=0.7442553490400314
Epoch #43: loss=0.7104333266615868
Epoch #44: loss=0.7732996568083763
Epoch #45: loss=0.6199473068118095
Epoch #46: loss=0.8288637436926365
Epoch #47: loss=0.7231003455817699
Epoch #48: loss=0.7544346563518047
Epoch #49: loss=0.612268440425396
Epoch #50: loss=0.6058742962777615
Epoch #51: loss=0.6175083555281162
Epoch #52: loss=0.6527977772057056
Epoch #53: loss=0.6322823911905289
Epoch #54: loss=0.7088946141302586
Epoch #55: loss=0.5351421386003494
Epoch #56: loss=0.5513259135186672
Epoch #57: loss=0.515971589833498
Epoch #58: loss=0.44531811214983463
Epoch #59: loss=0.7456636354327202
Epoch #60: loss=0.5796940550208092
Epoch #61: loss=0.45528044924139977
Epoch #62: loss=0.46046166121959686
Epoch #63: loss=0.5177988447248936
Epoch #64: loss=0.48879870027303696
Epoch #65: loss=0.4750664569437504
Epoch #66: loss=0.4769778288900852
Epoch #67: loss=0.5117271803319454
Epoch #68: loss=0.4376973807811737
Epoch #69: loss=0.5087867118418217
Epoch #70: loss=0.5229183249175549
Epoch #71: loss=0.665826816111803
Epoch #72: loss=0.5785672292113304
Epoch #73: loss=0.5094665102660656
Epoch #74: loss=0.3746521845459938
Epoch #75: loss=0.3633833937346935
Epoch #76: loss=0.33933379873633385
Epoch #77: loss=0.46109646186232567
Epoch #78: loss=0.4341942574828863
Epoch #79: loss=0.3049671705812216
Epoch #80: loss=0.3775980267673731
Epoch #81: loss=0.357997789978981
Epoch #82: loss=0.2872043941169977
Epoch #83: loss=0.3158509861677885
Epoch #84: loss=0.3544213641434908
Epoch #85: loss=0.42998334765434265
Epoch #86: loss=0.486755614168942
Epoch #87: loss=0.4671801030635834
Epoch #88: loss=0.3499997351318598
Epoch #89: loss=0.34711894392967224
Epoch #90: loss=0.39732219092547894
Epoch #91: loss=0.2696831915527582
Epoch #92: loss=0.2973728384822607
Epoch #93: loss=0.28796022944152355
Epoch #94: loss=0.29605758003890514
Epoch #95: loss=0.3615170679986477
Epoch #96: loss=0.4118042178452015
Epoch #97: loss=0.35011061280965805
Epoch #98: loss=0.40087757259607315
Epoch #99: loss=0.3250265587121248
Epoch #100: loss=0.3132536578923464
Epoch #101: loss=0.25984509103000164
Epoch #102: loss=0.33488008193671703
Epoch #103: loss=0.26154077518731356
Epoch #104: loss=0.3206986766308546
Epoch #105: loss=0.30874795466661453
Epoch #106: loss=0.5057596042752266
Epoch #107: loss=0.25651705637574196
Epoch #108: loss=0.36027975007891655
Epoch #109: loss=0.5936890877783298
Epoch #110: loss=0.369175074622035
Epoch #111: loss=0.3267198633402586
Epoch #112: loss=0.33862758055329323
Epoch #113: loss=0.2049928978085518
Epoch #114: loss=0.29037856590002775
Epoch #115: loss=0.30852172430604696
Epoch #116: loss=0.26261606626212597
Epoch #117: loss=0.3108433708548546
Epoch #118: loss=0.24117169342935085
Epoch #119: loss=0.3106232648715377
Epoch #120: loss=0.31062030605971813
Epoch #121: loss=0.28101402148604393
Epoch #122: loss=0.33195891696959734
Epoch #123: loss=0.2778134187683463
Epoch #124: loss=0.2870025709271431
Epoch #125: loss=0.27488414477556944
Epoch #126: loss=0.2273955987766385
Epoch #127: loss=0.26789292227476835
Epoch #128: loss=0.35247042030096054
Epoch #129: loss=0.28856753930449486
Epoch #130: loss=0.515404311940074
Epoch #131: loss=0.3572011310607195
Epoch #132: loss=0.35506168007850647
Epoch #133: loss=0.32363843359053135
Epoch #134: loss=0.2370608150959015
Epoch #135: loss=0.19567476026713848
Epoch #136: loss=0.24057531636208296
Epoch #137: loss=0.2583932224661112
Epoch #138: loss=0.21733408607542515
Epoch #139: loss=0.24117114208638668
Epoch #140: loss=0.2912572817876935
Epoch #141: loss=0.17149154748767614
Epoch #142: loss=0.283642303198576
Epoch #143: loss=0.14975501410663128
Epoch #144: loss=0.21927478536963463
Epoch #145: loss=0.23594442568719387
Epoch #146: loss=0.2438581008464098
Epoch #147: loss=0.20537281315773726
Epoch #148: loss=0.21960771549493074
Epoch #149: loss=0.25117325503379107
Epoch #150: loss=0.3135659396648407
Epoch #151: loss=0.43558431044220924
Epoch #152: loss=0.4933771323412657
Epoch #153: loss=0.31341675855219364
Epoch #154: loss=0.35028085485100746
Epoch #155: loss=0.3000786807388067
Epoch #156: loss=0.35896642319858074
Epoch #157: loss=0.21563450433313847
Epoch #158: loss=0.34975447691977024
Epoch #159: loss=0.2997119314968586
Epoch #160: loss=0.21459319908171892
Epoch #161: loss=0.24137988407164812
Epoch #162: loss=0.4475779915228486
Epoch #163: loss=0.2173665314912796
Epoch #164: loss=0.25748882349580526
Epoch #165: loss=0.2749668899923563
Epoch #166: loss=0.23667452577501535
Epoch #167: loss=0.23011678084731102
Epoch #168: loss=0.43441073689609766
Epoch #169: loss=0.23388914205133915
Epoch #170: loss=0.22451703809201717
Epoch #171: loss=0.26402013190090656
Epoch #172: loss=0.17058487236499786
Epoch #173: loss=0.2643181439489126
Epoch #174: loss=0.14545358810573816
Epoch #175: loss=0.2288470882922411
Epoch #176: loss=0.12828067550435662
Epoch #177: loss=0.19066025968641043
Epoch #178: loss=0.23287230171263218
Epoch #179: loss=0.15657186647877097
Epoch #180: loss=0.17109492840245366
Epoch #181: loss=0.2783388812094927
Epoch #182: loss=0.12718193791806698
Epoch #183: loss=0.17345982324332
Epoch #184: loss=0.1592516079545021
Epoch #185: loss=0.14130469970405102
Epoch #186: loss=0.15649929363280535
Epoch #187: loss=0.14176405826583505
Epoch #188: loss=0.1630888357758522
Epoch #189: loss=0.2559850523248315
Epoch #190: loss=0.18037918396294117
Epoch #191: loss=0.11383019434288144
Epoch #192: loss=0.16778466384857893
Epoch #193: loss=0.19998770486563444
Epoch #194: loss=0.4106815466657281
Epoch #195: loss=0.3610539142973721
Epoch #196: loss=0.3265352100133896
Epoch #197: loss=0.18133763130754232
Epoch #198: loss=0.19231129623949528
Epoch #199: loss=0.2598223015666008
Epoch #200: loss=0.2838489469140768
Epoch #201: loss=0.2046392448246479
Epoch #202: loss=0.3163319956511259
Epoch #203: loss=0.21196921169757843
Epoch #204: loss=0.2662214934825897
Epoch #205: loss=0.2035697242245078
Epoch #206: loss=0.2556559145450592
Epoch #207: loss=0.2537700701504946
Epoch #208: loss=0.23774135671555996
Epoch #209: loss=0.1652881852351129
Epoch #210: loss=0.16829788917675614
Epoch #211: loss=0.17918430780991912
Epoch #212: loss=0.29361818078905344
Epoch #213: loss=0.17619666177779436
Epoch #214: loss=0.1651706793345511
Epoch #215: loss=0.14392933994531631
Epoch #216: loss=0.14287223387509584
Epoch #217: loss=0.18092261161655188
Epoch #218: loss=0.11844962136819959
Epoch #219: loss=0.10769509617239237
Epoch #220: loss=0.2322959159500897
Epoch #221: loss=0.1469702678732574
Epoch #222: loss=0.2558131548576057
Epoch #223: loss=0.37123178970068693
Epoch #224: loss=0.1345751378685236
Epoch #225: loss=0.17242896929383278
Epoch #226: loss=0.2019235622137785
Epoch #227: loss=0.27226182306185365
Epoch #228: loss=0.22684589447453618
Epoch #229: loss=0.19239354319870472
Epoch #230: loss=0.18013546708971262
Epoch #231: loss=0.19432697352021933
Epoch #232: loss=0.19064533803611994
Epoch #233: loss=0.21318071521818638
Epoch #234: loss=0.09508922835811973
Epoch #235: loss=0.17719255294650793
Epoch #236: loss=0.208584638312459
Epoch #237: loss=0.16545855440199375
Epoch #238: loss=0.24104992114007473
Epoch #239: loss=0.18968798778951168
Epoch #240: loss=0.17528896871954203
Epoch #241: loss=0.11441136198118329
Epoch #242: loss=0.10030125081539154
Epoch #243: loss=0.2191543895751238
Epoch #244: loss=0.115055360365659
Epoch #245: loss=0.12888064701110125
Epoch #246: loss=0.07671105302870274
Epoch #247: loss=0.1494294204749167
Epoch #248: loss=0.10038679512217641
Epoch #249: loss=0.20056405290961266

Training time: 0:01:32.264691

Finished.
n2one setting exchange -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2023/model.pkl', muti_dataset='exchange', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.47376e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.93673e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.93673e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5749764262278745, 'MAE': 0.5313894025830826}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2023/model.pkl', muti_dataset='exchange', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.35255e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.71751e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.25471505453324866, 'MAE': 0.35606662261913047}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2023/model.pkl', muti_dataset='exchange', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.49028e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.12213e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.96218e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.470265948312455, 'MAE': 0.47034062285221795}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2023/model.pkl', muti_dataset='exchange', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.87952e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.95235e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.85039e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.17108527257569772, 'MAE': 0.2894581366363744}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2023/model.pkl', muti_dataset='exchange', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.86831e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.67226e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.16671714374898963, 'MAE': 0.28513003243526414}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2023/model.pkl', muti_dataset='exchange', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.8213e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.91625e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.6927e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.8213e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8500382232541397, 'MAE': 0.4834553789719534}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2023/model.pkl', muti_dataset='exchange', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=8.89882e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.95362e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.736e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=8.89882e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3585269274700064, 'MAE': 0.42060045853307343}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2023/model.pkl', muti_dataset='exchange', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.88809e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.97711e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.94518e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.7550866200590775, 'MAE': 0.6867863865141173}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='traffic', random_seed=2023, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/traffic_epochs_250_seed_2023
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=1.1768306217171476
Epoch #1: loss=0.37162046518237296
Epoch #2: loss=0.28653566037108064
Epoch #3: loss=0.20546613733031358
Epoch #4: loss=0.16651360210454796
Epoch #5: loss=0.1269714380906173
Epoch #6: loss=0.11020091029095816
Epoch #7: loss=0.08975791085507125
Epoch #8: loss=0.06826069608456055
Epoch #9: loss=0.07062435228476979
Epoch #10: loss=0.06235079098873169
Epoch #11: loss=0.05769885341332158
Epoch #12: loss=0.06905358398372087
Epoch #13: loss=0.045889030394885524
Epoch #14: loss=0.04763088440047167
Epoch #15: loss=0.041506526548212304
Epoch #16: loss=0.03957836279805464
Epoch #17: loss=0.036518891618301845
Epoch #18: loss=0.04284620984606531
Epoch #19: loss=0.030020719238507222
Epoch #20: loss=0.03264557425982887
Epoch #21: loss=0.03095027456789876
Epoch #22: loss=0.030000539070990352
Epoch #23: loss=0.029784104727930336
Epoch #24: loss=0.03078550816631904
Epoch #25: loss=0.02226648704454588
Epoch #26: loss=0.023261730292036247
Epoch #27: loss=0.02758314530243622
Epoch #28: loss=0.03219275328850918
Epoch #29: loss=0.02828316140815663
Epoch #30: loss=0.02325384822628718
Epoch #31: loss=0.025979862840394566
Epoch #32: loss=0.029951963858114956
Epoch #33: loss=0.031187581821488487
Epoch #34: loss=0.03632702950316345
Epoch #35: loss=0.027192585809607914
Epoch #36: loss=0.022551303039498847
Epoch #37: loss=0.018363333805685694
Epoch #38: loss=0.020729353297566627
Epoch #39: loss=0.021786777222401563
Epoch #40: loss=0.022600147351725223
Epoch #41: loss=0.018816539524376973
Epoch #42: loss=0.019270931837838273
Epoch #43: loss=0.017941215576462475
Epoch #44: loss=0.019691646313824175
Epoch #45: loss=0.023432666317059005
Epoch #46: loss=0.020976276478550254
Epoch #47: loss=0.017478942773248157
Epoch #48: loss=0.009838476669169711
Epoch #49: loss=0.019262171592163636
Epoch #50: loss=0.02513123919532079
Epoch #51: loss=0.01786650056891865
Epoch #52: loss=0.016445742899850724
Epoch #53: loss=0.012480803099209702
Epoch #54: loss=0.024580501923929108
Epoch #55: loss=0.014515537962132714
Epoch #56: loss=0.02474865532294348
Epoch #57: loss=0.033751445288960055
Epoch #58: loss=0.01334899242078316
Epoch #59: loss=0.013044693346170162
Epoch #60: loss=0.014779996018139094
Epoch #61: loss=0.014945626924051568
Epoch #62: loss=0.017250715030234072
Epoch #63: loss=0.024525368636422153
Epoch #64: loss=0.02216932684666069
Epoch #65: loss=0.015785838743704726
Epoch #66: loss=0.012150871656216214
Epoch #67: loss=0.013736095349007263
Epoch #68: loss=0.016026119197750672
Epoch #69: loss=0.019594287127850624
Epoch #70: loss=0.01395883356138503
Epoch #71: loss=0.016782464044184257
Epoch #72: loss=0.01715360727731631
Epoch #73: loss=0.016741766252903658
Epoch #74: loss=0.012256082414291268
Epoch #75: loss=0.016223457114350456
Epoch #76: loss=0.014782596862905447
Epoch #77: loss=0.010822876104128843
Epoch #78: loss=0.015470576442261129
Epoch #79: loss=0.016114981922414815
Epoch #80: loss=0.015153786169426902
Epoch #81: loss=0.019989321639357793
Epoch #82: loss=0.011998080021635308
Epoch #83: loss=0.02352825544527116
Epoch #84: loss=0.013248012343968812
Epoch #85: loss=0.011218398451239784
Epoch #86: loss=0.016139534028270498
Epoch #87: loss=0.01907592750877102
Epoch #88: loss=0.012959474488816508
Epoch #89: loss=0.023960084692441874
Epoch #90: loss=0.015580287587754925
Epoch #91: loss=0.011900125096998828
Epoch #92: loss=0.010944260421197288
Epoch #93: loss=0.014956297924300616
Epoch #94: loss=0.015153760359427523
Epoch #95: loss=0.012162758328249892
Epoch #96: loss=0.015250499998926987
Epoch #97: loss=0.01062992181160445
Epoch #98: loss=0.01707212568343179
Epoch #99: loss=0.015023711448904827
Epoch #100: loss=0.01362501861039482
Epoch #101: loss=0.01761305232872925
Epoch #102: loss=0.012038796321230156
Epoch #103: loss=0.010449074989635944
Epoch #104: loss=0.018170900314592803
Epoch #105: loss=0.013470555828221676
Epoch #106: loss=0.010869342519219947
Epoch #107: loss=0.01420247588927097
Epoch #108: loss=0.008117042165302256
Epoch #109: loss=0.021589651825516906
Epoch #110: loss=0.011014898608248516
Epoch #111: loss=0.013987998814631865
Epoch #112: loss=0.010964873333282233
Epoch #113: loss=0.014220548851509782
Epoch #114: loss=0.014900729095286705
Epoch #115: loss=0.013199592293641236
Epoch #116: loss=0.012184652621334358
Epoch #117: loss=0.009045372626394694
Epoch #118: loss=0.013418647616929073
Epoch #119: loss=0.012168449845546943
Epoch #120: loss=0.015090447305655756
Epoch #121: loss=0.010197651989534097
Epoch #122: loss=0.016151190218958666
Epoch #123: loss=0.01058139268683919
Epoch #124: loss=0.01697697966054877
Epoch #125: loss=0.013618087022740333
Epoch #126: loss=0.011841914856547366
Epoch #127: loss=0.0259640477231721
Epoch #128: loss=0.012275384868320409
Epoch #129: loss=0.00996795541053398
Epoch #130: loss=0.010624121650586146
Epoch #131: loss=0.009254361916899526
Epoch #132: loss=0.016162901373648706
Epoch #133: loss=0.008625888007921502
Epoch #134: loss=0.009302202155717688
Epoch #135: loss=0.01999060387329875
Epoch #136: loss=0.012963183140333552
Epoch #137: loss=0.00914763143732998
Epoch #138: loss=0.008114604943887143
Epoch #139: loss=0.012539153509212036
Epoch #140: loss=0.011290597259098062
Epoch #141: loss=0.013437442576459754
Epoch #142: loss=0.00930204898156585
Epoch #143: loss=0.01360791530844344
Epoch #144: loss=0.016110936600986107
Epoch #145: loss=0.01045224966664856
Epoch #146: loss=0.01022500629525193
Epoch #147: loss=0.009289176750543533
Epoch #148: loss=0.008663751763454935
Epoch #149: loss=0.01018167137618208
Epoch #150: loss=0.020414121787232863
Epoch #151: loss=0.01016738597286612
Epoch #152: loss=0.008976025841294885
Epoch #153: loss=0.014677901793990594
Epoch #154: loss=0.015568278251204876
Epoch #155: loss=0.009199630499436853
Epoch #156: loss=0.014247325388154203
Epoch #157: loss=0.008239043644314274
Epoch #158: loss=0.006939333759802243
Epoch #159: loss=0.013851382844227047
Epoch #160: loss=0.008651112073962469
Epoch #161: loss=0.011202643344106812
Epoch #162: loss=0.009322686804233772
Epoch #163: loss=0.010004533415171641
Epoch #164: loss=0.015436527580410413
Epoch #165: loss=0.007983511032093249
Epoch #166: loss=0.013417767983592985
Epoch #167: loss=0.007947165326920571
Epoch #168: loss=0.009748561784304034
Epoch #169: loss=0.011684005181155203
Epoch #170: loss=0.013823943588040693
Epoch #171: loss=0.009053268118986612
Epoch #172: loss=0.00817530400247279
Epoch #173: loss=0.011023853095667344
Epoch #174: loss=0.008039548118088125
Epoch #175: loss=0.009429358583202608
Epoch #176: loss=0.011566053010982362
Epoch #177: loss=0.015604889767434613
Epoch #178: loss=0.007480197903458969
Epoch #179: loss=0.01222698687334486
Epoch #180: loss=0.008870922323057405
Epoch #181: loss=0.01090191432006191
Epoch #182: loss=0.012527070768699352
Epoch #183: loss=0.006715731280969954
Epoch #184: loss=0.009635968909819293
Epoch #185: loss=0.010152058563859088
Epoch #186: loss=0.014203529689880196
Epoch #187: loss=0.009395048941944492
Epoch #188: loss=0.01075317657666205
Epoch #189: loss=0.011918379730091072
Epoch #190: loss=0.011425554653508248
Epoch #191: loss=0.008702561843194855
Epoch #192: loss=0.00898321281570313
Epoch #193: loss=0.010065410190376763
Epoch #194: loss=0.006300522996330949
Epoch #195: loss=0.009125384565553814
Epoch #196: loss=0.010264741887369293
Epoch #197: loss=0.006937356266793603
Epoch #198: loss=0.01197060498206369
Epoch #199: loss=0.00905615509129259
Epoch #200: loss=0.009656959429603143
Epoch #201: loss=0.012885496830058569
Epoch #202: loss=0.008762725049233023
Epoch #203: loss=0.0105125734315747
Epoch #204: loss=0.007239908766766623
Epoch #205: loss=0.009035531148146876
Epoch #206: loss=0.012968952205124486
Epoch #207: loss=0.007590626997503413
Epoch #208: loss=0.02651166268373843
Epoch #209: loss=0.011867067142514773
Epoch #210: loss=0.013282294493379814
Epoch #211: loss=0.00870758332917818
Epoch #212: loss=0.010071792248122609
Epoch #213: loss=0.006905565806454984
Epoch #214: loss=0.006100235139194681
Epoch #215: loss=0.010296085162628215
Epoch #216: loss=0.011574171787874558
Epoch #217: loss=0.009291527058243543
Epoch #218: loss=0.008209184413758447
Epoch #219: loss=0.006607000326859714
Epoch #220: loss=0.028563211581995495
Epoch #221: loss=0.009199003084664549
Epoch #222: loss=0.011608809150447891
Epoch #223: loss=0.005658099549484743
Epoch #224: loss=0.009395392278718207
Epoch #225: loss=0.007346581757623565
Epoch #226: loss=0.009658575976948662
Epoch #227: loss=0.008668369333587216
Epoch #228: loss=0.008171372320250447
Epoch #229: loss=0.008429264456184695
Epoch #230: loss=0.008921643775900483
Epoch #231: loss=0.006798155832664448
Epoch #232: loss=0.007872501603432223
Epoch #233: loss=0.007668159536069546
Epoch #234: loss=0.01120170386312416
Epoch #235: loss=0.00955668415503456
Epoch #236: loss=0.007810356206108823
Epoch #237: loss=0.013064986473190657
Epoch #238: loss=0.007996323507514318
Epoch #239: loss=0.01148979962481188
Epoch #240: loss=0.009725377889721587
Epoch #241: loss=0.009311673176996712
Epoch #242: loss=0.012363201024567463
Epoch #243: loss=0.010602064234212153
Epoch #244: loss=0.007115133270122145
Epoch #245: loss=0.00525803464007724
Epoch #246: loss=0.009727568540864207
Epoch #247: loss=0.008003158543769808
Epoch #248: loss=0.010479191147869917
Epoch #249: loss=0.009403007157494555

Training time: 4:32:05.041744

Finished.
n2one setting traffic -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2023/model.pkl', muti_dataset='traffic', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.51335e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.98663e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.51335e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.6122602805712009, 'MAE': 0.5653632545542007}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2023/model.pkl', muti_dataset='traffic', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.50239e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.91401e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3159366934835745, 'MAE': 0.4070642056920954}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2023/model.pkl', muti_dataset='traffic', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.07212e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.15805e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.36862e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.07212e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5759930094766557, 'MAE': 0.54008744534748}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2023/model.pkl', muti_dataset='traffic', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.33349e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.16298e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.33773e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.19535793935058038, 'MAE': 0.31787798255224725}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2023/model.pkl', muti_dataset='traffic', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.08058e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.28594795599392353, 'MAE': 0.3573261837177983}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2023/model.pkl', muti_dataset='traffic', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.10709e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.18081e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.3248e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.10709e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8298165664671868, 'MAE': 0.4728109321977688}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2023/model.pkl', muti_dataset='traffic', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.10114e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.19976e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.35108e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.10114e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3896493147995441, 'MAE': 0.44335100327490873}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2023/model.pkl', muti_dataset='traffic', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.22568e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.46967e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.22568e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8251967343681418, 'MAE': 0.6878691471339493}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='electricity', random_seed=2023, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/electricity_epochs_250_seed_2023
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=1.7482751522480142
Epoch #1: loss=0.6820867771857253
Epoch #2: loss=0.45958100027198734
Epoch #3: loss=0.35862567055262506
Epoch #4: loss=0.3115195608306154
Epoch #5: loss=0.2705909972807329
Epoch #6: loss=0.22565473641654785
Epoch #7: loss=0.18030495143196665
Epoch #8: loss=0.18859374024136416
Epoch #9: loss=0.1606449632908325
Epoch #10: loss=0.15084068583922222
Epoch #11: loss=0.13574277406494564
Epoch #12: loss=0.11991897854385346
Epoch #13: loss=0.09028245744257701
Epoch #14: loss=0.10720857429518321
Epoch #15: loss=0.09102645646954809
Epoch #16: loss=0.08322702319799369
Epoch #17: loss=0.07872532483341166
Epoch #18: loss=0.07224275118662654
Epoch #19: loss=0.07015794655453193
Epoch #20: loss=0.0593260283613827
Epoch #21: loss=0.05480241253565869
Epoch #22: loss=0.08135587907457184
Epoch #23: loss=0.04199693201550767
Epoch #24: loss=0.05000456959891171
Epoch #25: loss=0.05431950592067429
Epoch #26: loss=0.04631186394467718
Epoch #27: loss=0.0440077967941761
Epoch #28: loss=0.03366634655363765
Epoch #29: loss=0.09025653073639606
Epoch #30: loss=0.06565637278408276
Epoch #31: loss=0.037440981454799106
Epoch #32: loss=0.0382381504556785
Epoch #33: loss=0.03725757476702518
Epoch #34: loss=0.02889263639922872
Epoch #35: loss=0.03795517801315846
Epoch #36: loss=0.03791626536568795
Epoch #37: loss=0.031376780334981945
Epoch #38: loss=0.025160006849484003
Epoch #39: loss=0.03175423337680482
Epoch #40: loss=0.026228185917172478
Epoch #41: loss=0.042871202787564275
Epoch #42: loss=0.02930454710698643
Epoch #43: loss=0.029202438000229845
Epoch #44: loss=0.04326368016959676
Epoch #45: loss=0.032948850182239024
Epoch #46: loss=0.019779826296824163
Epoch #47: loss=0.030115180376139573
Epoch #48: loss=0.03489545967960817
Epoch #49: loss=0.030537516810725272
Epoch #50: loss=0.024147869409076476
Epoch #51: loss=0.024276335734578075
Epoch #52: loss=0.022239376160147893
Epoch #53: loss=0.020406905215703576
Epoch #54: loss=0.016480079711330736
Epoch #55: loss=0.041515029927663434
Epoch #56: loss=0.020491522963150082
Epoch #57: loss=0.025782666961891677
Epoch #58: loss=0.016557274195162515
Epoch #59: loss=0.025226721253588425
Epoch #60: loss=0.030578679778334623
Epoch #61: loss=0.015262531762510375
Epoch #62: loss=0.0187756687724046
Epoch #63: loss=0.016419392348212013
Epoch #64: loss=0.011895869826285802
Epoch #65: loss=0.0237241925383741
Epoch #66: loss=0.03447484894803612
Epoch #67: loss=0.02056394259676024
Epoch #68: loss=0.022305418513831318
Epoch #69: loss=0.012338253042393733
Epoch #70: loss=0.020102652145014364
Epoch #71: loss=0.02197496345733812
Epoch #72: loss=0.019031649164208488
Epoch #73: loss=0.01633554929178324
Epoch #74: loss=0.014996942963394572
Epoch #75: loss=0.019618786411574603
Epoch #76: loss=0.020323136402330307
Epoch #77: loss=0.028367159030446638
Epoch #78: loss=0.021488775751942253
Epoch #79: loss=0.017957412880030096
Epoch #80: loss=0.02447642261855815
Epoch #81: loss=0.019570272043057228
Epoch #82: loss=0.012641090671589882
Epoch #83: loss=0.014215866193709159
Epoch #84: loss=0.020338685966765573
Epoch #85: loss=0.015459525662929841
Epoch #86: loss=0.017665959451118384
Epoch #87: loss=0.019395629256293526
Epoch #88: loss=0.01316809381729694
Epoch #89: loss=0.011996757842577135
Epoch #90: loss=0.03520231949099459
Epoch #91: loss=0.01924057032906079
Epoch #92: loss=0.017001318586105336
Epoch #93: loss=0.014165283735106029
Epoch #94: loss=0.011859540036963618
Epoch #95: loss=0.018650421942185285
Epoch #96: loss=0.009775747678342718
Epoch #97: loss=0.02106362476950726
Epoch #98: loss=0.023315562298332815
Epoch #99: loss=0.01250608181316156
Epoch #100: loss=0.010778250724347047
Epoch #101: loss=0.015262909827886638
Epoch #102: loss=0.01355247446346732
Epoch #103: loss=0.013121482712449506
Epoch #104: loss=0.018742796014580947
Epoch #105: loss=0.030769983677170314
Epoch #106: loss=0.019135731181370623
Epoch #107: loss=0.011258523955664124
Epoch #108: loss=0.007420114240271106
Epoch #109: loss=0.018118048899493693
Epoch #110: loss=0.022822278033147025
Epoch #111: loss=0.010898435444279495
Epoch #112: loss=0.009563789932155906
Epoch #113: loss=0.008277638846169867
Epoch #114: loss=0.011357659118694638
Epoch #115: loss=0.009154310203708615
Epoch #116: loss=0.01870733871784009
Epoch #117: loss=0.016969231108197726
Epoch #118: loss=0.009075644287691274
Epoch #119: loss=0.0144775481432215
Epoch #120: loss=0.015333420390298015
Epoch #121: loss=0.017334112474648427
Epoch #122: loss=0.01284325958231052
Epoch #123: loss=0.012240853018092567
Epoch #124: loss=0.008951199126380533
Epoch #125: loss=0.011059574188622487
Epoch #126: loss=0.014795856829043594
Epoch #127: loss=0.008688777820801949
Epoch #128: loss=0.007246007930670178
Epoch #129: loss=0.012076669178683328
Epoch #130: loss=0.01601345626000138
Epoch #131: loss=0.017521268358842886
Epoch #132: loss=0.013328074821962967
Epoch #133: loss=0.009521265360969191
Epoch #134: loss=0.010508487391469833
Epoch #135: loss=0.007952203422968313
Epoch #136: loss=0.017146293648171915
Epoch #137: loss=0.009568825581348922
Epoch #138: loss=0.012173412558009754
Epoch #139: loss=0.00917524836574481
Epoch #140: loss=0.011744712623027719
Epoch #141: loss=0.012752931593515478
Epoch #142: loss=0.014124989993195702
Epoch #143: loss=0.01364179121020665
Epoch #144: loss=0.005392291001044214
Epoch #145: loss=0.012247486570755722
Epoch #146: loss=0.007763626068345245
Epoch #147: loss=0.010555910676151276
Epoch #148: loss=0.011745666423914055
Epoch #149: loss=0.01412189238475537
Epoch #150: loss=0.007250761258745177
Epoch #151: loss=0.007637058873406997
Epoch #152: loss=0.01345250116887131
Epoch #153: loss=0.00896135421868376
Epoch #154: loss=0.01794663282739422
Epoch #155: loss=0.017847892771710023
Epoch #156: loss=0.012057142014502087
Epoch #157: loss=0.010615321062559645
Epoch #158: loss=0.018185437140504704
Epoch #159: loss=0.01059610325069895
Epoch #160: loss=0.006879044994345585
Epoch #161: loss=0.009512354786264075
Epoch #162: loss=0.011651606717497992
Epoch #163: loss=0.015357653293076822
Epoch #164: loss=0.007694555351668766
Epoch #165: loss=0.006378535974068665
Epoch #166: loss=0.008504320591054581
Epoch #167: loss=0.013583456732026617
Epoch #168: loss=0.008782811634600847
Epoch #169: loss=0.01598391318501545
Epoch #170: loss=0.011331484805193448
Epoch #171: loss=0.009751360854199243
Epoch #172: loss=0.01262696921307524
Epoch #173: loss=0.00951894076858035
Epoch #174: loss=0.005218968436834939
Epoch #175: loss=0.01582300448015904
Epoch #176: loss=0.01080522834826725
Epoch #177: loss=0.013266344133306098
Epoch #178: loss=0.011390409028705941
Epoch #179: loss=0.013843908713680091
Epoch #180: loss=0.008894924913073173
Epoch #181: loss=0.009441869722434822
Epoch #182: loss=0.02555895852874471
Epoch #183: loss=0.010333024804927177
Epoch #184: loss=0.00859605082529423
Epoch #185: loss=0.012430594027723472
Epoch #186: loss=0.0077802373210223525
Epoch #187: loss=0.03262934682116847
Epoch #188: loss=0.012966579392790284
Epoch #189: loss=0.012605992622558909
Epoch #190: loss=0.009809501600782517
Epoch #191: loss=0.009802430700053783
Epoch #192: loss=0.005826917918677503
Epoch #193: loss=0.006935337009858572
Epoch #194: loss=0.007433212002647919
Epoch #195: loss=0.011735101600179036
Epoch #196: loss=0.009338282993624736
Epoch #197: loss=0.008353859459258895
Epoch #198: loss=0.01308575806801274
Epoch #199: loss=0.018475271353238433
Epoch #200: loss=0.008002401118868864
Epoch #201: loss=0.005808185374112568
Epoch #202: loss=0.013998465373353435
Epoch #203: loss=0.008005590379985944
Epoch #204: loss=0.00896721205761514
Epoch #205: loss=0.007352377779997967
Epoch #206: loss=0.009025728402549046
Epoch #207: loss=0.012406268462791133
Epoch #208: loss=0.015270503290792539
Epoch #209: loss=0.010203095630784679
Epoch #210: loss=0.007655399942801789
Epoch #211: loss=0.011848784400265508
Epoch #212: loss=0.008098540927546034
Epoch #213: loss=0.012397428477296135
Epoch #214: loss=0.012958740844533452
Epoch #215: loss=0.008581014070079612
Epoch #216: loss=0.007906095125506461
Epoch #217: loss=0.008353751258017217
Epoch #218: loss=0.00647430710249357
Epoch #219: loss=0.01278603211129766
Epoch #220: loss=0.009444308387876467
Epoch #221: loss=0.010814259891910333
Epoch #222: loss=0.011006395679585218
Epoch #223: loss=0.012129532598590804
Epoch #224: loss=0.007243384493168913
Epoch #225: loss=0.008084412256721407
Epoch #226: loss=0.012573724564177933
Epoch #227: loss=0.00742599692816173
Epoch #228: loss=0.007179619179706008
Epoch #229: loss=0.009890349964902088
Epoch #230: loss=0.005450004268117754
Epoch #231: loss=0.013852387819746712
Epoch #232: loss=0.008257225921596589
Epoch #233: loss=0.008371827839235442
Epoch #234: loss=0.008072894284624252
Epoch #235: loss=0.010000898853826374
Epoch #236: loss=0.008683506405195714
Epoch #237: loss=0.0062036139202758245
Epoch #238: loss=0.009822964787681231
Epoch #239: loss=0.00998024090129383
Epoch #240: loss=0.011237826651126158
Epoch #241: loss=0.00880116645215555
Epoch #242: loss=0.007158178664068256
Epoch #243: loss=0.005809401977147959
Epoch #244: loss=0.005816185597547568
Epoch #245: loss=0.011453245351300647
Epoch #246: loss=0.0192278102013091
Epoch #247: loss=0.008887899381861474
Epoch #248: loss=0.009869766623529569
Epoch #249: loss=0.006910021065420984

Training time: 1:36:55.943342

Finished.
n2one setting electricity -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2023/model.pkl', muti_dataset='electricity', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.2223e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.87811e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.57587e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.2223e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.59991776199609, 'MAE': 0.5502574122424256}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2023/model.pkl', muti_dataset='electricity', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.17527e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.87803e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.64043e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.17527e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.32649129210325145, 'MAE': 0.41230133418796466}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2023/model.pkl', muti_dataset='electricity', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.117e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.2599e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.48839e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.117e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5857822498523013, 'MAE': 0.5331316660635786}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2023/model.pkl', muti_dataset='electricity', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.06926e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.11587e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.18495e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.06926e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.2103329666283107, 'MAE': 0.330288117541}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2023/model.pkl', muti_dataset='electricity', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.61302e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.20918575422186367, 'MAE': 0.3171347874599017}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2023/model.pkl', muti_dataset='electricity', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.71633e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.34691e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.2575e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.71633e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8092520275548925, 'MAE': 0.46362833345955595}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2023/model.pkl', muti_dataset='electricity', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=6.10566e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.38843e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.32339e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=6.10566e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.36746610754062503, 'MAE': 0.4280806521079828}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2023/model.pkl', muti_dataset='electricity', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.83859e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.06076e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.03376e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.83859e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5014520288849909, 'MAE': 0.5299076206770038}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='weather', random_seed=2023, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/weather_epochs_250_seed_2023
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=8.620708098778358
Epoch #1: loss=3.2833548050660353
Epoch #2: loss=3.302006877385653
Epoch #3: loss=2.654524436363807
Epoch #4: loss=2.388920811506418
Epoch #5: loss=2.3793482872155995
Epoch #6: loss=2.094891552741711
Epoch #7: loss=2.173657481486981
Epoch #8: loss=2.0725393203588633
Epoch #9: loss=2.0040097603431115
Epoch #10: loss=1.9054615497589111
Epoch #11: loss=1.6782801839021535
Epoch #12: loss=1.5915851363768945
Epoch #13: loss=1.4690146216979394
Epoch #14: loss=1.2890102725762587
Epoch #15: loss=1.3080604809981127
Epoch #16: loss=1.3137415785055895
Epoch #17: loss=1.2419516719304597
Epoch #18: loss=1.2130015744612768
Epoch #19: loss=1.1866057056647081
Epoch #20: loss=1.1590749713090749
Epoch #21: loss=1.1860686861551726
Epoch #22: loss=1.1102425914544325
Epoch #23: loss=1.070831475349573
Epoch #24: loss=1.0464784502983093
Epoch #25: loss=0.9585538529432737
Epoch #26: loss=0.920291217473837
Epoch #27: loss=0.8597044463341053
Epoch #28: loss=0.8725829605872815
Epoch #29: loss=0.819137658064182
Epoch #30: loss=0.8252534430760604
Epoch #31: loss=0.7601249378461105
Epoch #32: loss=0.7261583644610184
Epoch #33: loss=0.8070957546050732
Epoch #34: loss=0.7865636440423819
Epoch #35: loss=0.6688898916427906
Epoch #36: loss=0.7544902906968043
Epoch #37: loss=0.6647628729160016
Epoch #38: loss=0.647121318257772
Epoch #39: loss=0.6018426991426028
Epoch #40: loss=0.6824392470029684
Epoch #41: loss=0.683853111588038
Epoch #42: loss=0.6567098716130624
Epoch #43: loss=0.7113291495121442
Epoch #44: loss=0.5545379909185263
Epoch #45: loss=0.5780269973553144
Epoch #46: loss=0.5533832609653473
Epoch #47: loss=0.5212060786210574
Epoch #48: loss=0.6011099414183543
Epoch #49: loss=0.647408209167994
Epoch #50: loss=0.5003570673557428
Epoch #51: loss=0.4878423844392483
Epoch #52: loss=0.5510922796451129
Epoch #53: loss=0.4516439059605965
Epoch #54: loss=0.4883821274225528
Epoch #55: loss=0.45216879821740663
Epoch #56: loss=0.42708177062181324
Epoch #57: loss=0.4128480496314856
Epoch #58: loss=0.4309707341285852
Epoch #59: loss=0.4093828430542579
Epoch #60: loss=0.42229479322066676
Epoch #61: loss=0.4119193164201883
Epoch #62: loss=0.3794853693017593
Epoch #63: loss=0.3676952123641968
Epoch #64: loss=0.44702608768756574
Epoch #65: loss=0.42917038385684675
Epoch #66: loss=0.4222931873339873
Epoch #67: loss=0.4815971152140544
Epoch #68: loss=0.321369234759074
Epoch #69: loss=0.4254327496657005
Epoch #70: loss=0.3923899279190944
Epoch #71: loss=0.35304654561556303
Epoch #72: loss=0.41422323424082536
Epoch #73: loss=0.3668749819581325
Epoch #74: loss=0.35504427609535366
Epoch #75: loss=0.4507711174396368
Epoch #76: loss=0.939147561788559
Epoch #77: loss=0.4730629130051686
Epoch #78: loss=0.4343513548374176
Epoch #79: loss=0.33066926208826214
Epoch #80: loss=0.2919488778481117
Epoch #81: loss=0.33148317440198016
Epoch #82: loss=0.3250489469904166
Epoch #83: loss=0.360399206670431
Epoch #84: loss=0.392234417108389
Epoch #85: loss=0.5261511573424706
Epoch #86: loss=0.3940748864641556
Epoch #87: loss=0.3545505375816272
Epoch #88: loss=0.2779799917569527
Epoch #89: loss=0.3192791434434744
Epoch #90: loss=0.3176235378934787
Epoch #91: loss=0.2620110305456015
Epoch #92: loss=0.3213479799719957
Epoch #93: loss=0.2660067327893697
Epoch #94: loss=0.2295087489944238
Epoch #95: loss=0.21417135229477516
Epoch #96: loss=0.22520214806382471
Epoch #97: loss=0.23850926040456846
Epoch #98: loss=0.2770334000770862
Epoch #99: loss=0.3186145699941195
Epoch #100: loss=0.29871047803988826
Epoch #101: loss=0.2206595499928181
Epoch #102: loss=0.24610361399558875
Epoch #103: loss=0.2708209787423794
Epoch #104: loss=0.24532481254293367
Epoch #105: loss=0.19537880787482628
Epoch #106: loss=0.25706945875516307
Epoch #107: loss=0.20304493749370942
Epoch #108: loss=0.3726755850590192
Epoch #109: loss=0.21134230981652552
Epoch #110: loss=0.18640170962764666
Epoch #111: loss=0.24527307313222152
Epoch #112: loss=0.18694448986878762
Epoch #113: loss=0.24022714134592277
Epoch #114: loss=0.20177853852510452
Epoch #115: loss=0.25616518694620866
Epoch #116: loss=0.20142733821502098
Epoch #117: loss=0.16999128059698984
Epoch #118: loss=0.16687601202955613
Epoch #119: loss=0.15009430480691102
Epoch #120: loss=0.15260048124652642
Epoch #121: loss=0.16245143086864397
Epoch #122: loss=0.1922837495803833
Epoch #123: loss=0.18223467440559313
Epoch #124: loss=0.15495670701448733
Epoch #125: loss=0.15714521218950933
Epoch #126: loss=0.1540807167497965
Epoch #127: loss=0.11749265042061989
Epoch #128: loss=0.14535968722059175
Epoch #129: loss=0.12470145523548126
Epoch #130: loss=0.1525756556254167
Epoch #131: loss=0.11664966149972035
Epoch #132: loss=0.1387079691944214
Epoch #133: loss=0.11614243471278594
Epoch #134: loss=0.14743458737547582
Epoch #135: loss=0.13483414039588892
Epoch #136: loss=0.13038610495053804
Epoch #137: loss=0.18230710121301505
Epoch #138: loss=0.11596610196507894
Epoch #139: loss=0.13177143968641758
Epoch #140: loss=0.10821422576331176
Epoch #141: loss=0.10577868885145737
Epoch #142: loss=0.1304046199298822
Epoch #143: loss=0.15069153675666222
Epoch #144: loss=0.14887131979832283
Epoch #145: loss=0.20676785377928844
Epoch #146: loss=0.1451763674043692
Epoch #147: loss=0.11219755144646534
Epoch #148: loss=0.10634892863722947
Epoch #149: loss=0.1262717441870616
Epoch #150: loss=0.15203247520212942
Epoch #151: loss=0.10177894352147213
Epoch #152: loss=0.10010401918911017
Epoch #153: loss=0.09738460842233437
Epoch #154: loss=0.13185896853414866
Epoch #155: loss=0.09607763946629487
Epoch #156: loss=0.14179080710388148
Epoch #157: loss=0.10921116903997384
Epoch #158: loss=0.13767134140317255
Epoch #159: loss=0.12628779617639688
Epoch #160: loss=0.14620865781146747
Epoch #161: loss=0.14299473424370474
Epoch #162: loss=0.18161492895048398
Epoch #163: loss=0.11861236995229354
Epoch #164: loss=0.13031691327117956
Epoch #165: loss=0.14570798123112091
Epoch #166: loss=0.07553294967286862
Epoch #167: loss=0.11451065626281959
Epoch #168: loss=0.08931446376328285
Epoch #169: loss=0.08011072687804699
Epoch #170: loss=0.09777291004474346
Epoch #171: loss=0.14261072888397253
Epoch #172: loss=0.08505070710984561
Epoch #173: loss=0.15294603487619987
Epoch #174: loss=0.13579152868344233
Epoch #175: loss=0.11121438386348578
Epoch #176: loss=0.08763763408821362
Epoch #177: loss=0.09515091246710373
Epoch #178: loss=0.09286182760619201
Epoch #179: loss=0.07573144467404255
Epoch #180: loss=0.07806401355908467
Epoch #181: loss=0.06753765949263023
Epoch #182: loss=0.10420364284744629
Epoch #183: loss=0.12356700218067719
Epoch #184: loss=0.11845406066053189
Epoch #185: loss=0.0767787413385052
Epoch #186: loss=0.0744373150742971
Epoch #187: loss=0.06201933066432293
Epoch #188: loss=0.09775018620376404
Epoch #189: loss=0.06310471842208734
Epoch #190: loss=0.06660412474033925
Epoch #191: loss=0.07814138762366313
Epoch #192: loss=0.10741066115979965
Epoch #193: loss=0.08522491916441001
Epoch #194: loss=0.0709882490336895
Epoch #195: loss=0.05188928508701233
Epoch #196: loss=0.06362272290369639
Epoch #197: loss=0.06474743088564047
Epoch #198: loss=0.04925089974242907
Epoch #199: loss=0.07361153369912735
Epoch #200: loss=0.0706028206130633
Epoch #201: loss=0.06905799616987889
Epoch #202: loss=0.06234993835767874
Epoch #203: loss=0.15478612597172076
Epoch #204: loss=0.06789722852408886
Epoch #205: loss=0.10706368339462922
Epoch #206: loss=0.05867011816455768
Epoch #207: loss=0.08866207781605996
Epoch #208: loss=0.07569074208060136
Epoch #209: loss=0.05458872278149311
Epoch #210: loss=0.11422678190641679
Epoch #211: loss=0.10722048630794653
Epoch #212: loss=0.0706091054643576
Epoch #213: loss=0.07986895274370909
Epoch #214: loss=0.21138233304596865
Epoch #215: loss=0.11724788494981252
Epoch #216: loss=0.05886928558063049
Epoch #217: loss=0.4057619967139684
Epoch #218: loss=0.4530522817602524
Epoch #219: loss=0.1748678060964896
Epoch #220: loss=0.14147426331272492
Epoch #221: loss=0.11804322826747711
Epoch #222: loss=0.21850999014881942
Epoch #223: loss=0.14652013363173375
Epoch #224: loss=0.13786738294248396
Epoch #225: loss=0.10761177625793678
Epoch #226: loss=0.0701366334150617
Epoch #227: loss=0.07608722823743637
Epoch #228: loss=0.06127848032002266
Epoch #229: loss=0.05811387701676442
Epoch #230: loss=0.08177742462318677
Epoch #231: loss=0.058165305867218055
Epoch #232: loss=0.06061940862295719
Epoch #233: loss=0.10716607851477769
Epoch #234: loss=0.06694903797828235
Epoch #235: loss=0.06134857853444723
Epoch #236: loss=0.04658851041816748
Epoch #237: loss=0.06179045785505038
Epoch #238: loss=0.041937921267862506
Epoch #239: loss=0.05781863508029626
Epoch #240: loss=0.06061888253316283
Epoch #241: loss=0.08711622902550377
Epoch #242: loss=0.0440942022161415
Epoch #243: loss=0.05886050686240196
Epoch #244: loss=0.06169407281021659
Epoch #245: loss=0.03465941881474394
Epoch #246: loss=0.052453005471481726
Epoch #247: loss=0.06785022453046761
Epoch #248: loss=0.03957898305872312
Epoch #249: loss=0.04250388266518712

Training time: 0:09:15.696087

Finished.
n2one setting weather -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2023/model.pkl', muti_dataset='weather', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.65e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.29396e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.29396e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5832078683155393, 'MAE': 0.5348115209551301}
Finished.
------------------------- record done -------------------------
n2one setting weather -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2023/model.pkl', muti_dataset='weather', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.55194e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.85937e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.26020157104662744, 'MAE': 0.3623521366428126}
Finished.
------------------------- record done -------------------------
n2one setting weather -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2023/model.pkl', muti_dataset='weather', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.41502e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.75058e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.41502e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.49716798580266586, 'MAE': 0.49079710701568696}
Finished.
------------------------- record done -------------------------
n2one setting weather -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2023/model.pkl', muti_dataset='weather', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.41998e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.7755e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.41998e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.18043185739541914, 'MAE': 0.3004296017294401}
Finished.
------------------------- record done -------------------------
n2one setting weather -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2023/model.pkl', muti_dataset='weather', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.22197e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.24856740458769128, 'MAE': 0.34303517056551774}
Finished.
------------------------- record done -------------------------
n2one setting weather -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2023/model.pkl', muti_dataset='weather', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.76654e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.75712e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.76654e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8062944065943505, 'MAE': 0.4592638679544709}
Finished.
------------------------- record done -------------------------
n2one setting weather -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2023/model.pkl', muti_dataset='weather', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.80728e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.56894e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.80728e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3700659080594864, 'MAE': 0.4223645202628265}
Finished.
------------------------- record done -------------------------
n2one setting weather -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2023/model.pkl', muti_dataset='weather', random_seed=2023, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.39004e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.74172e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.39004e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.468232760908022, 'MAE': 0.5354698828304149}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='ETTh1', random_seed=2024, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/ETTh1_epochs_250_seed_2024
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=6.691130842481341
Epoch #1: loss=3.2637717042650496
Epoch #2: loss=2.9946444034576416
Epoch #3: loss=2.4309584413255965
Epoch #4: loss=2.2799019813537598
Epoch #5: loss=2.16485173361642
Epoch #6: loss=2.111015694481986
Epoch #7: loss=2.0360060589654103
Epoch #8: loss=1.9964602845055717
Epoch #9: loss=1.9239321265901839
Epoch #10: loss=1.8227185010910034
Epoch #11: loss=1.7075089727129256
Epoch #12: loss=1.6944347279412406
Epoch #13: loss=1.6572520221982683
Epoch #14: loss=1.6150982550212316
Epoch #15: loss=1.5666189364024572
Epoch #16: loss=1.450874192374093
Epoch #17: loss=1.556429318019322
Epoch #18: loss=1.4177084139415197
Epoch #19: loss=1.3514889819281442
Epoch #20: loss=1.3087516682488578
Epoch #21: loss=1.288084558078221
Epoch #22: loss=1.3079831089292253
Epoch #23: loss=1.225748828479222
Epoch #24: loss=1.275945884840829
Epoch #25: loss=1.2396489041192191
Epoch #26: loss=1.1225282209260123
Epoch #27: loss=1.2030186312539237
Epoch #28: loss=1.0722994123186385
Epoch #29: loss=1.0242478847503662
Epoch #30: loss=1.1590605803898402
Epoch #31: loss=1.0939390574182783
Epoch #32: loss=1.074615546635219
Epoch #33: loss=1.0960114768573217
Epoch #34: loss=1.0046635355268205
Epoch #35: loss=0.9650508165359497
Epoch #36: loss=0.9716557434626988
Epoch #37: loss=0.9612220866339547
Epoch #38: loss=0.9408990911075047
Epoch #39: loss=0.8734541365078518
Epoch #40: loss=0.8906958188329425
Epoch #41: loss=0.8715737376894269
Epoch #42: loss=0.894363250051226
Epoch #43: loss=0.8728622283254351
Epoch #44: loss=0.7579752973147801
Epoch #45: loss=0.9012102910450527
Epoch #46: loss=0.7217339447566441
Epoch #47: loss=0.7982170156070164
Epoch #48: loss=0.7028869135039193
Epoch #49: loss=0.7784407734870911
Epoch #50: loss=0.6597586103848049
Epoch #51: loss=0.6970517720494952
Epoch #52: loss=0.6325680528368268
Epoch #53: loss=0.733232992036002
Epoch #54: loss=0.8288688233920506
Epoch #55: loss=0.8104558076177325
Epoch #56: loss=0.6755567363330296
Epoch #57: loss=0.6470430493354797
Epoch #58: loss=0.6325699005808149
Epoch #59: loss=0.577451058796474
Epoch #60: loss=0.6813292758805412
Epoch #61: loss=0.6347087408815112
Epoch #62: loss=0.6227357387542725
Epoch #63: loss=0.8743717414992196
Epoch #64: loss=0.6694935645375933
Epoch #65: loss=0.6520330054419381
Epoch #66: loss=0.6561663619109562
Epoch #67: loss=0.5759535559586116
Epoch #68: loss=0.5869458062308175
Epoch #69: loss=0.6777060627937317
Epoch #70: loss=0.611384608915874
Epoch #71: loss=0.5598637333938054
Epoch #72: loss=0.6863394720213754
Epoch #73: loss=0.5548672803810665
Epoch #74: loss=0.5943259128502437
Epoch #75: loss=0.522071395601545
Epoch #76: loss=0.5434407378946032
Epoch #77: loss=0.5161571374961308
Epoch #78: loss=0.6048612254006522
Epoch #79: loss=0.644120671919414
Epoch #80: loss=0.5715070281709943
Epoch #81: loss=0.5005155716623578
Epoch #82: loss=0.5664965297494616
Epoch #83: loss=0.49877896904945374
Epoch #84: loss=0.6352203020027706
Epoch #85: loss=0.5486298714365277
Epoch #86: loss=0.5017008313110897
Epoch #87: loss=0.48455617257526945
Epoch #88: loss=0.43333167689187185
Epoch #89: loss=0.4148355594703129
Epoch #90: loss=0.644990691116878
Epoch #91: loss=0.5159561719213214
Epoch #92: loss=0.5221445688179561
Epoch #93: loss=0.4608186057635716
Epoch #94: loss=0.5148081311157772
Epoch #95: loss=0.4447031446865627
Epoch #96: loss=0.46776539938790457
Epoch #97: loss=0.40088704228401184
Epoch #98: loss=0.5935598484107426
Epoch #99: loss=0.44842709388051716
Epoch #100: loss=0.5160869359970093
Epoch #101: loss=0.6021486989089421
Epoch #102: loss=0.6038035494940621
Epoch #103: loss=0.4506958850792476
Epoch #104: loss=0.4230337015220097
Epoch #105: loss=0.4682681219918387
Epoch #106: loss=0.602523671729224
Epoch #107: loss=0.44452359846660067
Epoch #108: loss=0.40543154733521597
Epoch #109: loss=0.4249487391539982
Epoch #110: loss=0.4289673055921282
Epoch #111: loss=0.4809700420924595
Epoch #112: loss=0.35406684023993357
Epoch #113: loss=0.38665744236537386
Epoch #114: loss=0.3911148224558149
Epoch #115: loss=0.4160172769001552
Epoch #116: loss=0.44617959856987
Epoch #117: loss=0.35571656056812834
Epoch #118: loss=0.4340083726814815
Epoch #119: loss=0.44517273562295095
Epoch #120: loss=0.3287248398576464
Epoch #121: loss=0.3443140046937125
Epoch #122: loss=0.44533389806747437
Epoch #123: loss=0.3559368018593107
Epoch #124: loss=0.332133276121957
Epoch #125: loss=0.38616827556065153
Epoch #126: loss=0.4211868260587965
Epoch #127: loss=0.37208211209092823
Epoch #128: loss=0.380661883524486
Epoch #129: loss=0.4235086441040039
Epoch #130: loss=0.3318824555192675
Epoch #131: loss=0.3069556653499603
Epoch #132: loss=0.3294935481888907
Epoch #133: loss=0.34498211315699984
Epoch #134: loss=0.32511380527700695
Epoch #135: loss=0.27112001180648804
Epoch #136: loss=0.2939735459429877
Epoch #137: loss=0.32916674869401114
Epoch #138: loss=0.2699329959494727
Epoch #139: loss=0.37113928369113375
Epoch #140: loss=0.2999060068811689
Epoch #141: loss=0.3086490205356053
Epoch #142: loss=0.2661688370364053
Epoch #143: loss=0.3922057364668165
Epoch #144: loss=0.4006969950028828
Epoch #145: loss=0.31209220205034527
Epoch #146: loss=0.30952154312814983
Epoch #147: loss=0.5304603278636932
Epoch #148: loss=0.273873046040535
Epoch #149: loss=0.31067212564604624
Epoch #150: loss=0.3235640142645155
Epoch #151: loss=0.37981714946883066
Epoch #152: loss=0.3770744332245418
Epoch #153: loss=0.5132565881524768
Epoch #154: loss=0.37180659600666593
Epoch #155: loss=0.32437328355652945
Epoch #156: loss=0.34570129215717316
Epoch #157: loss=0.32826939650944303
Epoch #158: loss=0.32773931537355694
Epoch #159: loss=0.322140457374709
Epoch #160: loss=0.27620766844068256
Epoch #161: loss=0.3466287979057857
Epoch #162: loss=0.30588127885546
Epoch #163: loss=0.3891511985233852
Epoch #164: loss=0.31714561368737904
Epoch #165: loss=0.2770673079150064
Epoch #166: loss=0.3538056037255696
Epoch #167: loss=0.49849471024104525
Epoch #168: loss=0.33983117980616434
Epoch #169: loss=0.3055932436670576
Epoch #170: loss=0.3688769574676241
Epoch #171: loss=0.30455765979630606
Epoch #172: loss=0.29132954137665884
Epoch #173: loss=0.2503705322742462
Epoch #174: loss=0.2696204675095422
Epoch #175: loss=0.2753221946103232
Epoch #176: loss=0.2575483811753137
Epoch #177: loss=0.2595493197441101
Epoch #178: loss=0.40020330250263214
Epoch #179: loss=0.3191846396241869
Epoch #180: loss=0.36351150487150463
Epoch #181: loss=0.24403572295393264
Epoch #182: loss=0.31689136794635225
Epoch #183: loss=0.27989336422511507
Epoch #184: loss=0.2802989184856415
Epoch #185: loss=0.2998018605368478
Epoch #186: loss=0.2785425952502659
Epoch #187: loss=0.35744208097457886
Epoch #188: loss=0.36803437982286724
Epoch #189: loss=0.28273640147277285
Epoch #190: loss=0.3216288004602705
Epoch #191: loss=0.28960860839911867
Epoch #192: loss=0.3359928067241396
Epoch #193: loss=0.2869159685713904
Epoch #194: loss=0.27411601160253796
Epoch #195: loss=0.3426336773804256
Epoch #196: loss=0.34992619710309164
Epoch #197: loss=0.32839655450412203
Epoch #198: loss=0.30244520945208414
Epoch #199: loss=0.36524192350251333
Epoch #200: loss=0.28402676965509144
Epoch #201: loss=0.31105444048132214
Epoch #202: loss=0.28739286959171295
Epoch #203: loss=0.3021543962614877
Epoch #204: loss=0.23235300396169936
Epoch #205: loss=0.23776864579745702
Epoch #206: loss=0.2823151307446616
Epoch #207: loss=0.227737518293517
Epoch #208: loss=0.2410054142986025
Epoch #209: loss=0.24907180028302328
Epoch #210: loss=0.27336971887520384
Epoch #211: loss=0.28688012276376995
Epoch #212: loss=0.2773046727691378
Epoch #213: loss=0.24912788612501963
Epoch #214: loss=0.2888269765036447
Epoch #215: loss=0.27958634921482634
Epoch #216: loss=0.2617938795260021
Epoch #217: loss=0.23775529435702733
Epoch #218: loss=0.2835069660629545
Epoch #219: loss=0.28693499735423494
Epoch #220: loss=0.35181129617350443
Epoch #221: loss=0.24877184203692845
Epoch #222: loss=0.23554558839116777
Epoch #223: loss=0.2794844912631171
Epoch #224: loss=0.259546018072537
Epoch #225: loss=0.37852264089243753
Epoch #226: loss=0.24586559193474905
Epoch #227: loss=0.30107014732701437
Epoch #228: loss=0.2031757469688143
Epoch #229: loss=0.30491067256246296
Epoch #230: loss=0.29385651860918316
Epoch #231: loss=0.4296386263200215
Epoch #232: loss=0.1965001310620989
Epoch #233: loss=0.2510994587625776
Epoch #234: loss=0.29098949900695253
Epoch #235: loss=0.2357934500489916
Epoch #236: loss=0.27913955279759
Epoch #237: loss=0.2130979129246303
Epoch #238: loss=0.2692599424294063
Epoch #239: loss=0.2118696527821677
Epoch #240: loss=0.229068466595241
Epoch #241: loss=0.2287216590983527
Epoch #242: loss=0.21277566254138947
Epoch #243: loss=0.1967629109110151
Epoch #244: loss=0.25955074599811007
Epoch #245: loss=0.23951050213405065
Epoch #246: loss=0.28578864463738035
Epoch #247: loss=0.23640950449875422
Epoch #248: loss=0.2500798638377871
Epoch #249: loss=0.27011618869645254

Training time: 0:02:22.370059

Finished.
n2one setting ETTh1 -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2024/model.pkl', muti_dataset='ETTh1', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.85281e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.74421e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5948039754903983, 'MAE': 0.5394114511818622}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2024/model.pkl', muti_dataset='ETTh1', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.79032e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.52887e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.27040986900104885, 'MAE': 0.3701216725006804}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2024/model.pkl', muti_dataset='ETTh1', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.14611e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.31951e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.67159e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.14611e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5040711653212194, 'MAE': 0.49141592537495205}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2024/model.pkl', muti_dataset='ETTh1', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.19146e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.30372e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.62007e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.17849805707937552, 'MAE': 0.29859830795096964}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2024/model.pkl', muti_dataset='ETTh1', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
Evaluation result: {'MSE': 0.2120310936479168, 'MAE': 0.31729110639974284}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2024/model.pkl', muti_dataset='ETTh1', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.21207e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.45805e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.21207e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8223104023483604, 'MAE': 0.46709655648929826}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2024/model.pkl', muti_dataset='ETTh1', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.19099e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.28278e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.60821e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.19099e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3586766362253388, 'MAE': 0.42174139610454753}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2024/model.pkl', muti_dataset='ETTh1', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.15362e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.2016e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.60505e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.15362e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.46282351832859076, 'MAE': 0.5146047814567773}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='ETTh2', random_seed=2024, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/ETTh2_epochs_250_seed_2024
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=6.272154126848493
Epoch #1: loss=3.239506108420236
Epoch #2: loss=2.873483317238944
Epoch #3: loss=2.48623183795384
Epoch #4: loss=2.26794239452907
Epoch #5: loss=2.108058384486607
Epoch #6: loss=2.109187960624695
Epoch #7: loss=1.9809247255325317
Epoch #8: loss=2.04053943497794
Epoch #9: loss=1.9151825223650252
Epoch #10: loss=1.7898627519607544
Epoch #11: loss=1.6796260901859827
Epoch #12: loss=1.6673680714198522
Epoch #13: loss=1.6638876370021276
Epoch #14: loss=1.5865689345768519
Epoch #15: loss=1.5357466084616525
Epoch #16: loss=1.44844388961792
Epoch #17: loss=1.5287508113043649
Epoch #18: loss=1.427425537790571
Epoch #19: loss=1.3426617554255895
Epoch #20: loss=1.28342832837786
Epoch #21: loss=1.29311546257564
Epoch #22: loss=1.3422959702355521
Epoch #23: loss=1.2553976433617728
Epoch #24: loss=1.2930891854422433
Epoch #25: loss=1.1895037719181605
Epoch #26: loss=1.1093204362051827
Epoch #27: loss=1.1772757428033012
Epoch #28: loss=1.0705862215587072
Epoch #29: loss=1.0185981137411935
Epoch #30: loss=1.1309319308825903
Epoch #31: loss=1.0902785999434335
Epoch #32: loss=1.0824952380997794
Epoch #33: loss=1.102039200919015
Epoch #34: loss=0.9356680597577777
Epoch #35: loss=0.9575081297329494
Epoch #36: loss=0.9285492982183184
Epoch #37: loss=0.978030800819397
Epoch #38: loss=0.9444783329963684
Epoch #39: loss=0.8638770750590733
Epoch #40: loss=0.8965286101613726
Epoch #41: loss=0.9079175165721348
Epoch #42: loss=0.8610460502760751
Epoch #43: loss=0.8717623353004456
Epoch #44: loss=0.8001459155763898
Epoch #45: loss=0.8700981395585197
Epoch #46: loss=0.7647131170545306
Epoch #47: loss=0.7953810180936541
Epoch #48: loss=0.7582697016852242
Epoch #49: loss=0.7849869642938886
Epoch #50: loss=0.7208895853587559
Epoch #51: loss=0.7011090772492545
Epoch #52: loss=0.6527210133416312
Epoch #53: loss=0.768596921648298
Epoch #54: loss=0.866014872278486
Epoch #55: loss=0.7790453348840986
Epoch #56: loss=0.7094458937644958
Epoch #57: loss=0.6986280679702759
Epoch #58: loss=0.6561341626303536
Epoch #59: loss=0.5863135371889386
Epoch #60: loss=0.7396892053740365
Epoch #61: loss=0.605099869625909
Epoch #62: loss=0.6514778562954494
Epoch #63: loss=0.8900881324495588
Epoch #64: loss=0.6717618703842163
Epoch #65: loss=0.6749659095491681
Epoch #66: loss=0.6044318718569619
Epoch #67: loss=0.5345521526677268
Epoch #68: loss=0.5715383461543492
Epoch #69: loss=0.6298205852508545
Epoch #70: loss=0.6239645864282336
Epoch #71: loss=0.5447323407445636
Epoch #72: loss=0.6871623865195683
Epoch #73: loss=0.6189088991710118
Epoch #74: loss=0.6375500389507839
Epoch #75: loss=0.5220345471586499
Epoch #76: loss=0.5226424719606128
Epoch #77: loss=0.4846001522881644
Epoch #78: loss=0.571766231741224
Epoch #79: loss=0.6242133123534066
Epoch #80: loss=0.6171268352440425
Epoch #81: loss=0.4348308912345341
Epoch #82: loss=0.5560595265456608
Epoch #83: loss=0.47218988622937885
Epoch #84: loss=0.6056784178529467
Epoch #85: loss=0.5426303275993892
Epoch #86: loss=0.5282531891550336
Epoch #87: loss=0.4614185265132359
Epoch #88: loss=0.39307245186397005
Epoch #89: loss=0.38248223066329956
Epoch #90: loss=0.6822697307382312
Epoch #91: loss=0.47639874049595426
Epoch #92: loss=0.5353042568479266
Epoch #93: loss=0.48522408093724934
Epoch #94: loss=0.5212167160851615
Epoch #95: loss=0.4371148943901062
Epoch #96: loss=0.42839873688561575
Epoch #97: loss=0.3731899857521057
Epoch #98: loss=0.5393241729055133
Epoch #99: loss=0.4292558431625366
Epoch #100: loss=0.42273453729493277
Epoch #101: loss=0.6460035230432238
Epoch #102: loss=0.5730215609073639
Epoch #103: loss=0.4072662762233189
Epoch #104: loss=0.42729190417698454
Epoch #105: loss=0.4976007895810263
Epoch #106: loss=0.5437864065170288
Epoch #107: loss=0.43801526938165936
Epoch #108: loss=0.4108175720487322
Epoch #109: loss=0.4064811680998121
Epoch #110: loss=0.4112063688891275
Epoch #111: loss=0.4653772328581129
Epoch #112: loss=0.3321063050201961
Epoch #113: loss=0.36166450807026457
Epoch #114: loss=0.33223958739212583
Epoch #115: loss=0.4058509724480765
Epoch #116: loss=0.39500061103275846
Epoch #117: loss=0.3288457180772509
Epoch #118: loss=0.3855897911957332
Epoch #119: loss=0.48948667304856436
Epoch #120: loss=0.37222473110471455
Epoch #121: loss=0.36522410597120014
Epoch #122: loss=0.4261110382420676
Epoch #123: loss=0.3242840085710798
Epoch #124: loss=0.3553159832954407
Epoch #125: loss=0.39011710456439425
Epoch #126: loss=0.3992432653903961
Epoch #127: loss=0.3441186419555119
Epoch #128: loss=0.38733525361333576
Epoch #129: loss=0.40234086768967764
Epoch #130: loss=0.3377452620438167
Epoch #131: loss=0.28802768673215595
Epoch #132: loss=0.2968366337674005
Epoch #133: loss=0.32989061730248587
Epoch #134: loss=0.28289094993046354
Epoch #135: loss=0.2652538929666792
Epoch #136: loss=0.2672144834484373
Epoch #137: loss=0.31734820561749594
Epoch #138: loss=0.2464628985949925
Epoch #139: loss=0.34710846841335297
Epoch #140: loss=0.2753723817212241
Epoch #141: loss=0.31403820855276926
Epoch #142: loss=0.27974766918591093
Epoch #143: loss=0.41134439621652874
Epoch #144: loss=0.39295119260038647
Epoch #145: loss=0.2930136110101427
Epoch #146: loss=0.27675964151109966
Epoch #147: loss=0.5266685656138829
Epoch #148: loss=0.27932841224329813
Epoch #149: loss=0.2890817331416266
Epoch #150: loss=0.2892233580350876
Epoch #151: loss=0.3282986751624516
Epoch #152: loss=0.3159205743244716
Epoch #153: loss=0.49703974383217947
Epoch #154: loss=0.35133732642446247
Epoch #155: loss=0.3405415969235556
Epoch #156: loss=0.32197736842291697
Epoch #157: loss=0.29667473477976664
Epoch #158: loss=0.30451064663273947
Epoch #159: loss=0.3258440388100488
Epoch #160: loss=0.25574360362121035
Epoch #161: loss=0.32240124472549986
Epoch #162: loss=0.23759598178522928
Epoch #163: loss=0.34574430755206514
Epoch #164: loss=0.25996454272951397
Epoch #165: loss=0.260707642350878
Epoch #166: loss=0.31815303223473684
Epoch #167: loss=0.5411538886172431
Epoch #168: loss=0.31800480825560434
Epoch #169: loss=0.3284609615802765
Epoch #170: loss=0.3401107255901609
Epoch #171: loss=0.33392477461269926
Epoch #172: loss=0.2972718732697623
Epoch #173: loss=0.2593889044863837
Epoch #174: loss=0.2734022204365049
Epoch #175: loss=0.2640064081975392
Epoch #176: loss=0.2923578747681209
Epoch #177: loss=0.27857725747994017
Epoch #178: loss=0.4085639842918941
Epoch #179: loss=0.3252021351030895
Epoch #180: loss=0.36582396924495697
Epoch #181: loss=0.27383739394801004
Epoch #182: loss=0.32711721318108694
Epoch #183: loss=0.26948365569114685
Epoch #184: loss=0.2945422636611121
Epoch #185: loss=0.33609712762492044
Epoch #186: loss=0.2635058696780886
Epoch #187: loss=0.3580391364438193
Epoch #188: loss=0.3846127135413034
Epoch #189: loss=0.2563941052981785
Epoch #190: loss=0.3223773219755718
Epoch #191: loss=0.31043166135038647
Epoch #192: loss=0.3197952743087496
Epoch #193: loss=0.2864274020705904
Epoch #194: loss=0.3020304654325758
Epoch #195: loss=0.3558066040277481
Epoch #196: loss=0.38587661939007895
Epoch #197: loss=0.27223499545029234
Epoch #198: loss=0.27589596807956696
Epoch #199: loss=0.3131722552435739
Epoch #200: loss=0.2553140882934843
Epoch #201: loss=0.290420053260667
Epoch #202: loss=0.2736507462603705
Epoch #203: loss=0.2674798560994012
Epoch #204: loss=0.24138230511120387
Epoch #205: loss=0.2138329063143049
Epoch #206: loss=0.34571829438209534
Epoch #207: loss=0.2335627738918577
Epoch #208: loss=0.261622069137437
Epoch #209: loss=0.26803588441440035
Epoch #210: loss=0.25395393797329496
Epoch #211: loss=0.25427999241011484
Epoch #212: loss=0.2563980945519039
Epoch #213: loss=0.22865352034568787
Epoch #214: loss=0.22741808422974177
Epoch #215: loss=0.22971873623984201
Epoch #216: loss=0.25431297932352337
Epoch #217: loss=0.173317945429257
Epoch #218: loss=0.26469559967517853
Epoch #219: loss=0.23001820061888015
Epoch #220: loss=0.28093351423740387
Epoch #221: loss=0.221745422908238
Epoch #222: loss=0.21540021470614842
Epoch #223: loss=0.2483633884361812
Epoch #224: loss=0.24329316828932082
Epoch #225: loss=0.3789714702538082
Epoch #226: loss=0.2269110871212823
Epoch #227: loss=0.3111876164163862
Epoch #228: loss=0.20394553244113922
Epoch #229: loss=0.30699467233249117
Epoch #230: loss=0.3121344872883388
Epoch #231: loss=0.42624853764261517
Epoch #232: loss=0.22009338864258357
Epoch #233: loss=0.25277320614882876
Epoch #234: loss=0.2682992730821882
Epoch #235: loss=0.21522386584963119
Epoch #236: loss=0.24541727772780828
Epoch #237: loss=0.2023397194487708
Epoch #238: loss=0.24585634682859694
Epoch #239: loss=0.19388932202543532
Epoch #240: loss=0.20917839024748122
Epoch #241: loss=0.22520863584109715
Epoch #242: loss=0.18879536858626775
Epoch #243: loss=0.19036426714488439
Epoch #244: loss=0.23762898998601095
Epoch #245: loss=0.24380765216691153
Epoch #246: loss=0.28929726779460907
Epoch #247: loss=0.2232610923903329
Epoch #248: loss=0.22837391069957189
Epoch #249: loss=0.2878846526145935

Training time: 0:02:25.007475

Finished.
n2one setting ETTh2 -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2024/model.pkl', muti_dataset='ETTh2', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.85932e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.55527e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.6061794319613271, 'MAE': 0.5471353250293167}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2024/model.pkl', muti_dataset='ETTh2', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.7866e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.40557e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.2797346175018715, 'MAE': 0.3764958757339029}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2024/model.pkl', muti_dataset='ETTh2', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.13293e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.26788e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.38e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.13293e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.505866481149248, 'MAE': 0.4924165951028212}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2024/model.pkl', muti_dataset='ETTh2', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.12642e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.27588e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.32259e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.18078044425609946, 'MAE': 0.3004184312331962}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2024/model.pkl', muti_dataset='ETTh2', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.83174e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.20435246006294042, 'MAE': 0.31387198558406754}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2024/model.pkl', muti_dataset='ETTh2', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.18477e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.27641e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.68427e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.18477e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8215712552424781, 'MAE': 0.4674560622444043}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2024/model.pkl', muti_dataset='ETTh2', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.11061e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.19771e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.45586e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.11061e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.363862162528043, 'MAE': 0.4270618628838978}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2024/model.pkl', muti_dataset='ETTh2', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.14656e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.22254e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.3351e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.14656e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.526671507269464, 'MAE': 0.5595590658000349}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='ETTm1', random_seed=2024, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/ETTm1_epochs_250_seed_2024
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=6.720921212976629
Epoch #1: loss=3.6284599520943384
Epoch #2: loss=2.809401273727417
Epoch #3: loss=2.5113904692909936
Epoch #4: loss=2.332607399333607
Epoch #5: loss=2.1631778370250356
Epoch #6: loss=2.0350931774486196
Epoch #7: loss=1.9151312979784878
Epoch #8: loss=1.8343326937068591
Epoch #9: loss=1.7353013753890991
Epoch #10: loss=1.6339436335997148
Epoch #11: loss=1.6468732031908901
Epoch #12: loss=1.583519231189381
Epoch #13: loss=1.5698547580025413
Epoch #14: loss=1.5059162378311157
Epoch #15: loss=1.3294217153029009
Epoch #16: loss=1.3246915123679421
Epoch #17: loss=1.2653951428153298
Epoch #18: loss=1.3912208405407993
Epoch #19: loss=1.1314070658250288
Epoch #20: loss=1.1340011087330906
Epoch #21: loss=1.173729414289648
Epoch #22: loss=1.0995639074932446
Epoch #23: loss=1.0376689108935269
Epoch #24: loss=1.0286483547904275
Epoch #25: loss=0.9890321601520885
Epoch #26: loss=1.0936325842683965
Epoch #27: loss=1.1254106814211065
Epoch #28: loss=0.9193081855773926
Epoch #29: loss=0.9345165599476207
Epoch #30: loss=0.9666373946449973
Epoch #31: loss=0.9213351011276245
Epoch #32: loss=0.9008057767694647
Epoch #33: loss=0.7473442717032
Epoch #34: loss=0.8604718500917609
Epoch #35: loss=0.8248141407966614
Epoch #36: loss=0.7120520689270713
Epoch #37: loss=0.7344960895451632
Epoch #38: loss=0.8919983343644575
Epoch #39: loss=0.7551714236086066
Epoch #40: loss=0.6941079768267545
Epoch #41: loss=0.6476220488548279
Epoch #42: loss=0.6126397523013029
Epoch #43: loss=0.6581808707930825
Epoch #44: loss=0.7051020752299916
Epoch #45: loss=0.631765912879597
Epoch #46: loss=0.6587500490925529
Epoch #47: loss=0.6634559848091819
Epoch #48: loss=0.6348358988761902
Epoch #49: loss=0.6025172688744285
Epoch #50: loss=0.5896303166042675
Epoch #51: loss=0.6064548925919966
Epoch #52: loss=0.54550116983327
Epoch #53: loss=0.5722861371257089
Epoch #54: loss=0.6359981298446655
Epoch #55: loss=0.5297421677546068
Epoch #56: loss=0.6613588333129883
Epoch #57: loss=0.606122146953236
Epoch #58: loss=0.6387183395299044
Epoch #59: loss=0.5584030097181146
Epoch #60: loss=0.5525764497843656
Epoch #61: loss=0.5992934947664087
Epoch #62: loss=0.5739629051902078
Epoch #63: loss=0.6299053024161946
Epoch #64: loss=0.4996887282891707
Epoch #65: loss=0.5565448105335236
Epoch #66: loss=0.5817819996313616
Epoch #67: loss=0.4703061499378898
Epoch #68: loss=0.6365145526149056
Epoch #69: loss=0.46976431662386114
Epoch #70: loss=0.4808753457936374
Epoch #71: loss=0.42244343866001477
Epoch #72: loss=0.5014829391782935
Epoch #73: loss=0.4286080436273055
Epoch #74: loss=0.396891098130833
Epoch #75: loss=0.4609811007976532
Epoch #76: loss=0.40875048529018054
Epoch #77: loss=0.398413747549057
Epoch #78: loss=0.3766151395711032
Epoch #79: loss=0.37723246216773987
Epoch #80: loss=0.38678241859782825
Epoch #81: loss=0.36938609318299725
Epoch #82: loss=0.3471042974428697
Epoch #83: loss=0.39886910807002673
Epoch #84: loss=0.432266655293378
Epoch #85: loss=0.8598296561024406
Epoch #86: loss=0.6242178786884655
Epoch #87: loss=0.6555579602718353
Epoch #88: loss=0.5588168447667902
Epoch #89: loss=0.41605892506512726
Epoch #90: loss=0.415933451869271
Epoch #91: loss=0.3716098679737611
Epoch #92: loss=0.508822042833675
Epoch #93: loss=0.37407404997132043
Epoch #94: loss=0.4108130146156658
Epoch #95: loss=0.3377106636762619
Epoch #96: loss=0.4485009976408698
Epoch #97: loss=0.5057066949931058
Epoch #98: loss=0.41251601685177197
Epoch #99: loss=0.33644119988788257
Epoch #100: loss=0.41373764791271905
Epoch #101: loss=0.3259259381077506
Epoch #102: loss=0.35828778689557855
Epoch #103: loss=0.30879682167009875
Epoch #104: loss=0.3648951717398383
Epoch #105: loss=0.3882841549136422
Epoch #106: loss=0.2802365232597698
Epoch #107: loss=0.31405220383947546
Epoch #108: loss=0.2582099288702011
Epoch #109: loss=0.26337856460701337
Epoch #110: loss=0.4912239231846549
Epoch #111: loss=0.4349016100168228
Epoch #112: loss=0.4924932501532815
Epoch #113: loss=0.5023085908456282
Epoch #114: loss=0.3700113729997115
Epoch #115: loss=0.3423629118637605
Epoch #116: loss=0.29956791482188483
Epoch #117: loss=0.27097161520611157
Epoch #118: loss=0.27073153582486237
Epoch #119: loss=0.22206122902306644
Epoch #120: loss=0.26711872761899774
Epoch #121: loss=0.18132564290003342
Epoch #122: loss=0.36735043810172513
Epoch #123: loss=0.23206173967231403
Epoch #124: loss=0.2153935730457306
Epoch #125: loss=0.20538939400152725
Epoch #126: loss=0.1978307149626992
Epoch #127: loss=0.1748307929797606
Epoch #128: loss=0.18953539634292776
Epoch #129: loss=0.18467005477710205
Epoch #130: loss=0.17129117250442505
Epoch #131: loss=0.13073877380652862
Epoch #132: loss=0.28880506279793655
Epoch #133: loss=0.14438225735317578
Epoch #134: loss=0.30391520803624933
Epoch #135: loss=0.27858501266349445
Epoch #136: loss=0.2857016413049264
Epoch #137: loss=0.19569677385416898
Epoch #138: loss=0.21696029603481293
Epoch #139: loss=0.1631105521863157
Epoch #140: loss=0.2220842628316446
Epoch #141: loss=0.17070030691948804
Epoch #142: loss=0.21325238997286017
Epoch #143: loss=0.17109403014183044
Epoch #144: loss=0.17440736429257828
Epoch #145: loss=0.2402832494540648
Epoch #146: loss=0.1522841602563858
Epoch #147: loss=0.14896134490316565
Epoch #148: loss=0.18880734592676163
Epoch #149: loss=0.16968054527586157
Epoch #150: loss=0.12886937301267276
Epoch #151: loss=0.12058534202250568
Epoch #152: loss=0.1325028735128316
Epoch #153: loss=0.26942038807001983
Epoch #154: loss=0.3219245428388769
Epoch #155: loss=0.16966619071635333
Epoch #156: loss=0.19976161217147653
Epoch #157: loss=0.16515889831564642
Epoch #158: loss=0.23450044881213794
Epoch #159: loss=0.2504952996969223
Epoch #160: loss=0.13456665724515915
Epoch #161: loss=0.12251381846991452
Epoch #162: loss=0.12792426686395297
Epoch #163: loss=0.2739625640890815
Epoch #164: loss=0.2485428059642965
Epoch #165: loss=0.1950383186340332
Epoch #166: loss=0.21926293522119522
Epoch #167: loss=0.16653732616793027
Epoch #168: loss=0.14373521574518897
Epoch #169: loss=0.1457918713038618
Epoch #170: loss=0.25704735788432037
Epoch #171: loss=0.13386450978842648
Epoch #172: loss=0.13774598931724374
Epoch #173: loss=0.1575706431811506
Epoch #174: loss=0.25347407162189484
Epoch #175: loss=0.12090436911041086
Epoch #176: loss=0.1251637234606526
Epoch #177: loss=0.12845137952403587
Epoch #178: loss=0.1216561919586225
Epoch #179: loss=0.21061425351283766
Epoch #180: loss=0.10647191649133508
Epoch #181: loss=0.436655769971284
Epoch #182: loss=0.16935328394174576
Epoch #183: loss=0.26127505844289606
Epoch #184: loss=0.18784891881726004
Epoch #185: loss=0.13425242020325226
Epoch #186: loss=0.11413594436916438
Epoch #187: loss=0.10355746102603999
Epoch #188: loss=0.14568354053930802
Epoch #189: loss=0.10526070405136455
Epoch #190: loss=0.12272626127709042
Epoch #191: loss=0.12362905557860028
Epoch #192: loss=0.3002474700862711
Epoch #193: loss=0.1099264957010746
Epoch #194: loss=0.20027761804786595
Epoch #195: loss=0.10577736625617201
Epoch #196: loss=0.22765293175523932
Epoch #197: loss=0.16372564231807535
Epoch #198: loss=0.15354842692613602
Epoch #199: loss=0.2026644078168002
Epoch #200: loss=0.08755414932966232
Epoch #201: loss=0.16823357411406256
Epoch #202: loss=0.11454687098210509
Epoch #203: loss=0.15087675811214882
Epoch #204: loss=0.10227820006283847
Epoch #205: loss=0.13047303767366844
Epoch #206: loss=0.09060607918284157
Epoch #207: loss=0.08939864046194336
Epoch #208: loss=0.10558179698207161
Epoch #209: loss=0.0722681734372269
Epoch #210: loss=0.082922467792576
Epoch #211: loss=0.0656912973658605
Epoch #212: loss=0.4966313608668067
Epoch #213: loss=0.2507519600066272
Epoch #214: loss=0.2469222674315626
Epoch #215: loss=0.10965604064139453
Epoch #216: loss=0.10152315653183243
Epoch #217: loss=0.15259467166933147
Epoch #218: loss=0.15610504793849858
Epoch #219: loss=0.14725570008158684
Epoch #220: loss=0.0706474245949225
Epoch #221: loss=0.09912020950154825
Epoch #222: loss=0.12015158141201193
Epoch #223: loss=0.08298954943364317
Epoch #224: loss=0.09452332183718681
Epoch #225: loss=0.23009656437418677
Epoch #226: loss=0.09002256833694199
Epoch #227: loss=0.09278854761611331
Epoch #228: loss=0.07070872848006812
Epoch #229: loss=0.1170856583524834
Epoch #230: loss=0.08646337857300584
Epoch #231: loss=0.09423459422859279
Epoch #232: loss=0.09103193438865921
Epoch #233: loss=0.05285040526227518
Epoch #234: loss=0.07347412102601746
Epoch #235: loss=0.08193879151208834
Epoch #236: loss=0.08821989291093567
Epoch #237: loss=0.08110652880912478
Epoch #238: loss=0.14715471254153686
Epoch #239: loss=0.1092857921665365
Epoch #240: loss=0.15107793259349736
Epoch #241: loss=0.1605665683746338
Epoch #242: loss=0.08532584864984859
Epoch #243: loss=0.09210848571224646
Epoch #244: loss=0.10130630213428628
Epoch #245: loss=0.07638110203499143
Epoch #246: loss=0.21761898628690027
Epoch #247: loss=0.14115557718006047
Epoch #248: loss=0.08931360224431212
Epoch #249: loss=0.059536535292863846

Training time: 0:04:31.938437

Finished.
n2one setting ETTm1 -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2024/model.pkl', muti_dataset='ETTm1', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.97094e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.88554e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5945844732133645, 'MAE': 0.5398907558286568}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2024/model.pkl', muti_dataset='ETTm1', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.93894e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.73798e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.2701623894433495, 'MAE': 0.36880400044043266}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2024/model.pkl', muti_dataset='ETTm1', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.67455e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.88525e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.67455e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.4880946125369635, 'MAE': 0.48244273258218}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2024/model.pkl', muti_dataset='ETTm1', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.55949e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.04158e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.04158e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.18283842297785308, 'MAE': 0.30300321152544135}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2024/model.pkl', muti_dataset='ETTm1', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.16464e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.2759710890035258, 'MAE': 0.3543352761054801}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2024/model.pkl', muti_dataset='ETTm1', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.45215e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.60327e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.45215e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8085489193004961, 'MAE': 0.46056539359361265}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2024/model.pkl', muti_dataset='ETTm1', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.45953e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.60958e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.45953e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3546592736550267, 'MAE': 0.418090997034709}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2024/model.pkl', muti_dataset='ETTm1', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.3611e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.76485e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.3611e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8190874950390725, 'MAE': 0.7081941322823326}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='ETTm2', random_seed=2024, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/ETTm2_epochs_250_seed_2024
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=7.517538677562367
Epoch #1: loss=3.9330210468985816
Epoch #2: loss=3.009602568366311
Epoch #3: loss=2.6018961776386607
Epoch #4: loss=2.4280289953405205
Epoch #5: loss=2.2879433198408647
Epoch #6: loss=2.1409771225669165
Epoch #7: loss=2.0290775190700185
Epoch #8: loss=1.9687224518169055
Epoch #9: loss=1.8455809571526267
Epoch #10: loss=1.7484484910964966
Epoch #11: loss=1.721086859703064
Epoch #12: loss=1.6525809114629573
Epoch #13: loss=1.656546029177579
Epoch #14: loss=1.5622225132855503
Epoch #15: loss=1.3928616480393843
Epoch #16: loss=1.3785134012048894
Epoch #17: loss=1.3368294130672107
Epoch #18: loss=1.4513584808869795
Epoch #19: loss=1.2086965062401511
Epoch #20: loss=1.2142820249904285
Epoch #21: loss=1.2662277546795933
Epoch #22: loss=1.205061305652965
Epoch #23: loss=1.1244582750580527
Epoch #24: loss=1.0905725305730647
Epoch #25: loss=1.0802215229381213
Epoch #26: loss=1.1741328889673406
Epoch #27: loss=1.2127245176922192
Epoch #28: loss=1.007144266908819
Epoch #29: loss=1.0588511553677646
Epoch #30: loss=1.0612492182038047
Epoch #31: loss=1.0041235197674145
Epoch #32: loss=0.9440712657841769
Epoch #33: loss=0.8238860043612394
Epoch #34: loss=0.9277502298355103
Epoch #35: loss=0.8680813691832803
Epoch #36: loss=0.7588686943054199
Epoch #37: loss=0.771106400273063
Epoch #38: loss=0.9403587959029458
Epoch #39: loss=0.7941630699417808
Epoch #40: loss=0.7402755943211642
Epoch #41: loss=0.686621676791798
Epoch #42: loss=0.6374204212969
Epoch #43: loss=0.7302046905864369
Epoch #44: loss=0.7460572990504178
Epoch #45: loss=0.7179606069218029
Epoch #46: loss=0.6972708918831565
Epoch #47: loss=0.7063112529841337
Epoch #48: loss=0.675797473300587
Epoch #49: loss=0.6486818980086934
Epoch #50: loss=0.6373023444956
Epoch #51: loss=0.6481509886004708
Epoch #52: loss=0.5738414634357799
Epoch #53: loss=0.6088772361928766
Epoch #54: loss=0.682507108558308
Epoch #55: loss=0.5822443311864679
Epoch #56: loss=0.6840948543765328
Epoch #57: loss=0.629910637031902
Epoch #58: loss=0.6967666040767323
Epoch #59: loss=0.6049758900295604
Epoch #60: loss=0.5979831923138011
Epoch #61: loss=0.6233133456923745
Epoch #62: loss=0.5938815041021868
Epoch #63: loss=0.6471348702907562
Epoch #64: loss=0.5322219241749157
Epoch #65: loss=0.5771650184284557
Epoch #66: loss=0.6054613183845173
Epoch #67: loss=0.48283363472331653
Epoch #68: loss=0.6691873534159227
Epoch #69: loss=0.5106786381114613
Epoch #70: loss=0.5187655931169336
Epoch #71: loss=0.46868758309971204
Epoch #72: loss=0.5482019213112918
Epoch #73: loss=0.4555976797233928
Epoch #74: loss=0.435968352989717
Epoch #75: loss=0.5230517360297117
Epoch #76: loss=0.4470342072573575
Epoch #77: loss=0.45538304339755664
Epoch #78: loss=0.4009190228852359
Epoch #79: loss=0.4126541885462674
Epoch #80: loss=0.4554694945161993
Epoch #81: loss=0.43333987214348535
Epoch #82: loss=0.40740200064399024
Epoch #83: loss=0.4600190249356357
Epoch #84: loss=0.5084280344572935
Epoch #85: loss=0.8263285593553023
Epoch #86: loss=0.6081025844270532
Epoch #87: loss=0.597760799256238
Epoch #88: loss=0.5130330351265994
Epoch #89: loss=0.4273667714812539
Epoch #90: loss=0.4066080152988434
Epoch #91: loss=0.3981419422409751
Epoch #92: loss=0.5548946749080311
Epoch #93: loss=0.406949289820411
Epoch #94: loss=0.45540848103436554
Epoch #95: loss=0.3694791956381364
Epoch #96: loss=0.4689021950418299
Epoch #97: loss=0.5205470621585846
Epoch #98: loss=0.4650375815955075
Epoch #99: loss=0.36761957677927887
Epoch #100: loss=0.43726837635040283
Epoch #101: loss=0.3430302143096924
Epoch #102: loss=0.38670612465251575
Epoch #103: loss=0.35701208087531006
Epoch #104: loss=0.4004874988035722
Epoch #105: loss=0.4346294105052948
Epoch #106: loss=0.3252613219347867
Epoch #107: loss=0.33928080851381476
Epoch #108: loss=0.3224132860248739
Epoch #109: loss=0.2941312789916992
Epoch #110: loss=0.4122587875886397
Epoch #111: loss=0.337843736464327
Epoch #112: loss=0.33207569880919025
Epoch #113: loss=0.4669634076682004
Epoch #114: loss=0.3608137531714006
Epoch #115: loss=0.39104006913575257
Epoch #116: loss=0.3397086194970391
Epoch #117: loss=0.3029424087567763
Epoch #118: loss=0.3102054121819409
Epoch #119: loss=0.24954843114722858
Epoch #120: loss=0.2932163138281215
Epoch #121: loss=0.23500431125814264
Epoch #122: loss=0.42921730469573627
Epoch #123: loss=0.27189189195632935
Epoch #124: loss=0.24057058719071475
Epoch #125: loss=0.23106182569807227
Epoch #126: loss=0.22978653826496817
Epoch #127: loss=0.21147974919189105
Epoch #128: loss=0.21419306641275232
Epoch #129: loss=0.23130654882300983
Epoch #130: loss=0.2045076475902037
Epoch #131: loss=0.1847302480177446
Epoch #132: loss=0.37516486644744873
Epoch #133: loss=0.22132755815982819
Epoch #134: loss=0.39455214684659784
Epoch #135: loss=0.33673016456040467
Epoch #136: loss=0.34907970374280756
Epoch #137: loss=0.21794429285959763
Epoch #138: loss=0.2290341081944379
Epoch #139: loss=0.19123510203578256
Epoch #140: loss=0.23479989577423444
Epoch #141: loss=0.19583430073478006
Epoch #142: loss=0.237913194027814
Epoch #143: loss=0.18844314800067383
Epoch #144: loss=0.21707965027202258
Epoch #145: loss=0.30538646199486474
Epoch #146: loss=0.18753983012654565
Epoch #147: loss=0.17415820129893042
Epoch #148: loss=0.2422857772220265
Epoch #149: loss=0.20662784237753262
Epoch #150: loss=0.15584126182577826
Epoch #151: loss=0.18532295457341455
Epoch #152: loss=0.17772187021645633
Epoch #153: loss=0.34702668339014053
Epoch #154: loss=0.3605759638276967
Epoch #155: loss=0.1969180709936402
Epoch #156: loss=0.2425107495351271
Epoch #157: loss=0.22944862666455182
Epoch #158: loss=0.28383965451609006
Epoch #159: loss=0.27703559601848776
Epoch #160: loss=0.15656067634170706
Epoch #161: loss=0.155323634093458
Epoch #162: loss=0.1542591987685724
Epoch #163: loss=0.28131488033316354
Epoch #164: loss=0.22210737724195828
Epoch #165: loss=0.1696374687281522
Epoch #166: loss=0.22250552814115176
Epoch #167: loss=0.19076791134747592
Epoch #168: loss=0.14623910866000436
Epoch #169: loss=0.14412235807288776
Epoch #170: loss=0.2414522353898395
Epoch #171: loss=0.1256275624036789
Epoch #172: loss=0.12667023661461743
Epoch #173: loss=0.1727219596505165
Epoch #174: loss=0.29121994836763904
Epoch #175: loss=0.15962222692641345
Epoch #176: loss=0.1320392828096043
Epoch #177: loss=0.14103086868470366
Epoch #178: loss=0.14030484313314612
Epoch #179: loss=0.24791836230592293
Epoch #180: loss=0.15135180069641632
Epoch #181: loss=0.46676898205822165
Epoch #182: loss=0.15831405398520557
Epoch #183: loss=0.28264074433933606
Epoch #184: loss=0.21415875852108002
Epoch #185: loss=0.15221402523192493
Epoch #186: loss=0.14403723654421893
Epoch #187: loss=0.12739943171089346
Epoch #188: loss=0.13917288759892638
Epoch #189: loss=0.11328397047790614
Epoch #190: loss=0.1120623228224841
Epoch #191: loss=0.11162832040678371
Epoch #192: loss=0.3156006552956321
Epoch #193: loss=0.11018538475036621
Epoch #194: loss=0.20622542263431984
Epoch #195: loss=0.12257568301125006
Epoch #196: loss=0.21761920912699265
Epoch #197: loss=0.1512791162187403
Epoch #198: loss=0.15064320408485152
Epoch #199: loss=0.2044242231005972
Epoch #200: loss=0.1337926916100762
Epoch #201: loss=0.2098473540761254
Epoch #202: loss=0.13182396441698074
Epoch #203: loss=0.15605111623352225
Epoch #204: loss=0.10747085613283244
Epoch #205: loss=0.13737047599120575
Epoch #206: loss=0.10058162090453235
Epoch #207: loss=0.11704998124729503
Epoch #208: loss=0.11041146686131303
Epoch #209: loss=0.06851119954477657
Epoch #210: loss=0.08842135017568414
Epoch #211: loss=0.08006487481973389
Epoch #212: loss=0.5038438090546564
Epoch #213: loss=0.2657574022358114
Epoch #214: loss=0.26890113204717636
Epoch #215: loss=0.13318029046058655
Epoch #216: loss=0.12399059974334457
Epoch #217: loss=0.1792624071240425
Epoch #218: loss=0.17410536245866257
Epoch #219: loss=0.16258993202989752
Epoch #220: loss=0.09970809654756026
Epoch #221: loss=0.11115785959092053
Epoch #222: loss=0.13329486515034328
Epoch #223: loss=0.10311946746977893
Epoch #224: loss=0.1014918593520468
Epoch #225: loss=0.19803316180001607
Epoch #226: loss=0.10345167429609732
Epoch #227: loss=0.09414044090292671
Epoch #228: loss=0.06548753109845248
Epoch #229: loss=0.11538495699113066
Epoch #230: loss=0.0747674781490456
Epoch #231: loss=0.09019762311469424
Epoch #232: loss=0.09767727604643865
Epoch #233: loss=0.07197493128478527
Epoch #234: loss=0.06900180266662077
Epoch #235: loss=0.0900296535004269
Epoch #236: loss=0.08543681116266684
Epoch #237: loss=0.0631354380060326
Epoch #238: loss=0.12995050898329777
Epoch #239: loss=0.11001630703156645
Epoch #240: loss=0.14614825509488583
Epoch #241: loss=0.14462581378492442
Epoch #242: loss=0.09410893205891956
Epoch #243: loss=0.10481214828111908
Epoch #244: loss=0.12834004685282707
Epoch #245: loss=0.12072264944965189
Epoch #246: loss=0.277924234894189
Epoch #247: loss=0.1993327648802237
Epoch #248: loss=0.13791797106916254
Epoch #249: loss=0.12454558705741708

Training time: 0:04:00.712191

Finished.
n2one setting ETTm2 -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2024/model.pkl', muti_dataset='ETTm2', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.96047e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.12852e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.96047e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5882203298277204, 'MAE': 0.5380482397837055}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2024/model.pkl', muti_dataset='ETTm2', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.95854e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.83732e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.29491962132204314, 'MAE': 0.3853565800937784}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2024/model.pkl', muti_dataset='ETTm2', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.42868e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.75823e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.42868e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.523824119484924, 'MAE': 0.5028648871341019}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2024/model.pkl', muti_dataset='ETTm2', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.45044e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.97837e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.2024148517076969, 'MAE': 0.3203393158043881}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2024/model.pkl', muti_dataset='ETTm2', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.68296e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.21203596897170499, 'MAE': 0.3166873214668006}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2024/model.pkl', muti_dataset='ETTm2', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.3164e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.56963e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.3164e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8193691056103516, 'MAE': 0.4637585647372748}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2024/model.pkl', muti_dataset='ETTm2', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.37628e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.6458e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.37628e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.36971722392111794, 'MAE': 0.42686790356857857}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2024/model.pkl', muti_dataset='ETTm2', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.43101e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.82403e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.6261207660699064, 'MAE': 0.608048841524974}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='exchange', random_seed=2024, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/exchange_epochs_250_seed_2024
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=4.709481328725815
Epoch #1: loss=2.810678392648697
Epoch #2: loss=2.0802116692066193
Epoch #3: loss=1.8890279084444046
Epoch #4: loss=1.7055563032627106
Epoch #5: loss=1.6262111812829971
Epoch #6: loss=1.6092384904623032
Epoch #7: loss=1.5745817422866821
Epoch #8: loss=1.496505692601204
Epoch #9: loss=1.5000532865524292
Epoch #10: loss=1.4406723231077194
Epoch #11: loss=1.3373893946409225
Epoch #12: loss=1.493939146399498
Epoch #13: loss=1.3477515578269958
Epoch #14: loss=1.3498490676283836
Epoch #15: loss=1.4363998770713806
Epoch #16: loss=1.3377706408500671
Epoch #17: loss=1.2832896262407303
Epoch #18: loss=1.2464379668235779
Epoch #19: loss=1.277956634759903
Epoch #20: loss=1.3027481585741043
Epoch #21: loss=1.271139919757843
Epoch #22: loss=1.2815836668014526
Epoch #23: loss=1.2135827243328094
Epoch #24: loss=1.1210272014141083
Epoch #25: loss=1.0907697901129723
Epoch #26: loss=1.1895346343517303
Epoch #27: loss=1.0820272639393806
Epoch #28: loss=1.0555679500102997
Epoch #29: loss=1.0752577856183052
Epoch #30: loss=1.0853154510259628
Epoch #31: loss=1.0106394067406654
Epoch #32: loss=1.0415875166654587
Epoch #33: loss=1.0175854116678238
Epoch #34: loss=0.9625237509608269
Epoch #35: loss=0.8933600932359695
Epoch #36: loss=0.9448468089103699
Epoch #37: loss=0.940185196697712
Epoch #38: loss=0.8867671117186546
Epoch #39: loss=0.9759060218930244
Epoch #40: loss=0.8288212791085243
Epoch #41: loss=0.8231196999549866
Epoch #42: loss=0.8635804280638695
Epoch #43: loss=0.7645923048257828
Epoch #44: loss=0.8518157303333282
Epoch #45: loss=0.9003907442092896
Epoch #46: loss=0.7501052916049957
Epoch #47: loss=0.7659534811973572
Epoch #48: loss=0.9995057359337807
Epoch #49: loss=0.8370714113116264
Epoch #50: loss=0.6819193363189697
Epoch #51: loss=0.5692901760339737
Epoch #52: loss=0.6476927176117897
Epoch #53: loss=0.5748947225511074
Epoch #54: loss=0.7598356008529663
Epoch #55: loss=0.8624873124063015
Epoch #56: loss=0.6194871552288532
Epoch #57: loss=0.6328472942113876
Epoch #58: loss=0.7028461657464504
Epoch #59: loss=0.6798117011785507
Epoch #60: loss=0.6679505184292793
Epoch #61: loss=0.5308055058121681
Epoch #62: loss=0.6532677710056305
Epoch #63: loss=0.5421365350484848
Epoch #64: loss=0.5816571414470673
Epoch #65: loss=0.48375527933239937
Epoch #66: loss=0.4809396378695965
Epoch #67: loss=0.39829859510064125
Epoch #68: loss=0.6787245124578476
Epoch #69: loss=0.4904693253338337
Epoch #70: loss=0.47128852270543575
Epoch #71: loss=0.43244248628616333
Epoch #72: loss=0.4671247582882643
Epoch #73: loss=0.4010883718729019
Epoch #74: loss=0.3485332876443863
Epoch #75: loss=0.35463028214871883
Epoch #76: loss=0.5340969525277615
Epoch #77: loss=0.41095608472824097
Epoch #78: loss=0.48636352829635143
Epoch #79: loss=0.6658914312720299
Epoch #80: loss=0.44727810099720955
Epoch #81: loss=0.38811699859797955
Epoch #82: loss=0.37944415025413036
Epoch #83: loss=0.4389736894518137
Epoch #84: loss=0.5848322305828333
Epoch #85: loss=0.44744876213371754
Epoch #86: loss=0.47923171147704124
Epoch #87: loss=0.4082689955830574
Epoch #88: loss=0.4876781813800335
Epoch #89: loss=0.3570850249379873
Epoch #90: loss=0.37434483505785465
Epoch #91: loss=0.3278041109442711
Epoch #92: loss=0.30825054831802845
Epoch #93: loss=0.28552681393921375
Epoch #94: loss=0.27237470634281635
Epoch #95: loss=0.27391111943870783
Epoch #96: loss=0.31681636720895767
Epoch #97: loss=0.7039128802716732
Epoch #98: loss=0.3080063499510288
Epoch #99: loss=0.39239628054201603
Epoch #100: loss=0.35869806446135044
Epoch #101: loss=0.35770011506974697
Epoch #102: loss=0.3116326164454222
Epoch #103: loss=0.2909858403727412
Epoch #104: loss=0.43626465182751417
Epoch #105: loss=0.3764496482908726
Epoch #106: loss=0.40778222493827343
Epoch #107: loss=0.2838075887411833
Epoch #108: loss=0.3530862480401993
Epoch #109: loss=0.3484999220818281
Epoch #110: loss=0.29618947952985764
Epoch #111: loss=0.4580989656969905
Epoch #112: loss=0.38108897767961025
Epoch #113: loss=0.43296189047396183
Epoch #114: loss=0.28197201900184155
Epoch #115: loss=0.4144059009850025
Epoch #116: loss=0.49479703418910503
Epoch #117: loss=0.27352636121213436
Epoch #118: loss=0.346422266215086
Epoch #119: loss=0.261458283290267
Epoch #120: loss=0.44168978556990623
Epoch #121: loss=0.3397189527750015
Epoch #122: loss=0.3152644094079733
Epoch #123: loss=0.3131436053663492
Epoch #124: loss=0.29085018672049046
Epoch #125: loss=0.29181865975260735
Epoch #126: loss=0.22008222434669733
Epoch #127: loss=0.24428249895572662
Epoch #128: loss=0.29776658583432436
Epoch #129: loss=0.2135061640292406
Epoch #130: loss=0.2401291262358427
Epoch #131: loss=0.259569201618433
Epoch #132: loss=0.30298562441021204
Epoch #133: loss=0.21572158113121986
Epoch #134: loss=0.2466367892920971
Epoch #135: loss=0.2074830075725913
Epoch #136: loss=0.20281288027763367
Epoch #137: loss=0.203216097317636
Epoch #138: loss=0.286551209166646
Epoch #139: loss=0.17218604683876038
Epoch #140: loss=0.29591100476682186
Epoch #141: loss=0.18361262511461973
Epoch #142: loss=0.2556876568123698
Epoch #143: loss=0.19274030532687902
Epoch #144: loss=0.3560686632990837
Epoch #145: loss=0.2253486094996333
Epoch #146: loss=0.20165333710610867
Epoch #147: loss=0.2200335180386901
Epoch #148: loss=0.25144307501614094
Epoch #149: loss=0.2358783259987831
Epoch #150: loss=0.22114683967083693
Epoch #151: loss=0.23674872145056725
Epoch #152: loss=0.18107275757938623
Epoch #153: loss=0.33759079314768314
Epoch #154: loss=0.2357417168095708
Epoch #155: loss=0.2256438508629799
Epoch #156: loss=0.37921759486198425
Epoch #157: loss=0.26587981823831797
Epoch #158: loss=0.1947067203000188
Epoch #159: loss=0.2978044170886278
Epoch #160: loss=0.15699240565299988
Epoch #161: loss=0.3384497007355094
Epoch #162: loss=0.24890094622969627
Epoch #163: loss=0.24127590004354715
Epoch #164: loss=0.26044420152902603
Epoch #165: loss=0.13381054159253836
Epoch #166: loss=0.17056503426283598
Epoch #167: loss=0.23187195230275393
Epoch #168: loss=0.17662761267274618
Epoch #169: loss=0.23290529008954763
Epoch #170: loss=0.2091325018554926
Epoch #171: loss=0.1648760875687003
Epoch #172: loss=0.16671855840831995
Epoch #173: loss=0.25676434161141515
Epoch #174: loss=0.28752411529421806
Epoch #175: loss=0.22485505510121584
Epoch #176: loss=0.24269102793186903
Epoch #177: loss=0.21724528819322586
Epoch #178: loss=0.15670367889106274
Epoch #179: loss=0.19199302233755589
Epoch #180: loss=0.18100001104176044
Epoch #181: loss=0.1850108141079545
Epoch #182: loss=0.1984009495936334
Epoch #183: loss=0.21662340080365539
Epoch #184: loss=0.14074246771633625
Epoch #185: loss=0.2363626421429217
Epoch #186: loss=0.1725773923099041
Epoch #187: loss=0.24603846576064825
Epoch #188: loss=0.2098051719367504
Epoch #189: loss=0.19468513829633594
Epoch #190: loss=0.22863581776618958
Epoch #191: loss=0.16964787896722555
Epoch #192: loss=0.22812981391325593
Epoch #193: loss=0.21290806122124195
Epoch #194: loss=0.21279678493738174
Epoch #195: loss=0.12766610365360975
Epoch #196: loss=0.1553050777874887
Epoch #197: loss=0.1693732962012291
Epoch #198: loss=0.1636961242184043
Epoch #199: loss=0.2894232925027609
Epoch #200: loss=0.28288129856809974
Epoch #201: loss=0.29021206870675087
Epoch #202: loss=0.24253803864121437
Epoch #203: loss=0.19661480002105236
Epoch #204: loss=0.40546116791665554
Epoch #205: loss=0.22404394391924143
Epoch #206: loss=0.12732519023120403
Epoch #207: loss=0.2368690548464656
Epoch #208: loss=0.14886389719322324
Epoch #209: loss=0.2005843473598361
Epoch #210: loss=0.15009339153766632
Epoch #211: loss=0.18802107125520706
Epoch #212: loss=0.22635327139869332
Epoch #213: loss=0.177227143663913
Epoch #214: loss=0.15223692916333675
Epoch #215: loss=0.16047204658389091
Epoch #216: loss=0.17365312483161688
Epoch #217: loss=0.13642070395871997
Epoch #218: loss=0.1768385050818324
Epoch #219: loss=0.119344396982342
Epoch #220: loss=0.18350512720644474
Epoch #221: loss=0.12149125849828124
Epoch #222: loss=0.41539642959833145
Epoch #223: loss=0.16635073069483042
Epoch #224: loss=0.14874655939638615
Epoch #225: loss=0.2193177305161953
Epoch #226: loss=0.23745517898350954
Epoch #227: loss=0.20097110234200954
Epoch #228: loss=0.18632613541558385
Epoch #229: loss=0.19099470973014832
Epoch #230: loss=0.1470375331118703
Epoch #231: loss=0.09564127307385206
Epoch #232: loss=0.11423489963635802
Epoch #233: loss=0.11983750993385911
Epoch #234: loss=0.16753251012414694
Epoch #235: loss=0.19727685023099184
Epoch #236: loss=0.12523769726976752
Epoch #237: loss=0.18450628919526935
Epoch #238: loss=0.16511433385312557
Epoch #239: loss=0.1545091182924807
Epoch #240: loss=0.16564558818936348
Epoch #241: loss=0.14694425044581294
Epoch #242: loss=0.11567987455055118
Epoch #243: loss=0.0886474447324872
Epoch #244: loss=0.10724573093466461
Epoch #245: loss=0.15778249129652977
Epoch #246: loss=0.18540422338992357
Epoch #247: loss=0.1387354270555079
Epoch #248: loss=0.19176446087658405
Epoch #249: loss=0.1518125352449715

Training time: 0:01:31.847828

Finished.
n2one setting exchange -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2024/model.pkl', muti_dataset='exchange', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.49087e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.92988e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5771206811663814, 'MAE': 0.5324241725557806}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2024/model.pkl', muti_dataset='exchange', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.53791e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.01636e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.2724910362425619, 'MAE': 0.3702954422899504}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2024/model.pkl', muti_dataset='exchange', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.04571e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.03502e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.18902e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.04571e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.4409015077032017, 'MAE': 0.45331241200344213}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2024/model.pkl', muti_dataset='exchange', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.93139e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.98198e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.86704e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.17926082197690218, 'MAE': 0.2979147661781072}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2024/model.pkl', muti_dataset='exchange', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.04526e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.150853104089802, 'MAE': 0.2728083464502047}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2024/model.pkl', muti_dataset='exchange', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.09806e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.24917e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.44528e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.09806e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8792999255653987, 'MAE': 0.49208448852099124}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2024/model.pkl', muti_dataset='exchange', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.01303e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.00985e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.0116e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.01303e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3664383667421013, 'MAE': 0.4251872682956578}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2024/model.pkl', muti_dataset='exchange', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.05704e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.03753e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.90414e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.05704e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5384242336860656, 'MAE': 0.5491589226747288}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='traffic', random_seed=2024, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/traffic_epochs_250_seed_2024
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=1.188053307151573
Epoch #1: loss=0.37554251981721953
Epoch #2: loss=0.2876834890301709
Epoch #3: loss=0.20777512849103272
Epoch #4: loss=0.16223489339279742
Epoch #5: loss=0.1547818618011931
Epoch #6: loss=0.1042383342199114
Epoch #7: loss=0.09294646847971527
Epoch #8: loss=0.08699559427910158
Epoch #9: loss=0.06780900033471755
Epoch #10: loss=0.052876239342143944
Epoch #11: loss=0.0616602699640758
Epoch #12: loss=0.05705129018911267
Epoch #13: loss=0.053861479171748404
Epoch #14: loss=0.042233082374531924
Epoch #15: loss=0.04460122289969056
Epoch #16: loss=0.03842083581430479
Epoch #17: loss=0.03867147980623051
Epoch #18: loss=0.0429143770017149
Epoch #19: loss=0.03455168867792736
Epoch #20: loss=0.03080231505510961
Epoch #21: loss=0.03965119594976029
Epoch #22: loss=0.025994900106765726
Epoch #23: loss=0.029251579800296548
Epoch #24: loss=0.02448899296894043
Epoch #25: loss=0.02641916426918048
Epoch #26: loss=0.02860451057221602
Epoch #27: loss=0.02584497679215089
Epoch #28: loss=0.02838527922572032
Epoch #29: loss=0.021953952668427562
Epoch #30: loss=0.02292584258795061
Epoch #31: loss=0.027374953023031605
Epoch #32: loss=0.028045635915408883
Epoch #33: loss=0.023077431985035566
Epoch #34: loss=0.0203385188385008
Epoch #35: loss=0.02175603839263575
Epoch #36: loss=0.018301221755105818
Epoch #37: loss=0.027453747171186895
Epoch #38: loss=0.020277621448304712
Epoch #39: loss=0.01930420256627393
Epoch #40: loss=0.01664429746166827
Epoch #41: loss=0.01993686385955683
Epoch #42: loss=0.018758773815595563
Epoch #43: loss=0.018810905968033538
Epoch #44: loss=0.02064689575505968
Epoch #45: loss=0.017490310838715856
Epoch #46: loss=0.04434698717433661
Epoch #47: loss=0.016151807122521337
Epoch #48: loss=0.014102425587092356
Epoch #49: loss=0.02258000058257572
Epoch #50: loss=0.02798675849162401
Epoch #51: loss=0.02223525113857507
Epoch #52: loss=0.017406463651272863
Epoch #53: loss=0.016836226381441975
Epoch #54: loss=0.02962958595407273
Epoch #55: loss=0.017306407537072813
Epoch #56: loss=0.01789307357606169
Epoch #57: loss=0.015541702919216123
Epoch #58: loss=0.024002344558893846
Epoch #59: loss=0.013820510722327817
Epoch #60: loss=0.015150226136451271
Epoch #61: loss=0.016043682902413387
Epoch #62: loss=0.012709407745910487
Epoch #63: loss=0.01655234970532416
Epoch #64: loss=0.017967931556949184
Epoch #65: loss=0.01552055043823641
Epoch #66: loss=0.016640360291972713
Epoch #67: loss=0.023470531741622835
Epoch #68: loss=0.020146985687266847
Epoch #69: loss=0.020558143384342444
Epoch #70: loss=0.01656995237670707
Epoch #71: loss=0.021002796431301107
Epoch #72: loss=0.013576207278953248
Epoch #73: loss=0.01567018551405156
Epoch #74: loss=0.018311670786196586
Epoch #75: loss=0.013079958945648364
Epoch #76: loss=0.016728620197091322
Epoch #77: loss=0.018013187731994885
Epoch #78: loss=0.01538836095502909
Epoch #79: loss=0.013128638458582724
Epoch #80: loss=0.017687656955167937
Epoch #81: loss=0.018063238782602332
Epoch #82: loss=0.021771843031533882
Epoch #83: loss=0.017772927612241567
Epoch #84: loss=0.013547364016947566
Epoch #85: loss=0.012645143203546991
Epoch #86: loss=0.015820866370277336
Epoch #87: loss=0.012544088615457043
Epoch #88: loss=0.014535438630169716
Epoch #89: loss=0.012411732525177669
Epoch #90: loss=0.020807179450362666
Epoch #91: loss=0.013551080735391406
Epoch #92: loss=0.024219634246851994
Epoch #93: loss=0.02508264960549078
Epoch #94: loss=0.014854872248225588
Epoch #95: loss=0.013575863592258304
Epoch #96: loss=0.01558678032919965
Epoch #97: loss=0.017792292039129957
Epoch #98: loss=0.019978890047808937
Epoch #99: loss=0.009193079646032849
Epoch #100: loss=0.013060915247259528
Epoch #101: loss=0.013584575261445306
Epoch #102: loss=0.019314100226647223
Epoch #103: loss=0.010683380474667053
Epoch #104: loss=0.015005104783189099
Epoch #105: loss=0.015155453230656809
Epoch #106: loss=0.009134588740327668
Epoch #107: loss=0.011535185094873621
Epoch #108: loss=0.01647315123672851
Epoch #109: loss=0.012709711738390764
Epoch #110: loss=0.010147032729933997
Epoch #111: loss=0.013887661971635858
Epoch #112: loss=0.008882421892608816
Epoch #113: loss=0.009795490467030633
Epoch #114: loss=0.011656161755416056
Epoch #115: loss=0.015191521444395747
Epoch #116: loss=0.013875138242084807
Epoch #117: loss=0.013163789278090761
Epoch #118: loss=0.011472349019390001
Epoch #119: loss=0.010844812381041848
Epoch #120: loss=0.009728667201331018
Epoch #121: loss=0.012083682050938467
Epoch #122: loss=0.013291240246684086
Epoch #123: loss=0.008870269715851616
Epoch #124: loss=0.013932785355137405
Epoch #125: loss=0.015919077165358377
Epoch #126: loss=0.013413476506237313
Epoch #127: loss=0.009900494292000279
Epoch #128: loss=0.010516158599962086
Epoch #129: loss=0.023901691673486384
Epoch #130: loss=0.01263286430237295
Epoch #131: loss=0.008887114904675333
Epoch #132: loss=0.010415080976663016
Epoch #133: loss=0.009304962355806655
Epoch #134: loss=0.012285867405837491
Epoch #135: loss=0.01506833508953759
Epoch #136: loss=0.022688091346311216
Epoch #137: loss=0.013843417204499164
Epoch #138: loss=0.013379273358870215
Epoch #139: loss=0.009413292155244005
Epoch #140: loss=0.011310445962482124
Epoch #141: loss=0.01026993005897357
Epoch #142: loss=0.013272055896269045
Epoch #143: loss=0.012756685161655996
Epoch #144: loss=0.01562548745016372
Epoch #145: loss=0.011636681066625567
Epoch #146: loss=0.010661058161373136
Epoch #147: loss=0.012058346259799757
Epoch #148: loss=0.0134482195515379
Epoch #149: loss=0.015495448798201049
Epoch #150: loss=0.011159049651400903
Epoch #151: loss=0.010716639951737425
Epoch #152: loss=0.00972250034408552
Epoch #153: loss=0.010933802596107288
Epoch #154: loss=0.012232668995580634
Epoch #155: loss=0.006517597163131724
Epoch #156: loss=0.014673719435158833
Epoch #157: loss=0.009778917639887958
Epoch #158: loss=0.010100009235081569
Epoch #159: loss=0.012487060702384261
Epoch #160: loss=0.015570638519000297
Epoch #161: loss=0.009898645613887326
Epoch #162: loss=0.012152219961556694
Epoch #163: loss=0.009239591380683629
Epoch #164: loss=0.011483178873427036
Epoch #165: loss=0.009647758710149485
Epoch #166: loss=0.013366529192045394
Epoch #167: loss=0.011068938881414888
Epoch #168: loss=0.007364680664880572
Epoch #169: loss=0.011829950730687735
Epoch #170: loss=0.012321075648367848
Epoch #171: loss=0.010044432554364026
Epoch #172: loss=0.01030419013375379
Epoch #173: loss=0.009512767795031175
Epoch #174: loss=0.011808954465446487
Epoch #175: loss=0.01483386048229099
Epoch #176: loss=0.008674415183472912
Epoch #177: loss=0.01216924583676175
Epoch #178: loss=0.008388021399086452
Epoch #179: loss=0.01170519799557031
Epoch #180: loss=0.01015004181943098
Epoch #181: loss=0.007841295376936596
Epoch #182: loss=0.010511852416790332
Epoch #183: loss=0.00889182609188983
Epoch #184: loss=0.01424605233276625
Epoch #185: loss=0.010230678567776144
Epoch #186: loss=0.009503421202655007
Epoch #187: loss=0.007640988941663896
Epoch #188: loss=0.008495150805769566
Epoch #189: loss=0.012256357420571884
Epoch #190: loss=0.012646189726274104
Epoch #191: loss=0.009828459606246629
Epoch #192: loss=0.009747709196115997
Epoch #193: loss=0.013856142573524537
Epoch #194: loss=0.009256653348348177
Epoch #195: loss=0.009561532279147142
Epoch #196: loss=0.006925539556806858
Epoch #197: loss=0.010151741873904286
Epoch #198: loss=0.008098802591775218
Epoch #199: loss=0.008880960335273008
Epoch #200: loss=0.008011001343977975
Epoch #201: loss=0.01512053803705159
Epoch #202: loss=0.012288974743974428
Epoch #203: loss=0.023977493438790035
Epoch #204: loss=0.008300960564439179
Epoch #205: loss=0.019739311960048536
Epoch #206: loss=0.012688105310077871
Epoch #207: loss=0.008984827679061178
Epoch #208: loss=0.016560574870568005
Epoch #209: loss=0.00864002534087446
Epoch #210: loss=0.005438732916061532
Epoch #211: loss=0.01057577373089486
Epoch #212: loss=0.010192780840307045
Epoch #213: loss=0.008765892181561027
Epoch #214: loss=0.009115104271010376
Epoch #215: loss=0.010137242487004554
Epoch #216: loss=0.014342000658757306
Epoch #217: loss=0.008427253179849756
Epoch #218: loss=0.010326103611917855
Epoch #219: loss=0.00921522564747778
Epoch #220: loss=0.006811163748715509
Epoch #221: loss=0.01031156279112368
Epoch #222: loss=0.006793176015570218
Epoch #223: loss=0.011010071725593075
Epoch #224: loss=0.009580942477869937
Epoch #225: loss=0.024110100340748286
Epoch #226: loss=0.00971489901231505
Epoch #227: loss=0.007644614636409286
Epoch #228: loss=0.007377310379853906
Epoch #229: loss=0.007949776102271764
Epoch #230: loss=0.00578923868233012
Epoch #231: loss=0.012570987779504226
Epoch #232: loss=0.010962751337366633
Epoch #233: loss=0.019463798681843572
Epoch #234: loss=0.010549810238284104
Epoch #235: loss=0.009103863023154237
Epoch #236: loss=0.009777064441902867
Epoch #237: loss=0.007691854423316079
Epoch #238: loss=0.008709482606207998
Epoch #239: loss=0.01059757049944065
Epoch #240: loss=0.00710411004962782
Epoch #241: loss=0.011293784089705458
Epoch #242: loss=0.010694578643570186
Epoch #243: loss=0.007748063284423113
Epoch #244: loss=0.006193537732057264
Epoch #245: loss=0.009569856327331221
Epoch #246: loss=0.011878675344582293
Epoch #247: loss=0.005137660895288423
Epoch #248: loss=0.007333495574028921
Epoch #249: loss=0.00959203289054983

Training time: 3:22:56.128499

Finished.
n2one setting traffic -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2024/model.pkl', muti_dataset='traffic', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.0706e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.36705e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.0706e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.6049496882730059, 'MAE': 0.5601969627315475}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2024/model.pkl', muti_dataset='traffic', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.20156e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.41495e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.30393912183446475, 'MAE': 0.3971884747064097}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2024/model.pkl', muti_dataset='traffic', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.23434e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.57791e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.23434e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5303586275723496, 'MAE': 0.5175795342096875}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2024/model.pkl', muti_dataset='traffic', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.13545e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.3967e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.19515943962600102, 'MAE': 0.31598949324305287}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2024/model.pkl', muti_dataset='traffic', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.15986e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.23947654366588317, 'MAE': 0.3327614704061458}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2024/model.pkl', muti_dataset='traffic', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=7.46701e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.64319e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.50294e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=7.46701e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8346582480050982, 'MAE': 0.4761929655619319}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2024/model.pkl', muti_dataset='traffic', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=6.18903e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.60888e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.29742e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=6.18903e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3897599152262268, 'MAE': 0.44504608893416026}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2024/model.pkl', muti_dataset='traffic', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.00542e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.02457e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.08068e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5701526007948885, 'MAE': 0.582721540054466}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='electricity', random_seed=2024, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/electricity_epochs_250_seed_2024
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=1.5955498363370093
Epoch #1: loss=0.6473584990263728
Epoch #2: loss=0.4381132667124086
Epoch #3: loss=0.3490498969766581
Epoch #4: loss=0.2746814624449917
Epoch #5: loss=0.24466018787239943
Epoch #6: loss=0.23976707316911852
Epoch #7: loss=0.19429617105893257
Epoch #8: loss=0.1753709849631675
Epoch #9: loss=0.15054382773760322
Epoch #10: loss=0.1379355260307358
Epoch #11: loss=0.12201421662608039
Epoch #12: loss=0.12385516624166587
Epoch #13: loss=0.09756665309525539
Epoch #14: loss=0.08828606096754936
Epoch #15: loss=0.08565597634217079
Epoch #16: loss=0.10918352584647613
Epoch #17: loss=0.08514369297714619
Epoch #18: loss=0.06524887267569794
Epoch #19: loss=0.07288339096948365
Epoch #20: loss=0.07299215861268318
Epoch #21: loss=0.056218953808984284
Epoch #22: loss=0.06103464325953774
Epoch #23: loss=0.04631379587181214
Epoch #24: loss=0.04614791186450984
Epoch #25: loss=0.050014298071220195
Epoch #26: loss=0.04208346496472524
Epoch #27: loss=0.04739905060254432
Epoch #28: loss=0.051795803886661274
Epoch #29: loss=0.03532762612750017
Epoch #30: loss=0.04066528414732942
Epoch #31: loss=0.02980077786463954
Epoch #32: loss=0.042859848506742876
Epoch #33: loss=0.03741269618145123
Epoch #34: loss=0.04509014661592138
Epoch #35: loss=0.027209503694388123
Epoch #36: loss=0.03236344880990197
Epoch #37: loss=0.035292718316518305
Epoch #38: loss=0.03012444139849917
Epoch #39: loss=0.04037139022786669
Epoch #40: loss=0.027335500119056704
Epoch #41: loss=0.020535394764067228
Epoch #42: loss=0.02882699689659583
Epoch #43: loss=0.0335715415015689
Epoch #44: loss=0.028108485831481598
Epoch #45: loss=0.024480729011348755
Epoch #46: loss=0.026801525927047213
Epoch #47: loss=0.0237248760152672
Epoch #48: loss=0.025646089286778435
Epoch #49: loss=0.026734146793631147
Epoch #50: loss=0.0240155195649075
Epoch #51: loss=0.02697111586706475
Epoch #52: loss=0.025673067562044176
Epoch #53: loss=0.010671094494778953
Epoch #54: loss=0.03686761478871699
Epoch #55: loss=0.026290177820958313
Epoch #56: loss=0.019653864056191107
Epoch #57: loss=0.02240664512354219
Epoch #58: loss=0.04428766397657772
Epoch #59: loss=0.025214371636997315
Epoch #60: loss=0.018817371146962324
Epoch #61: loss=0.028766645525866465
Epoch #62: loss=0.017377990250101435
Epoch #63: loss=0.01469749711690372
Epoch #64: loss=0.014267521524131646
Epoch #65: loss=0.021632022546775452
Epoch #66: loss=0.024222124774499313
Epoch #67: loss=0.019798299343748788
Epoch #68: loss=0.017116000547256566
Epoch #69: loss=0.01776675671785838
Epoch #70: loss=0.017734550387885805
Epoch #71: loss=0.020971038358647238
Epoch #72: loss=0.013569662604383788
Epoch #73: loss=0.018275355763524494
Epoch #74: loss=0.02442274976201135
Epoch #75: loss=0.01497484503075991
Epoch #76: loss=0.01707209695298863
Epoch #77: loss=0.024223901318006124
Epoch #78: loss=0.028727195442892102
Epoch #79: loss=0.01470213981596985
Epoch #80: loss=0.021430750517646067
Epoch #81: loss=0.01708272534547333
Epoch #82: loss=0.011598168917992544
Epoch #83: loss=0.03939282515875392
Epoch #84: loss=0.01709758097268177
Epoch #85: loss=0.014345305726640042
Epoch #86: loss=0.01504445305301567
Epoch #87: loss=0.015099675946026124
Epoch #88: loss=0.013894686889559077
Epoch #89: loss=0.018599566990854886
Epoch #90: loss=0.0175415461970351
Epoch #91: loss=0.013108196538855608
Epoch #92: loss=0.012585067351252954
Epoch #93: loss=0.02443942489288167
Epoch #94: loss=0.019551081439288697
Epoch #95: loss=0.013764404843530887
Epoch #96: loss=0.010797615115337852
Epoch #97: loss=0.011535984753214717
Epoch #98: loss=0.01713512975626808
Epoch #99: loss=0.01737006548596285
Epoch #100: loss=0.013149793337409696
Epoch #101: loss=0.0177940631305619
Epoch #102: loss=0.009323022670853836
Epoch #103: loss=0.010093194937561355
Epoch #104: loss=0.01149921299094723
Epoch #105: loss=0.011504173732864616
Epoch #106: loss=0.041281964481196066
Epoch #107: loss=0.016411727795165577
Epoch #108: loss=0.014867403707684619
Epoch #109: loss=0.011906903455791143
Epoch #110: loss=0.01616586050754152
Epoch #111: loss=0.013366513706582693
Epoch #112: loss=0.01186142135226542
Epoch #113: loss=0.013226939942811055
Epoch #114: loss=0.019051035334475084
Epoch #115: loss=0.013880452460129209
Epoch #116: loss=0.013154828614146213
Epoch #117: loss=0.012788930905850843
Epoch #118: loss=0.015280485606528935
Epoch #119: loss=0.01239622500172027
Epoch #120: loss=0.014910124664265964
Epoch #121: loss=0.011110732534057475
Epoch #122: loss=0.013602510572090524
Epoch #123: loss=0.019474582180505576
Epoch #124: loss=0.011270708010446374
Epoch #125: loss=0.011346216709026632
Epoch #126: loss=0.007940713615581753
Epoch #127: loss=0.020322114984813868
Epoch #128: loss=0.012271916923168293
Epoch #129: loss=0.020412458098352803
Epoch #130: loss=0.01858672844550668
Epoch #131: loss=0.018159575055707304
Epoch #132: loss=0.008509039451082374
Epoch #133: loss=0.007493970154351598
Epoch #134: loss=0.007471219886738424
Epoch #135: loss=0.015216995872929982
Epoch #136: loss=0.010144135063569239
Epoch #137: loss=0.029562476718496544
Epoch #138: loss=0.03915522465169737
Epoch #139: loss=0.00992933028766369
Epoch #140: loss=0.0250885172324934
Epoch #141: loss=0.009037323959020904
Epoch #142: loss=0.008566402766173212
Epoch #143: loss=0.008232546890099356
Epoch #144: loss=0.015528780861896959
Epoch #145: loss=0.008586448559706531
Epoch #146: loss=0.011439923909848201
Epoch #147: loss=0.013782370721031346
Epoch #148: loss=0.012258853335669728
Epoch #149: loss=0.008133596192586244
Epoch #150: loss=0.009705026571115195
Epoch #151: loss=0.018213606572084744
Epoch #152: loss=0.01730899148235515
Epoch #153: loss=0.012472523676813218
Epoch #154: loss=0.008961896672105051
Epoch #155: loss=0.0114981370872522
Epoch #156: loss=0.01974108098676817
Epoch #157: loss=0.009225620498853181
Epoch #158: loss=0.009728990571908479
Epoch #159: loss=0.011367727696915183
Epoch #160: loss=0.01068352567390292
Epoch #161: loss=0.012843627102398879
Epoch #162: loss=0.01576301529381578
Epoch #163: loss=0.012660297142657977
Epoch #164: loss=0.009146491169434105
Epoch #165: loss=0.011419901114234243
Epoch #166: loss=0.013795062210617551
Epoch #167: loss=0.007964493567287208
Epoch #168: loss=0.014137312834761454
Epoch #169: loss=0.011434365626398438
Epoch #170: loss=0.010487906952683068
Epoch #171: loss=0.014721528638220998
Epoch #172: loss=0.01138843615746816
Epoch #173: loss=0.014097922328053365
Epoch #174: loss=0.009502886518519778
Epoch #175: loss=0.008898651333706384
Epoch #176: loss=0.008802779214717796
Epoch #177: loss=0.008791613180463774
Epoch #178: loss=0.016097912550639113
Epoch #179: loss=0.01202916513948565
Epoch #180: loss=0.00967993944144599
Epoch #181: loss=0.008108929634664346
Epoch #182: loss=0.008632229753415249
Epoch #183: loss=0.009460576015526016
Epoch #184: loss=0.012573521167570812
Epoch #185: loss=0.005941665778879506
Epoch #186: loss=0.012392497671932356
Epoch #187: loss=0.008281515465234769
Epoch #188: loss=0.006985216531849965
Epoch #189: loss=0.009574510454130577
Epoch #190: loss=0.009206766231370673
Epoch #191: loss=0.014041304120208598
Epoch #192: loss=0.011692391136027235
Epoch #193: loss=0.00790369245633512
Epoch #194: loss=0.009949316897333782
Epoch #195: loss=0.01197960477313636
Epoch #196: loss=0.01675816648322407
Epoch #197: loss=0.012292264447354559
Epoch #198: loss=0.011936996474944062
Epoch #199: loss=0.009153959618694935
Epoch #200: loss=0.007357624910441006
Epoch #201: loss=0.006571826980448534
Epoch #202: loss=0.01354408331833362
Epoch #203: loss=0.011574661765103243
Epoch #204: loss=0.007896766370010773
Epoch #205: loss=0.008151580787385666
Epoch #206: loss=0.008243704007066659
Epoch #207: loss=0.0069586828687754855
Epoch #208: loss=0.009075841290703641
Epoch #209: loss=0.00856267264191891
Epoch #210: loss=0.013634454045514359
Epoch #211: loss=0.006777269820134355
Epoch #212: loss=0.006653978525333809
Epoch #213: loss=0.007645452224175849
Epoch #214: loss=0.009137580043818865
Epoch #215: loss=0.008699254076684915
Epoch #216: loss=0.006763786472259756
Epoch #217: loss=0.012678173618903239
Epoch #218: loss=0.008860917988043232
Epoch #219: loss=0.011097281303030447
Epoch #220: loss=0.00625254786992228
Epoch #221: loss=0.005121466537385909
Epoch #222: loss=0.015535027143488148
Epoch #223: loss=0.009646416235315494
Epoch #224: loss=0.012088799997845031
Epoch #225: loss=0.03003880159216396
Epoch #226: loss=0.009708019755374513
Epoch #227: loss=0.010360345812884341
Epoch #228: loss=0.006801756851123414
Epoch #229: loss=0.007218109021823551
Epoch #230: loss=0.007610235137939656
Epoch #231: loss=0.006334347959308278
Epoch #232: loss=0.012609068638495695
Epoch #233: loss=0.011366649980532046
Epoch #234: loss=0.007026058190949754
Epoch #235: loss=0.004999465870397526
Epoch #236: loss=0.0075884347775555
Epoch #237: loss=0.0068831882215427045
Epoch #238: loss=0.008656523980140813
Epoch #239: loss=0.011568135895524783
Epoch #240: loss=0.012740840819320493
Epoch #241: loss=0.010204490316622655
Epoch #242: loss=0.007355494748922848
Epoch #243: loss=0.0046724665491490675
Epoch #244: loss=0.008820169286804586
Epoch #245: loss=0.01114116517505594
Epoch #246: loss=0.008572564980579464
Epoch #247: loss=0.009414413491734724
Epoch #248: loss=0.010210941777407914
Epoch #249: loss=0.00585494109335489

Training time: 1:27:35.619872

Finished.
n2one setting electricity -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2024/model.pkl', muti_dataset='electricity', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.71014e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.1383e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.02257e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.71014e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.582293522491495, 'MAE': 0.5411911966835528}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2024/model.pkl', muti_dataset='electricity', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.70383e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.10155e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.01868e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.01868e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.31118831113811796, 'MAE': 0.3996849084232584}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2024/model.pkl', muti_dataset='electricity', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.2471e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.19914e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.42849e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.2471e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.539113356267178, 'MAE': 0.5059588435623026}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2024/model.pkl', muti_dataset='electricity', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.11856e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.20272e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.49574e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.11856e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.20022593112301584, 'MAE': 0.3197710681611972}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2024/model.pkl', muti_dataset='electricity', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.53118e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.27309841765484144, 'MAE': 0.35582842639542206}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2024/model.pkl', muti_dataset='electricity', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=7.11328e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.38456e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.4723e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=7.11328e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8060692545326515, 'MAE': 0.45492516673829303}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2024/model.pkl', muti_dataset='electricity', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=7.09117e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.53396e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.59671e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=7.09117e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3552340483568316, 'MAE': 0.42180183783266845}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2024/model.pkl', muti_dataset='electricity', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.35923e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.79935e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.35923e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.6242219179201032, 'MAE': 0.5858639196674863}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='weather', random_seed=2024, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/weather_epochs_250_seed_2024
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=19.15281449831449
Epoch #1: loss=7.623151366527264
Epoch #2: loss=3.268896194604727
Epoch #3: loss=3.4239786863327026
Epoch #4: loss=3.2881763531611514
Epoch #5: loss=2.6486100416917067
Epoch #6: loss=2.475682542874263
Epoch #7: loss=2.4189390310874352
Epoch #8: loss=2.3928286662468543
Epoch #9: loss=2.324209919342628
Epoch #10: loss=2.1602938725398135
Epoch #11: loss=2.0576345095267663
Epoch #12: loss=2.108786867215083
Epoch #13: loss=1.977917111836947
Epoch #14: loss=1.8727142444023719
Epoch #15: loss=1.7924034182841961
Epoch #16: loss=2.0186860286272488
Epoch #17: loss=1.7148819519923284
Epoch #18: loss=1.7053057918181787
Epoch #19: loss=1.6214944078372076
Epoch #20: loss=1.4719560513129601
Epoch #21: loss=1.6235337119836073
Epoch #22: loss=1.4598847398391137
Epoch #23: loss=1.3895911070016713
Epoch #24: loss=1.380202210866488
Epoch #25: loss=1.3326250223013072
Epoch #26: loss=1.192485362291336
Epoch #27: loss=1.2367598987542665
Epoch #28: loss=1.169138374236914
Epoch #29: loss=1.108581387079679
Epoch #30: loss=1.1516812627132123
Epoch #31: loss=1.1398618679780226
Epoch #32: loss=1.114919098523947
Epoch #33: loss=1.0271545396401331
Epoch #34: loss=0.9871361645368429
Epoch #35: loss=0.9631226292023292
Epoch #36: loss=0.9544561665791732
Epoch #37: loss=0.9735164756958301
Epoch #38: loss=0.872196261699383
Epoch #39: loss=0.8252497544655433
Epoch #40: loss=0.8041416590030377
Epoch #41: loss=0.8290983644815592
Epoch #42: loss=0.8503525027861962
Epoch #43: loss=0.8214081342403705
Epoch #44: loss=0.7193793493967789
Epoch #45: loss=0.7905466625323663
Epoch #46: loss=0.8573854015423701
Epoch #47: loss=0.7557446521062118
Epoch #48: loss=0.7605327528256637
Epoch #49: loss=0.6935880069549267
Epoch #50: loss=0.7841618359088898
Epoch #51: loss=1.3932697131083562
Epoch #52: loss=1.362964575107281
Epoch #53: loss=0.8165672100507296
Epoch #54: loss=0.7594404954176682
Epoch #55: loss=0.7284749551461294
Epoch #56: loss=0.8127870147044842
Epoch #57: loss=0.8197941367442791
Epoch #58: loss=0.6445864507785211
Epoch #59: loss=0.681958101116694
Epoch #60: loss=0.6570866841536301
Epoch #61: loss=0.6421510909612362
Epoch #62: loss=0.5586320838102927
Epoch #63: loss=0.6330888890303098
Epoch #64: loss=0.5437901020050049
Epoch #65: loss=0.5899577736854553
Epoch #66: loss=0.5571767000051645
Epoch #67: loss=0.5623599394009664
Epoch #68: loss=0.6185389894705552
Epoch #69: loss=0.5726956163461392
Epoch #70: loss=0.5008491426706314
Epoch #71: loss=0.5760373106369605
Epoch #72: loss=0.5856617861069165
Epoch #73: loss=0.5293204429057928
Epoch #74: loss=0.5013822236886392
Epoch #75: loss=0.5007221595599101
Epoch #76: loss=0.43256728236491865
Epoch #77: loss=0.4953904507251886
Epoch #78: loss=0.49970648953547847
Epoch #79: loss=0.533762317437392
Epoch #80: loss=0.5345422212894146
Epoch #81: loss=0.4899194618830314
Epoch #82: loss=0.5330405418689435
Epoch #83: loss=0.47128311028847325
Epoch #84: loss=0.5867589643368354
Epoch #85: loss=0.4518747501648389
Epoch #86: loss=0.5132536991284444
Epoch #87: loss=0.4529599111813765
Epoch #88: loss=0.47055919812275815
Epoch #89: loss=0.4363002318602342
Epoch #90: loss=0.3728274531089343
Epoch #91: loss=0.37289317754598766
Epoch #92: loss=0.41475398723895734
Epoch #93: loss=0.41652088325757247
Epoch #94: loss=0.3398840708228258
Epoch #95: loss=0.38346557720349383
Epoch #96: loss=0.3484173399897722
Epoch #97: loss=0.3835916645251788
Epoch #98: loss=0.4199598752535306
Epoch #99: loss=0.3308987250694862
Epoch #100: loss=0.34966741043787736
Epoch #101: loss=0.34713007223147613
Epoch #102: loss=0.3035398635726709
Epoch #103: loss=0.29893201417647874
Epoch #104: loss=0.3568844399773158
Epoch #105: loss=0.26226643988719356
Epoch #106: loss=0.28666358842299533
Epoch #107: loss=0.3347471419435281
Epoch #108: loss=0.2778951875292338
Epoch #109: loss=0.4470284478022502
Epoch #110: loss=0.4378066332294391
Epoch #111: loss=0.34875281842855305
Epoch #112: loss=0.30793033654873186
Epoch #113: loss=0.27525900648190427
Epoch #114: loss=0.32507775953182805
Epoch #115: loss=0.3136417825634663
Epoch #116: loss=0.26174015207932544
Epoch #117: loss=0.2599588328829178
Epoch #118: loss=0.2820069096409358
Epoch #119: loss=0.2621874132981667
Epoch #120: loss=0.26636048635611165
Epoch #121: loss=0.3166759773515738
Epoch #122: loss=0.3429397258620996
Epoch #123: loss=0.22865084931254387
Epoch #124: loss=0.2513314921122331
Epoch #125: loss=0.31696440222171635
Epoch #126: loss=0.28777921199798584
Epoch #127: loss=0.3209019544032904
Epoch #128: loss=0.531165405534781
Epoch #129: loss=0.3711017289986977
Epoch #130: loss=0.3059588481600468
Epoch #131: loss=0.4522460125959836
Epoch #132: loss=0.2663308267409985
Epoch #133: loss=0.1762366512647042
Epoch #134: loss=0.21289129440601057
Epoch #135: loss=0.19610001547978476
Epoch #136: loss=0.1519265163403291
Epoch #137: loss=0.29904480507740605
Epoch #138: loss=0.2094267116716275
Epoch #139: loss=0.21338699442835954
Epoch #140: loss=0.1944508529626406
Epoch #141: loss=0.20163635422403997
Epoch #142: loss=0.15677922305006248
Epoch #143: loss=0.17344175794949898
Epoch #144: loss=0.2636696905470811
Epoch #145: loss=0.16346703928250533
Epoch #146: loss=0.27525141118810725
Epoch #147: loss=0.20327086804004815
Epoch #148: loss=0.18018496151153857
Epoch #149: loss=0.21264803380920336
Epoch #150: loss=0.2266205918903534
Epoch #151: loss=0.17062950449494216
Epoch #152: loss=0.1566805372444483
Epoch #153: loss=0.20203761125986391
Epoch #154: loss=0.1484889009824166
Epoch #155: loss=0.18140677391336515
Epoch #156: loss=0.22721761235823998
Epoch #157: loss=0.22334322075431162
Epoch #158: loss=0.13469732681719157
Epoch #159: loss=0.14682841601853186
Epoch #160: loss=0.16785715491725847
Epoch #161: loss=0.1438416841511543
Epoch #162: loss=0.14045454203509367
Epoch #163: loss=0.12380267034929532
Epoch #164: loss=0.13717778284962362
Epoch #165: loss=0.13358524527687293
Epoch #166: loss=0.11453433736012532
Epoch #167: loss=0.1020114658257136
Epoch #168: loss=0.13805133204620618
Epoch #169: loss=0.18263510557321402
Epoch #170: loss=0.1605109293013811
Epoch #171: loss=0.12066063313530041
Epoch #172: loss=0.12176266441551539
Epoch #173: loss=0.1151560596548594
Epoch #174: loss=0.18264790094242647
Epoch #175: loss=0.10430056243561782
Epoch #176: loss=0.10890647281820957
Epoch #177: loss=0.1567450902209832
Epoch #178: loss=0.16833893582224846
Epoch #179: loss=0.16503537775805363
Epoch #180: loss=0.17495246833333603
Epoch #181: loss=0.12924957375686902
Epoch #182: loss=0.08960889451778851
Epoch #183: loss=0.09947470131401832
Epoch #184: loss=0.13429523789538786
Epoch #185: loss=0.08508538046421912
Epoch #186: loss=0.08190626163895313
Epoch #187: loss=0.15158144098061782
Epoch #188: loss=0.10123835102869914
Epoch #189: loss=0.0865148758658996
Epoch #190: loss=0.12022899478100814
Epoch #191: loss=0.16667014833253163
Epoch #192: loss=0.14009842577462012
Epoch #193: loss=0.10121908411383629
Epoch #194: loss=0.0760002166319352
Epoch #195: loss=0.12120575901980583
Epoch #196: loss=0.18517096598560995
Epoch #197: loss=0.10975283441635278
Epoch #198: loss=0.10131120180281308
Epoch #199: loss=0.09551614479949841
Epoch #200: loss=0.08646560159440224
Epoch #201: loss=0.12691098301169965
Epoch #202: loss=0.08260762462249169
Epoch #203: loss=0.07102677412331104
Epoch #204: loss=0.10011442600247952
Epoch #205: loss=0.0806147617359574
Epoch #206: loss=0.06559654626135643
Epoch #207: loss=0.13668285346088502
Epoch #208: loss=0.09298810928773421
Epoch #209: loss=0.07620621766321935
Epoch #210: loss=0.07927262102468656
Epoch #211: loss=0.07889516594318244
Epoch #212: loss=0.0844068810200462
Epoch #213: loss=0.0814441115810321
Epoch #214: loss=0.07484325480002624
Epoch #215: loss=0.09351377167667334
Epoch #216: loss=0.08998545201925132
Epoch #217: loss=0.07174802091545783
Epoch #218: loss=0.07489735095833357
Epoch #219: loss=0.11376019495611008
Epoch #220: loss=0.12799406008651623
Epoch #221: loss=0.08505256961171444
Epoch #222: loss=0.1386916062866266
Epoch #223: loss=0.09185099988602675
Epoch #224: loss=0.11548814077216846
Epoch #225: loss=0.07751597120211674
Epoch #226: loss=0.07840355951339006
Epoch #227: loss=0.07827405273341216
Epoch #228: loss=0.08916708912986976
Epoch #229: loss=0.19094068356431448
Epoch #230: loss=0.08231648122175382
Epoch #231: loss=0.10792989584688957
Epoch #232: loss=0.11304863656942661
Epoch #233: loss=0.18513054715899321
Epoch #234: loss=0.1445404513237568
Epoch #235: loss=0.09775403700768948
Epoch #236: loss=0.1090695161658984
Epoch #237: loss=0.4249882474541664
Epoch #238: loss=0.1530619581731466
Epoch #239: loss=0.21833920607773158
Epoch #240: loss=0.09812344839939705
Epoch #241: loss=0.12302293907850981
Epoch #242: loss=0.08011219320962062
Epoch #243: loss=0.07959289626719859
Epoch #244: loss=0.07137920800596476
Epoch #245: loss=0.11270251340017869
Epoch #246: loss=0.05487804680776138
Epoch #247: loss=0.049216666187231355
Epoch #248: loss=0.06784344575582789
Epoch #249: loss=0.04145518403786879

Training time: 0:09:14.577899

Finished.
n2one setting weather -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2024/model.pkl', muti_dataset='weather', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.80417e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.8145e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.80417e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5768085355247906, 'MAE': 0.5293369838429801}
Finished.
------------------------- record done -------------------------
n2one setting weather -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2024/model.pkl', muti_dataset='weather', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.50664e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.94248e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.26408445062814945, 'MAE': 0.3648144795140869}
Finished.
------------------------- record done -------------------------
n2one setting weather -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2024/model.pkl', muti_dataset='weather', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.29183e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.37075e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.73254e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.29183e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.4805064541798309, 'MAE': 0.4792104557791081}
Finished.
------------------------- record done -------------------------
n2one setting weather -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2024/model.pkl', muti_dataset='weather', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.22216e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.37124e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.70847e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.22216e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.1781388056384827, 'MAE': 0.29810843629014167}
Finished.
------------------------- record done -------------------------
n2one setting weather -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2024/model.pkl', muti_dataset='weather', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.4608e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.23094993681515794, 'MAE': 0.3278857625736243}
Finished.
------------------------- record done -------------------------
n2one setting weather -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2024/model.pkl', muti_dataset='weather', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.97357e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.99378e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.97357e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.7985900319444257, 'MAE': 0.45468486408524433}
Finished.
------------------------- record done -------------------------
n2one setting weather -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2024/model.pkl', muti_dataset='weather', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.07713e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.94021e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.07713e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.38679061256943964, 'MAE': 0.4194760035737173}
Finished.
------------------------- record done -------------------------
n2one setting weather -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2024/model.pkl', muti_dataset='weather', random_seed=2024, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.19058e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.30056e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.39906e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.19058e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.6177313121990213, 'MAE': 0.6172422799409493}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='ETTh1', random_seed=2025, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/ETTh1_epochs_250_seed_2025
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=6.484821455819266
Epoch #1: loss=3.897680010114397
Epoch #2: loss=2.887171540941511
Epoch #3: loss=2.3639744349888394
Epoch #4: loss=2.285886968885149
Epoch #5: loss=2.0740184102739607
Epoch #6: loss=2.0423466307776317
Epoch #7: loss=2.325776628085545
Epoch #8: loss=1.9685553652899606
Epoch #9: loss=1.842293381690979
Epoch #10: loss=1.7276743991034371
Epoch #11: loss=1.6716524532863073
Epoch #12: loss=1.7440058163234167
Epoch #13: loss=1.6678064039775304
Epoch #14: loss=1.6117560011999947
Epoch #15: loss=1.5956706489835466
Epoch #16: loss=1.448859351021903
Epoch #17: loss=1.4681804520743233
Epoch #18: loss=1.4552613667079382
Epoch #19: loss=1.3867593152182442
Epoch #20: loss=1.2791409833090646
Epoch #21: loss=1.3390702520098006
Epoch #22: loss=1.290264095578875
Epoch #23: loss=1.1739466956683569
Epoch #24: loss=1.1471713951655798
Epoch #25: loss=1.401150039264134
Epoch #26: loss=1.232868833201272
Epoch #27: loss=1.0763378569058009
Epoch #28: loss=1.1180339796202523
Epoch #29: loss=1.1771526081221444
Epoch #30: loss=1.1008206605911255
Epoch #31: loss=1.0834716047559465
Epoch #32: loss=1.0847970247268677
Epoch #33: loss=0.9961842894554138
Epoch #34: loss=0.9993742108345032
Epoch #35: loss=0.9523240072386605
Epoch #36: loss=1.014705376965659
Epoch #37: loss=0.9737954139709473
Epoch #38: loss=0.8707065156527928
Epoch #39: loss=1.0478006175586156
Epoch #40: loss=0.8833855731146676
Epoch #41: loss=0.8376736044883728
Epoch #42: loss=0.7931292908532279
Epoch #43: loss=1.0574485489300318
Epoch #44: loss=0.8730503405843463
Epoch #45: loss=0.8284606848444257
Epoch #46: loss=0.8033462762832642
Epoch #47: loss=0.8216376985822406
Epoch #48: loss=0.7662669164793832
Epoch #49: loss=0.7814358983721051
Epoch #50: loss=0.7100018603461129
Epoch #51: loss=0.6847213421549115
Epoch #52: loss=0.7258750200271606
Epoch #53: loss=0.6812920314925057
Epoch #54: loss=0.676535827772958
Epoch #55: loss=0.6861424957002912
Epoch #56: loss=0.8353234188897269
Epoch #57: loss=0.7730975576809475
Epoch #58: loss=0.7368791443961007
Epoch #59: loss=0.782020798751286
Epoch #60: loss=0.7290886810847691
Epoch #61: loss=0.620277783700398
Epoch #62: loss=0.6234725202832904
Epoch #63: loss=0.6388241265501294
Epoch #64: loss=0.7954979326043811
Epoch #65: loss=0.7163846067019871
Epoch #66: loss=0.6989684615816388
Epoch #67: loss=0.580925532749721
Epoch #68: loss=0.5900974529130119
Epoch #69: loss=0.5831877929823739
Epoch #70: loss=0.5455242267676762
Epoch #71: loss=0.6221191968236651
Epoch #72: loss=0.779586238520486
Epoch #73: loss=0.593780653817313
Epoch #74: loss=0.6437556147575378
Epoch #75: loss=0.6204331730093274
Epoch #76: loss=0.6158785011087146
Epoch #77: loss=0.6067277022770473
Epoch #78: loss=0.6225181988307408
Epoch #79: loss=0.4755351756300245
Epoch #80: loss=0.5466736853122711
Epoch #81: loss=0.594301483460835
Epoch #82: loss=0.4928284330027444
Epoch #83: loss=0.6230754681995937
Epoch #84: loss=0.6047470314162118
Epoch #85: loss=0.4605503422873361
Epoch #86: loss=0.5741689162594932
Epoch #87: loss=0.514744222164154
Epoch #88: loss=0.7191639798028129
Epoch #89: loss=0.5062376729079655
Epoch #90: loss=0.5189749045031411
Epoch #91: loss=0.47340772833142963
Epoch #92: loss=0.41552756088120596
Epoch #93: loss=0.46269555602754864
Epoch #94: loss=0.6064410081931523
Epoch #95: loss=0.47049049394471304
Epoch #96: loss=0.4160509577819279
Epoch #97: loss=0.4868084788322449
Epoch #98: loss=0.4559608144419534
Epoch #99: loss=0.45873162150382996
Epoch #100: loss=0.4243957740919931
Epoch #101: loss=0.39743296589170185
Epoch #102: loss=0.4501320719718933
Epoch #103: loss=0.4028336703777313
Epoch #104: loss=0.43788352608680725
Epoch #105: loss=0.3896953761577606
Epoch #106: loss=0.4927702673843929
Epoch #107: loss=0.40076202154159546
Epoch #108: loss=0.4028919296605246
Epoch #109: loss=0.4108572133949825
Epoch #110: loss=0.399926449571337
Epoch #111: loss=0.3730731351034982
Epoch #112: loss=0.44308855278151377
Epoch #113: loss=0.4015632356916155
Epoch #114: loss=0.3559522543634687
Epoch #115: loss=0.4824395946093968
Epoch #116: loss=0.4597973610673632
Epoch #117: loss=0.4865613579750061
Epoch #118: loss=0.4558219952242715
Epoch #119: loss=0.40725882990019663
Epoch #120: loss=0.42033621668815613
Epoch #121: loss=0.33646561418260845
Epoch #122: loss=0.34593855908938814
Epoch #123: loss=0.41104439326695036
Epoch #124: loss=0.3224002889224461
Epoch #125: loss=0.39938140341213774
Epoch #126: loss=0.340623927967889
Epoch #127: loss=0.29648437244551523
Epoch #128: loss=0.3946895258767264
Epoch #129: loss=0.3427367849009378
Epoch #130: loss=0.3995929466826575
Epoch #131: loss=0.3654083417994635
Epoch #132: loss=0.3429086229630879
Epoch #133: loss=0.32297115666525705
Epoch #134: loss=0.28392812609672546
Epoch #135: loss=0.3953968754836491
Epoch #136: loss=0.32894801242010935
Epoch #137: loss=0.42549860051700045
Epoch #138: loss=0.3773193487099239
Epoch #139: loss=0.29337154754570555
Epoch #140: loss=0.2905035487243107
Epoch #141: loss=0.2856665679386684
Epoch #142: loss=0.41443960581507
Epoch #143: loss=0.3762119242123195
Epoch #144: loss=0.3601742088794708
Epoch #145: loss=0.3417632707527706
Epoch #146: loss=0.4967428722551891
Epoch #147: loss=0.5200822906834739
Epoch #148: loss=0.32906942282404217
Epoch #149: loss=0.4166609857763563
Epoch #150: loss=0.35209382857595173
Epoch #151: loss=0.34301004878112246
Epoch #152: loss=0.3106572798320225
Epoch #153: loss=0.35283529119832174
Epoch #154: loss=0.3831812483923776
Epoch #155: loss=0.36470972640173777
Epoch #156: loss=0.3696169363600867
Epoch #157: loss=0.3543934098311833
Epoch #158: loss=0.3187848095382963
Epoch #159: loss=0.2814943790435791
Epoch #160: loss=0.28387061612946646
Epoch #161: loss=0.36231112480163574
Epoch #162: loss=0.26418387464114595
Epoch #163: loss=0.35276686932359425
Epoch #164: loss=0.44836287200450897
Epoch #165: loss=0.3522543566567557
Epoch #166: loss=0.36724371356623514
Epoch #167: loss=0.3583755280290331
Epoch #168: loss=0.2994417931352343
Epoch #169: loss=0.35737150481769014
Epoch #170: loss=0.32087160434041706
Epoch #171: loss=0.2744436711072922
Epoch #172: loss=0.27713883774621145
Epoch #173: loss=0.30335422285965513
Epoch #174: loss=0.3694652723414557
Epoch #175: loss=0.3635686274085726
Epoch #176: loss=0.3073958839688982
Epoch #177: loss=0.37487414266381947
Epoch #178: loss=0.3212302454880306
Epoch #179: loss=0.31228383098329815
Epoch #180: loss=0.409828496830804
Epoch #181: loss=0.29926799876349314
Epoch #182: loss=0.33355097472667694
Epoch #183: loss=0.3711160953555788
Epoch #184: loss=0.3356239412512098
Epoch #185: loss=0.34114758031708853
Epoch #186: loss=0.2856740206480026
Epoch #187: loss=0.3846526827130999
Epoch #188: loss=0.2951877053294863
Epoch #189: loss=0.250580940927778
Epoch #190: loss=0.27370917797088623
Epoch #191: loss=0.2683878732579095
Epoch #192: loss=0.32547898377691
Epoch #193: loss=0.36755528833184925
Epoch #194: loss=0.25920267190252033
Epoch #195: loss=0.2523417685713087
Epoch #196: loss=0.25611716295991627
Epoch #197: loss=0.2333066931792668
Epoch #198: loss=0.25590918958187103
Epoch #199: loss=0.22033871284552983
Epoch #200: loss=0.2805186424936567
Epoch #201: loss=0.3622512221336365
Epoch #202: loss=0.26375241577625275
Epoch #203: loss=0.3679665241922651
Epoch #204: loss=0.3598424047231674
Epoch #205: loss=0.270858781678336
Epoch #206: loss=0.3034891826765878
Epoch #207: loss=0.23984645094190324
Epoch #208: loss=0.24204371656690324
Epoch #209: loss=0.3572869747877121
Epoch #210: loss=0.26215035574776785
Epoch #211: loss=0.23563061441693986
Epoch #212: loss=0.19570516688483103
Epoch #213: loss=0.3251590813909258
Epoch #214: loss=0.28992690571716856
Epoch #215: loss=0.33396694489887785
Epoch #216: loss=0.24805731007031032
Epoch #217: loss=0.2477415246622903
Epoch #218: loss=0.23927476150648935
Epoch #219: loss=0.22223144982542312
Epoch #220: loss=0.2682568941797529
Epoch #221: loss=0.22444805928639003
Epoch #222: loss=0.28714838198253084
Epoch #223: loss=0.22777473713670457
Epoch #224: loss=0.34174288383552004
Epoch #225: loss=0.41624983506543295
Epoch #226: loss=0.24666142676557815
Epoch #227: loss=0.21027028560638428
Epoch #228: loss=0.2590643891266414
Epoch #229: loss=0.22901669996125357
Epoch #230: loss=0.2138119978564126
Epoch #231: loss=0.26783130637237
Epoch #232: loss=0.37125525304249357
Epoch #233: loss=0.21321492961474828
Epoch #234: loss=0.30034107182707104
Epoch #235: loss=0.22341005291257585
Epoch #236: loss=0.24202466649668558
Epoch #237: loss=0.2923074598823275
Epoch #238: loss=0.2196807243994304
Epoch #239: loss=0.25434488696711405
Epoch #240: loss=0.22571792772838048
Epoch #241: loss=0.21718400078160421
Epoch #242: loss=0.21440088961805617
Epoch #243: loss=0.2857938366276877
Epoch #244: loss=0.2423995371375765
Epoch #245: loss=0.35451239347457886
Epoch #246: loss=0.31758564497743336
Epoch #247: loss=0.3159134324107851
Epoch #248: loss=0.31300359112875803
Epoch #249: loss=0.38888856555734364

Training time: 0:01:46.133458

Finished.
n2one setting ETTh1 -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2025/model.pkl', muti_dataset='ETTh1', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.82415e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.32466e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5932845439688516, 'MAE': 0.5350609009056473}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2025/model.pkl', muti_dataset='ETTh1', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.77724e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.3934e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.25209872270487527, 'MAE': 0.3582281022764183}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2025/model.pkl', muti_dataset='ETTh1', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.01447e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.91856e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.72468e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.01447e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.4931620868867073, 'MAE': 0.48151300066470243}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2025/model.pkl', muti_dataset='ETTh1', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.87909e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.99394e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.70609e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.17473146561670913, 'MAE': 0.29474704313179323}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2025/model.pkl', muti_dataset='ETTh1', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.14541e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.16169631410647986, 'MAE': 0.2814576659061438}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2025/model.pkl', muti_dataset='ETTh1', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.2502e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.53379e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.2502e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8156276092523979, 'MAE': 0.46233834406499386}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2025/model.pkl', muti_dataset='ETTh1', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.24488e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.42916e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.24488e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3519949388646411, 'MAE': 0.4184769492157366}
Finished.
------------------------- record done -------------------------
n2one setting ETTh1 -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh1_epochs_250_seed_2025/model.pkl', muti_dataset='ETTh1', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.53163e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.00964e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.67544e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.67544e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5494246764184259, 'MAE': 0.5909003162452612}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='ETTh2', random_seed=2025, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/ETTh2_epochs_250_seed_2025
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=6.269199439457485
Epoch #1: loss=3.569536413465227
Epoch #2: loss=2.759136131831578
Epoch #3: loss=2.4681671346936906
Epoch #4: loss=2.2989352430616106
Epoch #5: loss=2.024057541574751
Epoch #6: loss=2.055012481553214
Epoch #7: loss=2.3121189900806973
Epoch #8: loss=1.9562618051256453
Epoch #9: loss=1.850024666104998
Epoch #10: loss=1.7338265691484724
Epoch #11: loss=1.6787416594369071
Epoch #12: loss=1.6771965878350394
Epoch #13: loss=1.6610258987971716
Epoch #14: loss=1.6052533047539848
Epoch #15: loss=1.5717757769993372
Epoch #16: loss=1.4321666274751936
Epoch #17: loss=1.4859790120806013
Epoch #18: loss=1.4282870292663574
Epoch #19: loss=1.4021883521761214
Epoch #20: loss=1.2648323774337769
Epoch #21: loss=1.3107623202460152
Epoch #22: loss=1.282222100666591
Epoch #23: loss=1.1989308255059379
Epoch #24: loss=1.1313525693757194
Epoch #25: loss=1.4087545360837663
Epoch #26: loss=1.2460846390042986
Epoch #27: loss=1.0957011325018746
Epoch #28: loss=1.1552603074482508
Epoch #29: loss=1.1633653555597578
Epoch #30: loss=1.0979068279266357
Epoch #31: loss=1.0936841794422694
Epoch #32: loss=1.1574898617608207
Epoch #33: loss=1.0328357730593
Epoch #34: loss=1.0117973514965601
Epoch #35: loss=0.9887115785053798
Epoch #36: loss=1.0232711945261275
Epoch #37: loss=1.0014203446252006
Epoch #38: loss=0.8919441018785749
Epoch #39: loss=1.0854460511888777
Epoch #40: loss=0.8804716978754316
Epoch #41: loss=0.8324134945869446
Epoch #42: loss=0.829846841948373
Epoch #43: loss=1.0099706394331796
Epoch #44: loss=0.8927763870784214
Epoch #45: loss=0.7962762117385864
Epoch #46: loss=0.8283660411834717
Epoch #47: loss=0.8321706312043327
Epoch #48: loss=0.8041157381875175
Epoch #49: loss=0.7650908657482692
Epoch #50: loss=0.7329067502702985
Epoch #51: loss=0.7044074365070888
Epoch #52: loss=0.7069057907376971
Epoch #53: loss=0.704406602042062
Epoch #54: loss=0.6687872111797333
Epoch #55: loss=0.6426784566470555
Epoch #56: loss=0.7744578123092651
Epoch #57: loss=0.8115485055106026
Epoch #58: loss=0.7949079019682748
Epoch #59: loss=0.7400450110435486
Epoch #60: loss=0.7060250469616481
Epoch #61: loss=0.5870238883154733
Epoch #62: loss=0.5634258900369916
Epoch #63: loss=0.5673489272594452
Epoch #64: loss=0.7661145670073373
Epoch #65: loss=0.6970623816762652
Epoch #66: loss=0.6742635113852364
Epoch #67: loss=0.587683013507298
Epoch #68: loss=0.6132681795528957
Epoch #69: loss=0.5789433547428676
Epoch #70: loss=0.5741451467786517
Epoch #71: loss=0.7281365011419568
Epoch #72: loss=0.7728842922619411
Epoch #73: loss=0.7361456496374947
Epoch #74: loss=0.7374266726630074
Epoch #75: loss=0.6775297011647906
Epoch #76: loss=0.6679455723081317
Epoch #77: loss=0.5991689903395516
Epoch #78: loss=0.6423816084861755
Epoch #79: loss=0.478594286101205
Epoch #80: loss=0.5174556842872075
Epoch #81: loss=0.6103588470390865
Epoch #82: loss=0.484740001814706
Epoch #83: loss=0.5969661389078412
Epoch #84: loss=0.5991960763931274
Epoch #85: loss=0.48309009415762766
Epoch #86: loss=0.5455576479434967
Epoch #87: loss=0.47414512293679373
Epoch #88: loss=0.6633100381919316
Epoch #89: loss=0.5030956779207502
Epoch #90: loss=0.5023837685585022
Epoch #91: loss=0.45120711411748615
Epoch #92: loss=0.4264687853200095
Epoch #93: loss=0.4714979188782828
Epoch #94: loss=0.5955857123647418
Epoch #95: loss=0.5037924179009029
Epoch #96: loss=0.4086376939501081
Epoch #97: loss=0.4879803700106485
Epoch #98: loss=0.42848710077149527
Epoch #99: loss=0.45832893678120207
Epoch #100: loss=0.3953086052622114
Epoch #101: loss=0.3938304143292563
Epoch #102: loss=0.444086492061615
Epoch #103: loss=0.38712637765066965
Epoch #104: loss=0.46709426811763216
Epoch #105: loss=0.37995978338377817
Epoch #106: loss=0.47818347811698914
Epoch #107: loss=0.3851752621786935
Epoch #108: loss=0.37912453923906597
Epoch #109: loss=0.39311479670660837
Epoch #110: loss=0.3777005842753819
Epoch #111: loss=0.3336873139653887
Epoch #112: loss=0.42163880808012827
Epoch #113: loss=0.3513633736542293
Epoch #114: loss=0.3436582258769444
Epoch #115: loss=0.4442973605224064
Epoch #116: loss=0.4472225734165737
Epoch #117: loss=0.43737942831856863
Epoch #118: loss=0.4333908643041338
Epoch #119: loss=0.39028920020375935
Epoch #120: loss=0.38750584210668293
Epoch #121: loss=0.3300025335380009
Epoch #122: loss=0.3375477067061833
Epoch #123: loss=0.39024814111845835
Epoch #124: loss=0.3393540935856955
Epoch #125: loss=0.3959565737417766
Epoch #126: loss=0.35051306230681284
Epoch #127: loss=0.2883081351007734
Epoch #128: loss=0.40270666990961346
Epoch #129: loss=0.3376144106898989
Epoch #130: loss=0.39894441195896696
Epoch #131: loss=0.3193281250340598
Epoch #132: loss=0.36219355038234163
Epoch #133: loss=0.32600346207618713
Epoch #134: loss=0.2956871773515429
Epoch #135: loss=0.4052956061703818
Epoch #136: loss=0.3339925536087581
Epoch #137: loss=0.4114660492965153
Epoch #138: loss=0.35817926057747435
Epoch #139: loss=0.29380642090524944
Epoch #140: loss=0.2800694406032562
Epoch #141: loss=0.27102804822581156
Epoch #142: loss=0.476111827152116
Epoch #143: loss=0.3580933064222336
Epoch #144: loss=0.37722960114479065
Epoch #145: loss=0.327593948159899
Epoch #146: loss=0.5406324352536883
Epoch #147: loss=0.45830429451806204
Epoch #148: loss=0.3686561371598925
Epoch #149: loss=0.36816685114588055
Epoch #150: loss=0.36258672390665325
Epoch #151: loss=0.3295021078416279
Epoch #152: loss=0.29656303354672026
Epoch #153: loss=0.3142536197389875
Epoch #154: loss=0.3817667726959501
Epoch #155: loss=0.3379942221300943
Epoch #156: loss=0.382607421704701
Epoch #157: loss=0.3699180781841278
Epoch #158: loss=0.35472718306950163
Epoch #159: loss=0.3006327109677451
Epoch #160: loss=0.28566595699105946
Epoch #161: loss=0.35850913184029715
Epoch #162: loss=0.29450402515275137
Epoch #163: loss=0.32814674718039377
Epoch #164: loss=0.47328549197741915
Epoch #165: loss=0.39077910993780407
Epoch #166: loss=0.40922861439841135
Epoch #167: loss=0.38868910499981474
Epoch #168: loss=0.26581721220697674
Epoch #169: loss=0.3669147789478302
Epoch #170: loss=0.32904250494071413
Epoch #171: loss=0.2650301158428192
Epoch #172: loss=0.2637341150215694
Epoch #173: loss=0.30496803351811
Epoch #174: loss=0.335288194673402
Epoch #175: loss=0.35752884830747333
Epoch #176: loss=0.2960870840719768
Epoch #177: loss=0.33000067515032633
Epoch #178: loss=0.2939469324690955
Epoch #179: loss=0.32386650145053864
Epoch #180: loss=0.4330560863018036
Epoch #181: loss=0.2296733217579978
Epoch #182: loss=0.2621266543865204
Epoch #183: loss=0.34165285314832416
Epoch #184: loss=0.2873879926545279
Epoch #185: loss=0.33216749557427
Epoch #186: loss=0.26162885980946676
Epoch #187: loss=0.2640797176531383
Epoch #188: loss=0.2959413251706532
Epoch #189: loss=0.25255740753241945
Epoch #190: loss=0.2537494684968676
Epoch #191: loss=0.2401432799441474
Epoch #192: loss=0.30359225613730295
Epoch #193: loss=0.35573343506881167
Epoch #194: loss=0.24122165782111032
Epoch #195: loss=0.24454933830669948
Epoch #196: loss=0.2818633105073656
Epoch #197: loss=0.23027573100158147
Epoch #198: loss=0.24646456752504622
Epoch #199: loss=0.2381998279264995
Epoch #200: loss=0.2945017282451902
Epoch #201: loss=0.35936401997293743
Epoch #202: loss=0.2660916362489973
Epoch #203: loss=0.39651420286723543
Epoch #204: loss=0.36581398120948244
Epoch #205: loss=0.2988810752119337
Epoch #206: loss=0.2985451306615557
Epoch #207: loss=0.2713551329714911
Epoch #208: loss=0.24643885450703756
Epoch #209: loss=0.381343703184809
Epoch #210: loss=0.27325976746422903
Epoch #211: loss=0.2449599461896079
Epoch #212: loss=0.22575164905616216
Epoch #213: loss=0.31579478297914776
Epoch #214: loss=0.33218759298324585
Epoch #215: loss=0.36182653265339987
Epoch #216: loss=0.2715049386024475
Epoch #217: loss=0.2120639830827713
Epoch #218: loss=0.2603451886347362
Epoch #219: loss=0.21509488139833724
Epoch #220: loss=0.24834867673260824
Epoch #221: loss=0.23164346175534384
Epoch #222: loss=0.30750403446810587
Epoch #223: loss=0.21958090790680476
Epoch #224: loss=0.37013332332883564
Epoch #225: loss=0.40350736890520367
Epoch #226: loss=0.25458572804927826
Epoch #227: loss=0.2261945285967418
Epoch #228: loss=0.25019090729100363
Epoch #229: loss=0.24307989009789058
Epoch #230: loss=0.22098356698240554
Epoch #231: loss=0.2523009308746883
Epoch #232: loss=0.4037099608353206
Epoch #233: loss=0.22081374057701655
Epoch #234: loss=0.25010768856321064
Epoch #235: loss=0.22352275465215957
Epoch #236: loss=0.2545995776142393
Epoch #237: loss=0.2759785567011152
Epoch #238: loss=0.22223674399512156
Epoch #239: loss=0.24605608412197658
Epoch #240: loss=0.20353658497333527
Epoch #241: loss=0.21675951991762435
Epoch #242: loss=0.21014689334801265
Epoch #243: loss=0.29549884370395113
Epoch #244: loss=0.22439998388290405
Epoch #245: loss=0.3100956082344055
Epoch #246: loss=0.28238482986177715
Epoch #247: loss=0.26402889830725534
Epoch #248: loss=0.3194079335246767
Epoch #249: loss=0.3455315338713782

Training time: 0:01:51.912281

Finished.
n2one setting ETTh2 -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2025/model.pkl', muti_dataset='ETTh2', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.86109e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.68674e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.6101164136390675, 'MAE': 0.5468431219210497}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2025/model.pkl', muti_dataset='ETTh2', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.89906e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.71947e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.2762848060996355, 'MAE': 0.37497473178577667}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2025/model.pkl', muti_dataset='ETTh2', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.08584e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.99886e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.97332e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.08584e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.4946685722782605, 'MAE': 0.4827710899558142}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2025/model.pkl', muti_dataset='ETTh2', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.08427e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.06265e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.03675e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.17803501252579756, 'MAE': 0.29790583751849053}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2025/model.pkl', muti_dataset='ETTh2', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.37075e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.15673038547039336, 'MAE': 0.2770946565813347}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2025/model.pkl', muti_dataset='ETTh2', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.28109e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.57703e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.28109e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8286832082365556, 'MAE': 0.46669779707759534}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2025/model.pkl', muti_dataset='ETTh2', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.21e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.59878e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.21e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3716652283759671, 'MAE': 0.4257492162195997}
Finished.
------------------------- record done -------------------------
n2one setting ETTh2 -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTh2_epochs_250_seed_2025/model.pkl', muti_dataset='ETTh2', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.73569e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.0329e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.96721e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.38638453762720787, 'MAE': 0.4478679747225319}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='ETTm1', random_seed=2025, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/ETTm1_epochs_250_seed_2025
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=5.971480673009699
Epoch #1: loss=3.5178364623676646
Epoch #2: loss=2.786588191986084
Epoch #3: loss=2.441458918831565
Epoch #4: loss=2.2804003845561636
Epoch #5: loss=2.0733273246071557
Epoch #6: loss=2.006853764707392
Epoch #7: loss=1.8540090972726995
Epoch #8: loss=1.7901895479722456
Epoch #9: loss=1.6828869689594617
Epoch #10: loss=1.5454847704280505
Epoch #11: loss=1.5106045007705688
Epoch #12: loss=1.53597121888941
Epoch #13: loss=1.3992462266575207
Epoch #14: loss=1.372605475512418
Epoch #15: loss=1.2453757957978682
Epoch #16: loss=1.2215109304948286
Epoch #17: loss=1.1895421093160456
Epoch #18: loss=1.1762652072039517
Epoch #19: loss=1.040643415667794
Epoch #20: loss=1.0873415957797656
Epoch #21: loss=1.063000738620758
Epoch #22: loss=0.9783137007193132
Epoch #23: loss=0.973150984807448
Epoch #24: loss=0.8992640430277045
Epoch #25: loss=1.0309202020818538
Epoch #26: loss=0.9667301286350597
Epoch #27: loss=0.9114571484652433
Epoch #28: loss=0.8222095966339111
Epoch #29: loss=0.9299159266731956
Epoch #30: loss=0.7755814844911749
Epoch #31: loss=1.0211935260079124
Epoch #32: loss=0.812588783827695
Epoch #33: loss=0.6979937011545355
Epoch #34: loss=0.8522520119493658
Epoch #35: loss=0.7399262244051154
Epoch #36: loss=0.6858714873140509
Epoch #37: loss=0.9653391892259772
Epoch #38: loss=0.8212775588035583
Epoch #39: loss=0.6456907554106279
Epoch #40: loss=0.7612456029111688
Epoch #41: loss=0.645618888464841
Epoch #42: loss=0.5967901186509565
Epoch #43: loss=0.5923395996743982
Epoch #44: loss=0.6451412276788191
Epoch #45: loss=0.6639646129174666
Epoch #46: loss=0.6045580397952687
Epoch #47: loss=0.6055400696667758
Epoch #48: loss=0.6042490438981489
Epoch #49: loss=0.5669077445160259
Epoch #50: loss=0.7532502927563407
Epoch #51: loss=0.620423289862546
Epoch #52: loss=0.4943163747137243
Epoch #53: loss=0.5115868313746019
Epoch #54: loss=0.5408264425667849
Epoch #55: loss=0.5780969695611433
Epoch #56: loss=0.5048427283763885
Epoch #57: loss=0.6987435519695282
Epoch #58: loss=0.555771220814098
Epoch #59: loss=0.5550637353550304
Epoch #60: loss=0.5200004387985576
Epoch #61: loss=0.4635234068740498
Epoch #62: loss=0.49546296759085223
Epoch #63: loss=0.5723969394510443
Epoch #64: loss=0.6601016169244592
Epoch #65: loss=0.6544915410605344
Epoch #66: loss=0.5415134375745599
Epoch #67: loss=0.5759424485943534
Epoch #68: loss=0.53482325239615
Epoch #69: loss=0.6778264506296678
Epoch #70: loss=0.4665380391207608
Epoch #71: loss=0.4790175638415597
Epoch #72: loss=0.5275470262224023
Epoch #73: loss=0.4543782879005779
Epoch #74: loss=0.41546028039672156
Epoch #75: loss=0.42699026790532196
Epoch #76: loss=0.3744176436554302
Epoch #77: loss=0.3784136311574416
Epoch #78: loss=0.41788568821820343
Epoch #79: loss=0.5168518369848077
Epoch #80: loss=0.49345719001509925
Epoch #81: loss=0.46607451005415484
Epoch #82: loss=0.375044508413835
Epoch #83: loss=0.3889417919245633
Epoch #84: loss=0.4254819534041665
Epoch #85: loss=0.4732285656712272
Epoch #86: loss=0.3541874018582431
Epoch #87: loss=0.3612976467067545
Epoch #88: loss=0.35377536849542096
Epoch #89: loss=0.33289699391885236
Epoch #90: loss=0.31236461211334576
Epoch #91: loss=0.4764622571793469
Epoch #92: loss=0.35595903071490204
Epoch #93: loss=0.5040032836523923
Epoch #94: loss=0.34974214976484125
Epoch #95: loss=0.41319619390097534
Epoch #96: loss=0.389183219183575
Epoch #97: loss=0.34365675530650397
Epoch #98: loss=0.40359323674982245
Epoch #99: loss=0.37398366223682056
Epoch #100: loss=0.32277717102657666
Epoch #101: loss=0.369149385528131
Epoch #102: loss=0.35453662140802905
Epoch #103: loss=0.28610430657863617
Epoch #104: loss=0.36183584413745185
Epoch #105: loss=0.29147551682862366
Epoch #106: loss=0.28970650922168384
Epoch #107: loss=0.3620642437176271
Epoch #108: loss=0.2890107279474085
Epoch #109: loss=0.35713645951314404
Epoch #110: loss=0.31852222166278144
Epoch #111: loss=0.35642232542688196
Epoch #112: loss=0.3238935280929912
Epoch #113: loss=0.30294508148323407
Epoch #114: loss=0.2428398443893953
Epoch #115: loss=0.20628936724229294
Epoch #116: loss=0.21732651780952106
Epoch #117: loss=0.23764767836440692
Epoch #118: loss=0.17702960968017578
Epoch #119: loss=0.2488686591386795
Epoch #120: loss=0.231262437321923
Epoch #121: loss=0.23401812260801141
Epoch #122: loss=0.27962264689532196
Epoch #123: loss=0.23994495922868903
Epoch #124: loss=0.19375312531536276
Epoch #125: loss=0.23559020391919397
Epoch #126: loss=0.2113050791350278
Epoch #127: loss=0.19889290088957007
Epoch #128: loss=0.26850500296462665
Epoch #129: loss=0.26561573283238843
Epoch #130: loss=0.3997491625222293
Epoch #131: loss=0.2294417077844793
Epoch #132: loss=0.18341541019353
Epoch #133: loss=0.1615021052685651
Epoch #134: loss=0.6276500197974119
Epoch #135: loss=0.3339073942466216
Epoch #136: loss=0.3437858535484834
Epoch #137: loss=0.24030482498082248
Epoch #138: loss=0.3264486383308064
Epoch #139: loss=0.4785143760117618
Epoch #140: loss=0.25941967286846856
Epoch #141: loss=0.2806462306867946
Epoch #142: loss=0.1991168104789474
Epoch #143: loss=0.16001150079748847
Epoch #144: loss=0.21066162193363364
Epoch #145: loss=0.24307217652147467
Epoch #146: loss=0.2173623496835882
Epoch #147: loss=0.15647554871710864
Epoch #148: loss=0.14199199053374204
Epoch #149: loss=0.21474585682153702
Epoch #150: loss=0.28151030093431473
Epoch #151: loss=0.21364043246616016
Epoch #152: loss=0.1511869118972258
Epoch #153: loss=0.15400883149016986
Epoch #154: loss=0.09678986939516934
Epoch #155: loss=0.16504716602238742
Epoch #156: loss=0.12865642525933005
Epoch #157: loss=0.4688959710977294
Epoch #158: loss=0.2745014483278448
Epoch #159: loss=0.18615641648119147
Epoch #160: loss=0.14159673181447116
Epoch #161: loss=0.27315487238493835
Epoch #162: loss=0.21070660650730133
Epoch #163: loss=0.15173714337023822
Epoch #164: loss=0.20303007757121866
Epoch #165: loss=0.12814778089523315
Epoch #166: loss=0.1573445045135238
Epoch #167: loss=0.1395770555192774
Epoch #168: loss=0.20156159116463226
Epoch #169: loss=0.12406540594317696
Epoch #170: loss=0.10184003548188643
Epoch #171: loss=0.12864679809321056
Epoch #172: loss=0.19749113206158986
Epoch #173: loss=0.15913943743163889
Epoch #174: loss=0.22779850594022058
Epoch #175: loss=0.22082028131593356
Epoch #176: loss=0.26224409450184216
Epoch #177: loss=0.29364138638431375
Epoch #178: loss=0.12239450148560783
Epoch #179: loss=0.16533659398555756
Epoch #180: loss=0.13061286949298598
Epoch #181: loss=0.21655520424246788
Epoch #182: loss=0.12993106245994568
Epoch #183: loss=0.13107082010670143
Epoch #184: loss=0.194270463491028
Epoch #185: loss=0.1756386783989993
Epoch #186: loss=0.2532531686804511
Epoch #187: loss=0.2730216444893317
Epoch #188: loss=0.4669281901283698
Epoch #189: loss=0.18368920548395676
Epoch #190: loss=0.1915116865526546
Epoch #191: loss=0.17697526108134876
Epoch #192: loss=0.1468730460513722
Epoch #193: loss=0.10811871019276706
Epoch #194: loss=0.16216217929666693
Epoch #195: loss=0.29126798463138664
Epoch #196: loss=0.13375016301870346
Epoch #197: loss=0.19207936796275052
Epoch #198: loss=0.17155296795747496
Epoch #199: loss=0.15929778258908878
Epoch #200: loss=0.1927992362867702
Epoch #201: loss=0.2268278503959829
Epoch #202: loss=0.09302539107474414
Epoch #203: loss=0.09599818458611314
Epoch #204: loss=0.08175803585485979
Epoch #205: loss=0.12893646481362256
Epoch #206: loss=0.12598860094493086
Epoch #207: loss=0.12408997253938155
Epoch #208: loss=0.3770783689211715
Epoch #209: loss=0.16138119623064995
Epoch #210: loss=0.13600695607337085
Epoch #211: loss=0.18585626103661276
Epoch #212: loss=0.0929172167723829
Epoch #213: loss=0.1062214845283465
Epoch #214: loss=0.17458258298310367
Epoch #215: loss=0.12011016397313638
Epoch #216: loss=0.11004752496426756
Epoch #217: loss=0.06682964820753444
Epoch #218: loss=0.07547389986840161
Epoch #219: loss=0.05475640923462131
Epoch #220: loss=0.09738945486870679
Epoch #221: loss=0.08265180462463335
Epoch #222: loss=0.05589901689778675
Epoch #223: loss=0.16630550981922584
Epoch #224: loss=0.10216522487727078
Epoch #225: loss=0.11493613537062299
Epoch #226: loss=0.11473352732983502
Epoch #227: loss=0.19521235573020848
Epoch #228: loss=0.10256512124430049
Epoch #229: loss=0.2342509993097999
Epoch #230: loss=0.11832129379565065
Epoch #231: loss=0.11841352554884824
Epoch #232: loss=0.07200615497475321
Epoch #233: loss=0.07714988121932204
Epoch #234: loss=0.07881429876116189
Epoch #235: loss=0.1025921834463423
Epoch #236: loss=0.04221550188958645
Epoch #237: loss=0.08894260921938853
Epoch #238: loss=0.05352853678844192
Epoch #239: loss=0.06648956527086822
Epoch #240: loss=0.041491284627806053
Epoch #241: loss=0.056612492284991524
Epoch #242: loss=0.050170639021830124
Epoch #243: loss=0.07094473747367208
Epoch #244: loss=0.08533639020540497
Epoch #245: loss=0.0925422248176553
Epoch #246: loss=0.087875068357045
Epoch #247: loss=0.13405462659218095
Epoch #248: loss=0.06726602126251567
Epoch #249: loss=0.0679126437753439

Training time: 0:04:05.356954

Finished.
n2one setting ETTm1 -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2025/model.pkl', muti_dataset='ETTm1', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.07976e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.78784e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5991036820827491, 'MAE': 0.5425853675344029}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2025/model.pkl', muti_dataset='ETTm1', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.11023e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.07422e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.26017056007159045, 'MAE': 0.3619173712438117}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2025/model.pkl', muti_dataset='ETTm1', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.70754e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.11382e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.70754e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.48461897580587027, 'MAE': 0.48234471989109096}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2025/model.pkl', muti_dataset='ETTm1', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.64833e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.13452e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.18070431059593253, 'MAE': 0.3010857370050231}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2025/model.pkl', muti_dataset='ETTm1', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.49432e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.21579375825683308, 'MAE': 0.32073943312848135}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2025/model.pkl', muti_dataset='ETTm1', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.4706e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.82143e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.4706e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8093223947655261, 'MAE': 0.46132290950166677}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2025/model.pkl', muti_dataset='ETTm1', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.48412e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.84513e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.48412e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3642790741544774, 'MAE': 0.42036228614896065}
Finished.
------------------------- record done -------------------------
n2one setting ETTm1 -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm1_epochs_250_seed_2025/model.pkl', muti_dataset='ETTm1', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.33495e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.71734e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.33495e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.36405217438958476, 'MAE': 0.43144390777566766}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='ETTm2', random_seed=2025, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/ETTm2_epochs_250_seed_2025
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=7.176332517103716
Epoch #1: loss=4.047342365438288
Epoch #2: loss=3.014719074422663
Epoch #3: loss=2.5742260326038706
Epoch #4: loss=2.4617766683751885
Epoch #5: loss=2.254674803126942
Epoch #6: loss=2.1482621973211113
Epoch #7: loss=2.06096444346688
Epoch #8: loss=1.9775015224109997
Epoch #9: loss=1.8737523772499778
Epoch #10: loss=1.752529805356806
Epoch #11: loss=1.6988665840842507
Epoch #12: loss=1.7207681915976785
Epoch #13: loss=1.560772104696794
Epoch #14: loss=1.5351058569821445
Epoch #15: loss=1.3959862752394243
Epoch #16: loss=1.3631729754534634
Epoch #17: loss=1.342471881346269
Epoch #18: loss=1.2891164042732932
Epoch #19: loss=1.208229292522777
Epoch #20: loss=1.2193615544926037
Epoch #21: loss=1.1890305389057507
Epoch #22: loss=1.090801932594993
Epoch #23: loss=1.1085284785790877
Epoch #24: loss=1.0096170143647627
Epoch #25: loss=1.1439680728045376
Epoch #26: loss=1.0952462553977966
Epoch #27: loss=0.9991322159767151
Epoch #28: loss=0.9244588776068254
Epoch #29: loss=1.0220844854008069
Epoch #30: loss=0.8736941164190118
Epoch #31: loss=1.1178966760635376
Epoch #32: loss=0.9358042316003279
Epoch #33: loss=0.8033516027710654
Epoch #34: loss=0.9219677448272705
Epoch #35: loss=0.8304017077792775
Epoch #36: loss=0.7438996650955894
Epoch #37: loss=0.9915960918773304
Epoch #38: loss=0.8772848465225913
Epoch #39: loss=0.6967754364013672
Epoch #40: loss=0.8206913742152128
Epoch #41: loss=0.7110666199163957
Epoch #42: loss=0.6477785002101552
Epoch #43: loss=0.6703390424901788
Epoch #44: loss=0.7007015293294733
Epoch #45: loss=0.716528897935694
Epoch #46: loss=0.6695598743178628
Epoch #47: loss=0.6938156593929637
Epoch #48: loss=0.7036425525491888
Epoch #49: loss=0.6465088074857538
Epoch #50: loss=0.8242524320429022
Epoch #51: loss=0.70743112672459
Epoch #52: loss=0.545803037556735
Epoch #53: loss=0.5736820318482139
Epoch #54: loss=0.6133217269724066
Epoch #55: loss=0.6716377680951898
Epoch #56: loss=0.5895882275971499
Epoch #57: loss=0.7651334567503496
Epoch #58: loss=0.6511335941878232
Epoch #59: loss=0.6101955554702065
Epoch #60: loss=0.5886189477010206
Epoch #61: loss=0.5339662513949655
Epoch #62: loss=0.5587307133457877
Epoch #63: loss=0.6260353814471852
Epoch #64: loss=0.6935397088527679
Epoch #65: loss=0.6787154457785867
Epoch #66: loss=0.5642888356338848
Epoch #67: loss=0.5972279716621746
Epoch #68: loss=0.5837548266757618
Epoch #69: loss=0.7414213500239633
Epoch #70: loss=0.5396739108995958
Epoch #71: loss=0.513571248813109
Epoch #72: loss=0.5841652723875913
Epoch #73: loss=0.5138364434242249
Epoch #74: loss=0.4838245917450298
Epoch #75: loss=0.4604650627483021
Epoch #76: loss=0.41285407001321967
Epoch #77: loss=0.43814128095453436
Epoch #78: loss=0.49191444570367987
Epoch #79: loss=0.5603069825605913
Epoch #80: loss=0.5769959579814564
Epoch #81: loss=0.5411706268787384
Epoch #82: loss=0.420189077203924
Epoch #83: loss=0.43231259963729163
Epoch #84: loss=0.44759272174401715
Epoch #85: loss=0.504390150308609
Epoch #86: loss=0.4041331004012715
Epoch #87: loss=0.4175561449744485
Epoch #88: loss=0.4143933789296584
Epoch #89: loss=0.38780181245370343
Epoch #90: loss=0.38767422329295764
Epoch #91: loss=0.5263334702361714
Epoch #92: loss=0.3833782537416978
Epoch #93: loss=0.51186448877508
Epoch #94: loss=0.386258908293464
Epoch #95: loss=0.4596806222742254
Epoch #96: loss=0.43969261375340546
Epoch #97: loss=0.3945584811947562
Epoch #98: loss=0.4758034348487854
Epoch #99: loss=0.434231237931685
Epoch #100: loss=0.36944861574606463
Epoch #101: loss=0.4024845063686371
Epoch #102: loss=0.4015710949897766
Epoch #103: loss=0.33205279166048224
Epoch #104: loss=0.39059946753761987
Epoch #105: loss=0.3365148590369658
Epoch #106: loss=0.33437661962075665
Epoch #107: loss=0.4384905154054815
Epoch #108: loss=0.36848725378513336
Epoch #109: loss=0.40825997022065247
Epoch #110: loss=0.3520401648499749
Epoch #111: loss=0.36775397983464325
Epoch #112: loss=0.3472716103900563
Epoch #113: loss=0.3423397947441448
Epoch #114: loss=0.27981364591555163
Epoch #115: loss=0.21958742087537592
Epoch #116: loss=0.2321370772340081
Epoch #117: loss=0.26582960107109765
Epoch #118: loss=0.22793088311498816
Epoch #119: loss=0.30017969554120844
Epoch #120: loss=0.3171504261818799
Epoch #121: loss=0.31708548963069916
Epoch #122: loss=0.3876053176142953
Epoch #123: loss=0.3122376108711416
Epoch #124: loss=0.2579442005265843
Epoch #125: loss=0.2791886289011348
Epoch #126: loss=0.2454437627033754
Epoch #127: loss=0.24428680403666062
Epoch #128: loss=0.2931315763430162
Epoch #129: loss=0.28405463289130817
Epoch #130: loss=0.41984273899685254
Epoch #131: loss=0.25764755498279224
Epoch #132: loss=0.22259921648285605
Epoch #133: loss=0.20450857417149979
Epoch #134: loss=0.6744466816837137
Epoch #135: loss=0.36649133400483563
Epoch #136: loss=0.3773441558534449
Epoch #137: loss=0.2796086370944977
Epoch #138: loss=0.35065152970227326
Epoch #139: loss=0.5078994089906866
Epoch #140: loss=0.31439014862884174
Epoch #141: loss=0.32863935828208923
Epoch #142: loss=0.2485061071135781
Epoch #143: loss=0.19844349135052075
Epoch #144: loss=0.24887901680036026
Epoch #145: loss=0.25538787652145734
Epoch #146: loss=0.22271134365688672
Epoch #147: loss=0.16770778054540808
Epoch #148: loss=0.17475783283060248
Epoch #149: loss=0.2459659237753261
Epoch #150: loss=0.30528471686623315
Epoch #151: loss=0.23594990372657776
Epoch #152: loss=0.1720348664305427
Epoch #153: loss=0.19290411336855454
Epoch #154: loss=0.1285701570185748
Epoch #155: loss=0.17335044118491086
Epoch #156: loss=0.1792789582501758
Epoch #157: loss=0.5342179692604325
Epoch #158: loss=0.28479608622464264
Epoch #159: loss=0.23495223169977014
Epoch #160: loss=0.18154059756885876
Epoch #161: loss=0.2738672725178979
Epoch #162: loss=0.23027429526502435
Epoch #163: loss=0.2102584412152117
Epoch #164: loss=0.263956565071236
Epoch #165: loss=0.17389909787611527
Epoch #166: loss=0.2057944671674208
Epoch #167: loss=0.18217743188142776
Epoch #168: loss=0.25822176513346756
Epoch #169: loss=0.17813183773647656
Epoch #170: loss=0.1404768248850649
Epoch #171: loss=0.1604672453620217
Epoch #172: loss=0.2367254454981197
Epoch #173: loss=0.16110742566260425
Epoch #174: loss=0.22670233994722366
Epoch #175: loss=0.20730126649141312
Epoch #176: loss=0.21878354251384735
Epoch #177: loss=0.2587317925962535
Epoch #178: loss=0.13718548552556473
Epoch #179: loss=0.18724818392233414
Epoch #180: loss=0.1356780562888492
Epoch #181: loss=0.2351068061861125
Epoch #182: loss=0.15232605622573334
Epoch #183: loss=0.1526298475536433
Epoch #184: loss=0.21515342220664024
Epoch #185: loss=0.2045712857083841
Epoch #186: loss=0.2522548464211551
Epoch #187: loss=0.2534073401581157
Epoch #188: loss=0.46244570545174857
Epoch #189: loss=0.20100988176735965
Epoch #190: loss=0.19842415709387173
Epoch #191: loss=0.19552889330820603
Epoch #192: loss=0.14214799417690796
Epoch #193: loss=0.10700471902435477
Epoch #194: loss=0.15731280026110736
Epoch #195: loss=0.3158027854832736
Epoch #196: loss=0.14390574869784442
Epoch #197: loss=0.2136238759214228
Epoch #198: loss=0.21883602203293281
Epoch #199: loss=0.22046223824674432
Epoch #200: loss=0.23024895109913565
Epoch #201: loss=0.29483890668912366
Epoch #202: loss=0.13422674347053876
Epoch #203: loss=0.12827746163715015
Epoch #204: loss=0.09649061580950563
Epoch #205: loss=0.1350009675053033
Epoch #206: loss=0.14814507859674367
Epoch #207: loss=0.14580544693903488
Epoch #208: loss=0.3746214630928906
Epoch #209: loss=0.17815251580693506
Epoch #210: loss=0.13409247181632303
Epoch #211: loss=0.20009297064759515
Epoch #212: loss=0.10720172761516138
Epoch #213: loss=0.12748746133663438
Epoch #214: loss=0.14842823418703946
Epoch #215: loss=0.11476494879885153
Epoch #216: loss=0.1250635219568556
Epoch #217: loss=0.09152931482954459
Epoch #218: loss=0.09545030377127907
Epoch #219: loss=0.07450005276636644
Epoch #220: loss=0.12314656613902612
Epoch #221: loss=0.09607230600985614
Epoch #222: loss=0.06799343533136627
Epoch #223: loss=0.20441356707702985
Epoch #224: loss=0.12149938128211281
Epoch #225: loss=0.14334418285976758
Epoch #226: loss=0.13534747368910097
Epoch #227: loss=0.19750380549918523
Epoch #228: loss=0.11109785058281639
Epoch #229: loss=0.2655393603173169
Epoch #230: loss=0.13164085285230118
Epoch #231: loss=0.13783176717433063
Epoch #232: loss=0.09983147172765298
Epoch #233: loss=0.0837225267155604
Epoch #234: loss=0.1147854013199156
Epoch #235: loss=0.15088273178447376
Epoch #236: loss=0.0739148658784953
Epoch #237: loss=0.13143431835553862
Epoch #238: loss=0.07463631440292705
Epoch #239: loss=0.07034138285300949
Epoch #240: loss=0.054963423616506836
Epoch #241: loss=0.08903074213726954
Epoch #242: loss=0.08670003119517457
Epoch #243: loss=0.1422391063110395
Epoch #244: loss=0.08692484789273956
Epoch #245: loss=0.09701924466274002
Epoch #246: loss=0.12139543721621687
Epoch #247: loss=0.14149582419883122
Epoch #248: loss=0.08743519843979315
Epoch #249: loss=0.08893249996683815

Training time: 0:04:02.715899

Finished.
n2one setting ETTm2 -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2025/model.pkl', muti_dataset='ETTm2', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.02381e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.89229e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.89229e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5897038337851054, 'MAE': 0.5378831279597931}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2025/model.pkl', muti_dataset='ETTm2', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.98437e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.8385e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.28815637473176037, 'MAE': 0.38040069734757104}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2025/model.pkl', muti_dataset='ETTm2', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.66332e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.07341e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.66332e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5262595309671896, 'MAE': 0.5051805320537619}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2025/model.pkl', muti_dataset='ETTm2', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.61738e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.98967e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.19032155898803846, 'MAE': 0.30939019973158133}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2025/model.pkl', muti_dataset='ETTm2', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
Evaluation result: {'MSE': 0.17235966780543255, 'MAE': 0.2910989930267783}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2025/model.pkl', muti_dataset='ETTm2', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.39135e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.78094e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.39135e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8059906505850171, 'MAE': 0.4618496719251949}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2025/model.pkl', muti_dataset='ETTm2', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.39624e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.69708e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.39624e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3735515316391998, 'MAE': 0.4233587448900125}
Finished.
------------------------- record done -------------------------
n2one setting ETTm2 -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/ETTm2_epochs_250_seed_2025/model.pkl', muti_dataset='ETTm2', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.41871e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.69162e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.41871e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.35069282561030574, 'MAE': 0.41575852057652735}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='exchange', random_seed=2025, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/exchange_epochs_250_seed_2025
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=4.772056043148041
Epoch #1: loss=2.773392230272293
Epoch #2: loss=2.1237521022558212
Epoch #3: loss=1.9558806717395782
Epoch #4: loss=1.8471966832876205
Epoch #5: loss=1.694736585021019
Epoch #6: loss=1.5365388989448547
Epoch #7: loss=1.6161943823099136
Epoch #8: loss=1.5018080323934555
Epoch #9: loss=1.5153958201408386
Epoch #10: loss=1.4600894749164581
Epoch #11: loss=1.4335475862026215
Epoch #12: loss=1.439153179526329
Epoch #13: loss=1.4692643284797668
Epoch #14: loss=1.4390774369239807
Epoch #15: loss=1.4063649028539658
Epoch #16: loss=1.412952408194542
Epoch #17: loss=1.3047797828912735
Epoch #18: loss=1.2455128878355026
Epoch #19: loss=1.2747917473316193
Epoch #20: loss=1.2266446948051453
Epoch #21: loss=1.2612451165914536
Epoch #22: loss=1.2196683585643768
Epoch #23: loss=1.1254393309354782
Epoch #24: loss=1.0913154780864716
Epoch #25: loss=1.2813183218240738
Epoch #26: loss=1.1646950393915176
Epoch #27: loss=1.120298184454441
Epoch #28: loss=1.0266671031713486
Epoch #29: loss=1.041919283568859
Epoch #30: loss=0.9710845798254013
Epoch #31: loss=1.1376834735274315
Epoch #32: loss=0.9766433387994766
Epoch #33: loss=0.9318156093358994
Epoch #34: loss=0.9133034870028496
Epoch #35: loss=0.9339919537305832
Epoch #36: loss=0.9544575661420822
Epoch #37: loss=0.9419590160250664
Epoch #38: loss=0.9171603322029114
Epoch #39: loss=0.7842511534690857
Epoch #40: loss=0.8674466907978058
Epoch #41: loss=0.7487328760325909
Epoch #42: loss=0.8416682779788971
Epoch #43: loss=0.9206766858696938
Epoch #44: loss=0.757267028093338
Epoch #45: loss=0.6744769997894764
Epoch #46: loss=0.8649420365691185
Epoch #47: loss=0.7185148820281029
Epoch #48: loss=0.7259153127670288
Epoch #49: loss=0.6527131870388985
Epoch #50: loss=0.6194763071835041
Epoch #51: loss=0.7488203421235085
Epoch #52: loss=0.6042876467108727
Epoch #53: loss=0.6566896848380566
Epoch #54: loss=0.6807139851152897
Epoch #55: loss=0.6326483003795147
Epoch #56: loss=0.6102807708084583
Epoch #57: loss=0.5081553943455219
Epoch #58: loss=0.7095254585146904
Epoch #59: loss=0.5830712392926216
Epoch #60: loss=0.5951793901622295
Epoch #61: loss=0.42419762909412384
Epoch #62: loss=0.45787256211042404
Epoch #63: loss=0.3497587777674198
Epoch #64: loss=0.5795741192996502
Epoch #65: loss=0.612918920814991
Epoch #66: loss=0.46061696112155914
Epoch #67: loss=0.6522829234600067
Epoch #68: loss=0.5728179141879082
Epoch #69: loss=0.6324578113853931
Epoch #70: loss=0.49386630207300186
Epoch #71: loss=0.4850546233355999
Epoch #72: loss=0.4838380180299282
Epoch #73: loss=0.4705539122223854
Epoch #74: loss=0.38920608535408974
Epoch #75: loss=0.5749181434512138
Epoch #76: loss=0.3996063210070133
Epoch #77: loss=0.43925897777080536
Epoch #78: loss=0.45099011063575745
Epoch #79: loss=0.48951028659939766
Epoch #80: loss=0.5249701477587223
Epoch #81: loss=0.44740230962634087
Epoch #82: loss=0.3738171476870775
Epoch #83: loss=0.56637067720294
Epoch #84: loss=0.4249129071831703
Epoch #85: loss=0.3870071917772293
Epoch #86: loss=0.36705759912729263
Epoch #87: loss=0.2909131944179535
Epoch #88: loss=0.5183184407651424
Epoch #89: loss=0.3053576350212097
Epoch #90: loss=0.30040042847394943
Epoch #91: loss=0.6257596500217915
Epoch #92: loss=0.41432613134384155
Epoch #93: loss=0.43024307303130627
Epoch #94: loss=0.38924216851592064
Epoch #95: loss=0.4485832341015339
Epoch #96: loss=0.4153773710131645
Epoch #97: loss=0.35602868907153606
Epoch #98: loss=0.30374243296682835
Epoch #99: loss=0.35546063631772995
Epoch #100: loss=0.2666613608598709
Epoch #101: loss=0.3694952819496393
Epoch #102: loss=0.19668334629386663
Epoch #103: loss=0.27711458783596754
Epoch #104: loss=0.3368968591094017
Epoch #105: loss=0.3000646512955427
Epoch #106: loss=0.3692101798951626
Epoch #107: loss=0.30145989172160625
Epoch #108: loss=0.3319258280098438
Epoch #109: loss=0.3184406841173768
Epoch #110: loss=0.24364662170410156
Epoch #111: loss=0.25256311148405075
Epoch #112: loss=0.4316349644213915
Epoch #113: loss=0.4161201501265168
Epoch #114: loss=0.3407081961631775
Epoch #115: loss=0.2999438466504216
Epoch #116: loss=0.2622735369950533
Epoch #117: loss=0.28220064006745815
Epoch #118: loss=0.35632855352014303
Epoch #119: loss=0.2608177401125431
Epoch #120: loss=0.34327475540339947
Epoch #121: loss=0.26240912172943354
Epoch #122: loss=0.21686711721122265
Epoch #123: loss=0.14847992733120918
Epoch #124: loss=0.1810004347935319
Epoch #125: loss=0.26612642500549555
Epoch #126: loss=0.1943441377952695
Epoch #127: loss=0.28076588083058596
Epoch #128: loss=0.2624807320535183
Epoch #129: loss=0.2288796752691269
Epoch #130: loss=0.3511523390188813
Epoch #131: loss=0.26254894491285086
Epoch #132: loss=0.23835375253111124
Epoch #133: loss=0.1808271324262023
Epoch #134: loss=0.16769108548760414
Epoch #135: loss=0.27953009959310293
Epoch #136: loss=0.32241931837052107
Epoch #137: loss=0.20484133157879114
Epoch #138: loss=0.2439108919352293
Epoch #139: loss=0.3555308636277914
Epoch #140: loss=0.37988663651049137
Epoch #141: loss=0.2972411438822746
Epoch #142: loss=0.22276475001126528
Epoch #143: loss=0.2582748746499419
Epoch #144: loss=0.23501895274966955
Epoch #145: loss=0.1896136375144124
Epoch #146: loss=0.27119623217731714
Epoch #147: loss=0.1683897478505969
Epoch #148: loss=0.3793196827173233
Epoch #149: loss=0.34926822036504745
Epoch #150: loss=0.18078354559838772
Epoch #151: loss=0.25568012706935406
Epoch #152: loss=0.18541453126817942
Epoch #153: loss=0.250188997015357
Epoch #154: loss=0.19915674161165953
Epoch #155: loss=0.2521881088614464
Epoch #156: loss=0.21413876209408045
Epoch #157: loss=0.1361294793896377
Epoch #158: loss=0.1941802129149437
Epoch #159: loss=0.34301224164664745
Epoch #160: loss=0.1937086908146739
Epoch #161: loss=0.3484720755368471
Epoch #162: loss=0.32314082607626915
Epoch #163: loss=0.2144560469314456
Epoch #164: loss=0.2849845066666603
Epoch #165: loss=0.18116880767047405
Epoch #166: loss=0.19142346549779177
Epoch #167: loss=0.28007206972688437
Epoch #168: loss=0.20322913955897093
Epoch #169: loss=0.14523558039218187
Epoch #170: loss=0.14182558190077543
Epoch #171: loss=0.2227219296619296
Epoch #172: loss=0.2189818467013538
Epoch #173: loss=0.18849410023540258
Epoch #174: loss=0.197202293202281
Epoch #175: loss=0.2528410339727998
Epoch #176: loss=0.167464685626328
Epoch #177: loss=0.26189233316108584
Epoch #178: loss=0.16739123594015837
Epoch #179: loss=0.14632477797567844
Epoch #180: loss=0.14448394253849983
Epoch #181: loss=0.17060696706175804
Epoch #182: loss=0.24813154432922602
Epoch #183: loss=0.15536045283079147
Epoch #184: loss=0.18435007706284523
Epoch #185: loss=0.19285693112760782
Epoch #186: loss=0.24375922791659832
Epoch #187: loss=0.22900853352621198
Epoch #188: loss=0.2174482410773635
Epoch #189: loss=0.2457084972411394
Epoch #190: loss=0.17146683111786842
Epoch #191: loss=0.20670360187068582
Epoch #192: loss=0.15085925441235304
Epoch #193: loss=0.3830129229463637
Epoch #194: loss=0.39107775781303644
Epoch #195: loss=0.2200699020177126
Epoch #196: loss=0.3568045375868678
Epoch #197: loss=0.23752521071583033
Epoch #198: loss=0.21496105194091797
Epoch #199: loss=0.19281782396137714
Epoch #200: loss=0.2436352800577879
Epoch #201: loss=0.1747214375063777
Epoch #202: loss=0.1933429352939129
Epoch #203: loss=0.12447702698409557
Epoch #204: loss=0.31225065561011434
Epoch #205: loss=0.1503172731027007
Epoch #206: loss=0.19513947889208794
Epoch #207: loss=0.16652601305395365
Epoch #208: loss=0.25476356130093336
Epoch #209: loss=0.24559607822448015
Epoch #210: loss=0.17411910742521286
Epoch #211: loss=0.24885554611682892
Epoch #212: loss=0.11498199868947268
Epoch #213: loss=0.18835712503641844
Epoch #214: loss=0.14299367554485798
Epoch #215: loss=0.2258695736527443
Epoch #216: loss=0.24557585921138525
Epoch #217: loss=0.173339469358325
Epoch #218: loss=0.15437101060524583
Epoch #219: loss=0.1845959979109466
Epoch #220: loss=0.17025594087317586
Epoch #221: loss=0.21948987524956465
Epoch #222: loss=0.19399199029430747
Epoch #223: loss=0.14101096568629146
Epoch #224: loss=0.16756841447204351
Epoch #225: loss=0.13978417590260506
Epoch #226: loss=0.1446056910790503
Epoch #227: loss=0.15291381534188986
Epoch #228: loss=0.13847328396514058
Epoch #229: loss=0.19610918452963233
Epoch #230: loss=0.12682630633935332
Epoch #231: loss=0.2392698498442769
Epoch #232: loss=0.17393438424915075
Epoch #233: loss=0.18489325419068336
Epoch #234: loss=0.13982013380154967
Epoch #235: loss=0.16766405617818236
Epoch #236: loss=0.09924765257164836
Epoch #237: loss=0.11747706774622202
Epoch #238: loss=0.17673146352171898
Epoch #239: loss=0.10787609755061567
Epoch #240: loss=0.0729216409381479
Epoch #241: loss=0.14943484705872834
Epoch #242: loss=0.1692766733467579
Epoch #243: loss=0.12943208683282137
Epoch #244: loss=0.14276888826861978
Epoch #245: loss=0.18937530741095543
Epoch #246: loss=0.1019272617995739
Epoch #247: loss=0.16875518509186804
Epoch #248: loss=0.09921435336582363
Epoch #249: loss=0.1322366890963167

Training time: 0:01:27.738854

Finished.
n2one setting exchange -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2025/model.pkl', muti_dataset='exchange', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.47982e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.94127e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5676467441492171, 'MAE': 0.525278471153885}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2025/model.pkl', muti_dataset='exchange', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.45806e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.93306e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.2583629058397412, 'MAE': 0.3605253975831452}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2025/model.pkl', muti_dataset='exchange', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.02342e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.98867e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.02765e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.02342e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.44166230913141213, 'MAE': 0.452764074458821}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2025/model.pkl', muti_dataset='exchange', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.85195e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.93597e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.85054e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.17465064291506663, 'MAE': 0.29297269473543736}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2025/model.pkl', muti_dataset='exchange', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.23847e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.1455162147771457, 'MAE': 0.26660862607270314}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2025/model.pkl', muti_dataset='exchange', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.01713e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.01882e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.16117e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.01713e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8426655736293392, 'MAE': 0.48104813480187064}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2025/model.pkl', muti_dataset='exchange', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.53124e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.96604e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.92254e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.53124e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.337777235537254, 'MAE': 0.41001949433521984}
Finished.
------------------------- record done -------------------------
n2one setting exchange -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/exchange_epochs_250_seed_2025/model.pkl', muti_dataset='exchange', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.01484e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.01108e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.9134e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.01484e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.4491124250187373, 'MAE': 0.49097766304739304}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='traffic', random_seed=2025, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/traffic_epochs_250_seed_2025
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=1.0640146102401884
Epoch #1: loss=0.35467933050925105
Epoch #2: loss=0.25423284682278846
Epoch #3: loss=0.19766780028763614
Epoch #4: loss=0.15646022943706359
Epoch #5: loss=0.1257442789813482
Epoch #6: loss=0.10404785370277003
Epoch #7: loss=0.1045313277551926
Epoch #8: loss=0.07735245566590411
Epoch #9: loss=0.06907559187408632
Epoch #10: loss=0.0670672185489964
Epoch #11: loss=0.07429466277075684
Epoch #12: loss=0.05267036309208626
Epoch #13: loss=0.04569115696189679
Epoch #14: loss=0.04455338241348773
Epoch #15: loss=0.05394372141060015
Epoch #16: loss=0.03536525623669757
Epoch #17: loss=0.03796893421894376
Epoch #18: loss=0.04002461862035113
Epoch #19: loss=0.027619918472870424
Epoch #20: loss=0.03331167358481552
Epoch #21: loss=0.028202812969733218
Epoch #22: loss=0.03608466001101089
Epoch #23: loss=0.03295545223743813
Epoch #24: loss=0.03030927713394269
Epoch #25: loss=0.038931702427337005
Epoch #26: loss=0.02334286994895014
Epoch #27: loss=0.024988463434448525
Epoch #28: loss=0.026858125284439486
Epoch #29: loss=0.024876792448558768
Epoch #30: loss=0.025850536833028903
Epoch #31: loss=0.028824856731686267
Epoch #32: loss=0.022675314233038712
Epoch #33: loss=0.02327537922007129
Epoch #34: loss=0.023095946594356428
Epoch #35: loss=0.02065505866412929
Epoch #36: loss=0.01965458810364821
Epoch #37: loss=0.020866849190142794
Epoch #38: loss=0.02362043185082854
Epoch #39: loss=0.019672619676492403
Epoch #40: loss=0.02306732349165255
Epoch #41: loss=0.02025881928962757
Epoch #42: loss=0.015264415340995083
Epoch #43: loss=0.03537515235112401
Epoch #44: loss=0.01686564096801465
Epoch #45: loss=0.01893470577160685
Epoch #46: loss=0.019780282370825547
Epoch #47: loss=0.022768415278566594
Epoch #48: loss=0.018527375171763234
Epoch #49: loss=0.020782102317440706
Epoch #50: loss=0.018021682060089743
Epoch #51: loss=0.015282388663029065
Epoch #52: loss=0.017783504849520734
Epoch #53: loss=0.021154449833786598
Epoch #54: loss=0.0136511912607556
Epoch #55: loss=0.01970066056712941
Epoch #56: loss=0.01635873906892128
Epoch #57: loss=0.017113111181151698
Epoch #58: loss=0.014846166484735867
Epoch #59: loss=0.01648021045220873
Epoch #60: loss=0.015193497881808118
Epoch #61: loss=0.02091900147878502
Epoch #62: loss=0.016942988905373404
Epoch #63: loss=0.021119874035707285
Epoch #64: loss=0.013593809972248438
Epoch #65: loss=0.016377580360770916
Epoch #66: loss=0.014998084065982324
Epoch #67: loss=0.024984289582477334
Epoch #68: loss=0.01618613027703485
Epoch #69: loss=0.014432409436723137
Epoch #70: loss=0.01961963232048882
Epoch #71: loss=0.012359024827644605
Epoch #72: loss=0.014615993693567112
Epoch #73: loss=0.019159901615047478
Epoch #74: loss=0.013830388927026793
Epoch #75: loss=0.022986624243928784
Epoch #76: loss=0.012137296498972456
Epoch #77: loss=0.015179601441226088
Epoch #78: loss=0.015173142347506436
Epoch #79: loss=0.014133636207236604
Epoch #80: loss=0.01207553994195782
Epoch #81: loss=0.017945909197118106
Epoch #82: loss=0.016141272137048784
Epoch #83: loss=0.011575838132228502
Epoch #84: loss=0.016850752354960936
Epoch #85: loss=0.01940001559133421
Epoch #86: loss=0.015960618146231155
Epoch #87: loss=0.011874838087374448
Epoch #88: loss=0.009230906563460407
Epoch #89: loss=0.013614491295165884
Epoch #90: loss=0.01499824723952829
Epoch #91: loss=0.013630677307417061
Epoch #92: loss=0.00999921076154372
Epoch #93: loss=0.019833121573746424
Epoch #94: loss=0.01178199700718657
Epoch #95: loss=0.015307735843776257
Epoch #96: loss=0.01314305390949521
Epoch #97: loss=0.013808762121339503
Epoch #98: loss=0.013271218022869645
Epoch #99: loss=0.013279493177242646
Epoch #100: loss=0.013946258999596905
Epoch #101: loss=0.007514594243436926
Epoch #102: loss=0.015896439865831686
Epoch #103: loss=0.012119942217370552
Epoch #104: loss=0.012923521917257156
Epoch #105: loss=0.014359362506038366
Epoch #106: loss=0.01302045871991326
Epoch #107: loss=0.01126332224926478
Epoch #108: loss=0.013777808933624168
Epoch #109: loss=0.01542038398510139
Epoch #110: loss=0.01349639111244943
Epoch #111: loss=0.009671161475733436
Epoch #112: loss=0.01540179722647322
Epoch #113: loss=0.009751949521674875
Epoch #114: loss=0.011943591406847498
Epoch #115: loss=0.01451292570680785
Epoch #116: loss=0.010606942140170305
Epoch #117: loss=0.01154102865318074
Epoch #118: loss=0.011196321746791721
Epoch #119: loss=0.00839243895054704
Epoch #120: loss=0.00825328492408774
Epoch #121: loss=0.013093606063337367
Epoch #122: loss=0.01547526544881169
Epoch #123: loss=0.009651539591937855
Epoch #124: loss=0.01260796763463942
Epoch #125: loss=0.012405651599203081
Epoch #126: loss=0.011513233174449168
Epoch #127: loss=0.014501230786112894
Epoch #128: loss=0.011298492551322599
Epoch #129: loss=0.013784007320683337
Epoch #130: loss=0.012581246211905229
Epoch #131: loss=0.00849805722213534
Epoch #132: loss=0.014924179208346074
Epoch #133: loss=0.010255174773588983
Epoch #134: loss=0.012316870333366484
Epoch #135: loss=0.013233100393120678
Epoch #136: loss=0.012457617208752738
Epoch #137: loss=0.01046164477833659
Epoch #138: loss=0.009675774280420232
Epoch #139: loss=0.011441595879554362
Epoch #140: loss=0.012984691355305857
Epoch #141: loss=0.01040047427073056
Epoch #142: loss=0.008270316907745491
Epoch #143: loss=0.009871688995367453
Epoch #144: loss=0.011300445341129934
Epoch #145: loss=0.008742432384067021
Epoch #146: loss=0.010781724620224226
Epoch #147: loss=0.01269614589763881
Epoch #148: loss=0.01223533626259148
Epoch #149: loss=0.007757386025796623
Epoch #150: loss=0.011722503806076232
Epoch #151: loss=0.011183629617143072
Epoch #152: loss=0.009277824926127413
Epoch #153: loss=0.009655062314309288
Epoch #154: loss=0.008465060360507938
Epoch #155: loss=0.016498014390810417
Epoch #156: loss=0.009262657458875048
Epoch #157: loss=0.006405897844971106
Epoch #158: loss=0.01117600080391188
Epoch #159: loss=0.011496543339238904
Epoch #160: loss=0.019372929932608748
Epoch #161: loss=0.00727167888728509
Epoch #162: loss=0.011523792731894121
Epoch #163: loss=0.018456326022706634
Epoch #164: loss=0.007379851813733728
Epoch #165: loss=0.007413508096243781
Epoch #166: loss=0.011345267894626768
Epoch #167: loss=0.010640810855269689
Epoch #168: loss=0.008448092000880533
Epoch #169: loss=0.009911936107688538
Epoch #170: loss=0.010630556884431874
Epoch #171: loss=0.008155088002620353
Epoch #172: loss=0.008895571311812749
Epoch #173: loss=0.01588531753156748
Epoch #174: loss=0.009378501899917761
Epoch #175: loss=0.01653478648681696
Epoch #176: loss=0.007231132004413
Epoch #177: loss=0.009650582101035608
Epoch #178: loss=0.028326553096138525
Epoch #179: loss=0.009484714682203427
Epoch #180: loss=0.010191239142666222
Epoch #181: loss=0.007490649649275363
Epoch #182: loss=0.010397403911871645
Epoch #183: loss=0.013701384720005464
Epoch #184: loss=0.014251083525737993
Epoch #185: loss=0.007745823937693364
Epoch #186: loss=0.012025520483807341
Epoch #187: loss=0.006184882149631736
Epoch #188: loss=0.01027520302287546
Epoch #189: loss=0.008518875827989865
Epoch #190: loss=0.012999510987655836
Epoch #191: loss=0.007721332506081989
Epoch #192: loss=0.011979305135897709
Epoch #193: loss=0.008052588405026546
Epoch #194: loss=0.007942652651531516
Epoch #195: loss=0.007357593901645691
Epoch #196: loss=0.010101452970955216
Epoch #197: loss=0.010347782599017469
Epoch #198: loss=0.010959957663808403
Epoch #199: loss=0.006835702689890717
Epoch #200: loss=0.008718912420447148
Epoch #201: loss=0.010929009183616542
Epoch #202: loss=0.015000859571833124
Epoch #203: loss=0.007031218150759974
Epoch #204: loss=0.010188287560291331
Epoch #205: loss=0.010622710257576452
Epoch #206: loss=0.010551811200468001
Epoch #207: loss=0.007159428155270358
Epoch #208: loss=0.00852085863541028
Epoch #209: loss=0.007779915712348654
Epoch #210: loss=0.010515708114752376
Epoch #211: loss=0.014156097949334888
Epoch #212: loss=0.00935171400224536
Epoch #213: loss=0.006907734832891318
Epoch #214: loss=0.008862777557242267
Epoch #215: loss=0.008480203834437552
Epoch #216: loss=0.022594949218481396
Epoch #217: loss=0.01111312198877797
Epoch #218: loss=0.0060028323071823495
Epoch #219: loss=0.007014948498100996
Epoch #220: loss=0.009690854767296385
Epoch #221: loss=0.010331840515997004
Epoch #222: loss=0.009988103870541751
Epoch #223: loss=0.006752822042395995
Epoch #224: loss=0.009323170587348616
Epoch #225: loss=0.008911845042890752
Epoch #226: loss=0.008641099624131567
Epoch #227: loss=0.00789205338091148
Epoch #228: loss=0.010869956341271074
Epoch #229: loss=0.012318007558822716
Epoch #230: loss=0.010378698712571906
Epoch #231: loss=0.013869193133937852
Epoch #232: loss=0.007152364712053604
Epoch #233: loss=0.006509515378626092
Epoch #234: loss=0.0079925161095191
Epoch #235: loss=0.0262387680227801
Epoch #236: loss=0.006740244474759533
Epoch #237: loss=0.006886792593627381
Epoch #238: loss=0.0064607122810363005
Epoch #239: loss=0.0069143097511452966
Epoch #240: loss=0.010557063029982537
Epoch #241: loss=0.007945027138631407
Epoch #242: loss=0.007958056256105489
Epoch #243: loss=0.009465658457231366
Epoch #244: loss=0.006968337666528141
Epoch #245: loss=0.007398376700437569
Epoch #246: loss=0.010196950915836774
Epoch #247: loss=0.008608993872983904
Epoch #248: loss=0.010206046106928275
Epoch #249: loss=0.008715621074523859

Training time: 3:19:10.902987

Finished.
n2one setting traffic -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2025/model.pkl', muti_dataset='traffic', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.21795e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.51121e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.21795e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.626979025775864, 'MAE': 0.5778779370547149}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2025/model.pkl', muti_dataset='traffic', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.18007e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.40569e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.40569e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3117142956795238, 'MAE': 0.3992820522827778}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2025/model.pkl', muti_dataset='traffic', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.03453e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.05223e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.09494e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.03453e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5588336097852671, 'MAE': 0.5380511857488063}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2025/model.pkl', muti_dataset='traffic', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.44134e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.94089e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.99037e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.19983407621912744, 'MAE': 0.32267150452325555}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2025/model.pkl', muti_dataset='traffic', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.98393e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3026761027582509, 'MAE': 0.36034563029005373}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2025/model.pkl', muti_dataset='traffic', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=8.0396e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.65368e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.21833e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=8.0396e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.8508229837764285, 'MAE': 0.4805137438836183}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2025/model.pkl', muti_dataset='traffic', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=7.71372e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.65971e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.20775e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=7.71372e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.40289887390950985, 'MAE': 0.45217867222543584}
Finished.
------------------------- record done -------------------------
n2one setting traffic -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/traffic_epochs_250_seed_2025/model.pkl', muti_dataset='traffic', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.08612e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.42275e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.39577697503405157, 'MAE': 0.4709591682239379}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='electricity', random_seed=2025, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/electricity_epochs_250_seed_2025
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=1.7119109186799355
Epoch #1: loss=0.6755314291080582
Epoch #2: loss=0.4690779813353518
Epoch #3: loss=0.372825568895845
Epoch #4: loss=0.3009524322187418
Epoch #5: loss=0.27553286104001734
Epoch #6: loss=0.2275406293501364
Epoch #7: loss=0.18180377600349
Epoch #8: loss=0.1800659211393086
Epoch #9: loss=0.15800992018801402
Epoch #10: loss=0.14828172846003856
Epoch #11: loss=0.12428718899315763
Epoch #12: loss=0.12558250135025503
Epoch #13: loss=0.10440992351586574
Epoch #14: loss=0.09670338293427247
Epoch #15: loss=0.11253636865949147
Epoch #16: loss=0.08328403473898444
Epoch #17: loss=0.07697201214986056
Epoch #18: loss=0.07355606659515718
Epoch #19: loss=0.06337281033060169
Epoch #20: loss=0.06553436603652447
Epoch #21: loss=0.06605827750353799
Epoch #22: loss=0.0459874903818018
Epoch #23: loss=0.06102640751018145
Epoch #24: loss=0.047794191436580966
Epoch #25: loss=0.0587016115852884
Epoch #26: loss=0.03908061616070499
Epoch #27: loss=0.03546209805325904
Epoch #28: loss=0.04478539688356012
Epoch #29: loss=0.04913344292399529
Epoch #30: loss=0.030472342318759484
Epoch #31: loss=0.03854860668070614
Epoch #32: loss=0.04835212554831951
Epoch #33: loss=0.036047266229749235
Epoch #34: loss=0.0348861130002329
Epoch #35: loss=0.03146219161713374
Epoch #36: loss=0.03376463322531768
Epoch #37: loss=0.030773104036464778
Epoch #38: loss=0.027948376894536837
Epoch #39: loss=0.02863326281703707
Epoch #40: loss=0.025809055914510493
Epoch #41: loss=0.025647427168648654
Epoch #42: loss=0.03366428471280616
Epoch #43: loss=0.027211980348035136
Epoch #44: loss=0.0306366923456646
Epoch #45: loss=0.020327283857198796
Epoch #46: loss=0.027248267325894717
Epoch #47: loss=0.02350707482430515
Epoch #48: loss=0.024080576859646683
Epoch #49: loss=0.045607003252053885
Epoch #50: loss=0.03188460397191717
Epoch #51: loss=0.01882200690734888
Epoch #52: loss=0.023728653863275488
Epoch #53: loss=0.021420693391646806
Epoch #54: loss=0.014602667190398546
Epoch #55: loss=0.017066609732026228
Epoch #56: loss=0.03902809577975915
Epoch #57: loss=0.023244465119930745
Epoch #58: loss=0.03135966068254117
Epoch #59: loss=0.020887290538474337
Epoch #60: loss=0.01762234214424936
Epoch #61: loss=0.015341970432372735
Epoch #62: loss=0.025687557792202553
Epoch #63: loss=0.015891365008066028
Epoch #64: loss=0.02677297449382051
Epoch #65: loss=0.02123907772676201
Epoch #66: loss=0.014663162881673845
Epoch #67: loss=0.020577850996740046
Epoch #68: loss=0.015923349438104605
Epoch #69: loss=0.026489630506542218
Epoch #70: loss=0.021833755576045968
Epoch #71: loss=0.018423811963946497
Epoch #72: loss=0.01426803391365874
Epoch #73: loss=0.02798013568448187
Epoch #74: loss=0.0158988478756002
Epoch #75: loss=0.013152270441486086
Epoch #76: loss=0.020031651680363558
Epoch #77: loss=0.02197535475498396
Epoch #78: loss=0.015863376740486625
Epoch #79: loss=0.014650652147002657
Epoch #80: loss=0.01446550030470173
Epoch #81: loss=0.017817695878628886
Epoch #82: loss=0.0168494080154173
Epoch #83: loss=0.018906418353970514
Epoch #84: loss=0.013015567796700852
Epoch #85: loss=0.04604891998598329
Epoch #86: loss=0.04262189794769888
Epoch #87: loss=0.017323914486653755
Epoch #88: loss=0.012046214302267728
Epoch #89: loss=0.012065837650075323
Epoch #90: loss=0.014826626940652137
Epoch #91: loss=0.013442987713939583
Epoch #92: loss=0.01949269776312327
Epoch #93: loss=0.01586987478118187
Epoch #94: loss=0.02636413407897159
Epoch #95: loss=0.04367634836574175
Epoch #96: loss=0.014413184115323717
Epoch #97: loss=0.07803659226072261
Epoch #98: loss=0.033234887939190196
Epoch #99: loss=0.013946514195150398
Epoch #100: loss=0.007919165017293632
Epoch #101: loss=0.00932191008599649
Epoch #102: loss=0.014728936968578717
Epoch #103: loss=0.01176184380167335
Epoch #104: loss=0.011986020585990619
Epoch #105: loss=0.014326382853087861
Epoch #106: loss=0.022101427322526308
Epoch #107: loss=0.011095386564606841
Epoch #108: loss=0.015728123156379944
Epoch #109: loss=0.016468678829519474
Epoch #110: loss=0.013855203211697753
Epoch #111: loss=0.010526028796493706
Epoch #112: loss=0.01336741008135023
Epoch #113: loss=0.02118239515153488
Epoch #114: loss=0.020698232734644773
Epoch #115: loss=0.01848021594153259
Epoch #116: loss=0.009987286056284546
Epoch #117: loss=0.007905908323704
Epoch #118: loss=0.015039734426498518
Epoch #119: loss=0.013124695875518013
Epoch #120: loss=0.0123797785365632
Epoch #121: loss=0.015053968863725673
Epoch #122: loss=0.010627006242690735
Epoch #123: loss=0.014652440724807364
Epoch #124: loss=0.013177656735593853
Epoch #125: loss=0.02034341541936366
Epoch #126: loss=0.008242226591459954
Epoch #127: loss=0.010665754813917062
Epoch #128: loss=0.014515297962287354
Epoch #129: loss=0.01327675586953292
Epoch #130: loss=0.010625271950964453
Epoch #131: loss=0.010565557457634314
Epoch #132: loss=0.012080189651545612
Epoch #133: loss=0.013706355888071554
Epoch #134: loss=0.010867267140227942
Epoch #135: loss=0.012292025170167125
Epoch #136: loss=0.0067770800110267485
Epoch #137: loss=0.007429492508726357
Epoch #138: loss=0.008565328070332478
Epoch #139: loss=0.01422580367948271
Epoch #140: loss=0.02156892477050917
Epoch #141: loss=0.010931317245461137
Epoch #142: loss=0.02629203004693624
Epoch #143: loss=0.009640195401896059
Epoch #144: loss=0.009733030102339012
Epoch #145: loss=0.011484693909191592
Epoch #146: loss=0.011530486034425962
Epoch #147: loss=0.009398626327979585
Epoch #148: loss=0.012466054263225876
Epoch #149: loss=0.014903528867158865
Epoch #150: loss=0.010490525679625107
Epoch #151: loss=0.0108260343223375
Epoch #152: loss=0.01114932367423291
Epoch #153: loss=0.005630650508527229
Epoch #154: loss=0.016311480368326515
Epoch #155: loss=0.01043038411142821
Epoch #156: loss=0.014336280018178967
Epoch #157: loss=0.010717694245415197
Epoch #158: loss=0.005388790130835735
Epoch #159: loss=0.009044485388256935
Epoch #160: loss=0.009841027443305912
Epoch #161: loss=0.007092631282357389
Epoch #162: loss=0.009225646753046905
Epoch #163: loss=0.022383996394660172
Epoch #164: loss=0.01301192603747845
Epoch #165: loss=0.019575797879997338
Epoch #166: loss=0.012203625676068376
Epoch #167: loss=0.02562742867391713
Epoch #168: loss=0.012594356127968203
Epoch #169: loss=0.00559315510793927
Epoch #170: loss=0.005786718760680181
Epoch #171: loss=0.007329880013953854
Epoch #172: loss=0.009144522311170281
Epoch #173: loss=0.00944333167810492
Epoch #174: loss=0.01086628999099762
Epoch #175: loss=0.012670987290388257
Epoch #176: loss=0.017166813025309056
Epoch #177: loss=0.01071535285549221
Epoch #178: loss=0.01255230423925456
Epoch #179: loss=0.012157787140923033
Epoch #180: loss=0.014985487359083428
Epoch #181: loss=0.006245382532885014
Epoch #182: loss=0.0054897839597239945
Epoch #183: loss=0.00688907673758871
Epoch #184: loss=0.006344647993673817
Epoch #185: loss=0.008645252854674997
Epoch #186: loss=0.00789297199728275
Epoch #187: loss=0.009339007888985885
Epoch #188: loss=0.0104676442120349
Epoch #189: loss=0.01964024069658814
Epoch #190: loss=0.006355428518408277
Epoch #191: loss=0.013932004263693456
Epoch #192: loss=0.011467771873397275
Epoch #193: loss=0.015578563041322085
Epoch #194: loss=0.009222487370139771
Epoch #195: loss=0.004924532315549455
Epoch #196: loss=0.006183425058930607
Epoch #197: loss=0.005268516882672337
Epoch #198: loss=0.008257568278839533
Epoch #199: loss=0.013469776644036348
Epoch #200: loss=0.013184861977246656
Epoch #201: loss=0.010125251133843525
Epoch #202: loss=0.006821597259061199
Epoch #203: loss=0.009297665934995212
Epoch #204: loss=0.005789503297357635
Epoch #205: loss=0.007433760703328817
Epoch #206: loss=0.006918852664660836
Epoch #207: loss=0.010658862743079894
Epoch #208: loss=0.010980252349876865
Epoch #209: loss=0.006589129894813726
Epoch #210: loss=0.008352978008681752
Epoch #211: loss=0.013742234115688293
Epoch #212: loss=0.00796491301314241
Epoch #213: loss=0.011217029918836737
Epoch #214: loss=0.005878057624605075
Epoch #215: loss=0.007062275132299995
Epoch #216: loss=0.011449579897236611
Epoch #217: loss=0.008595000997452628
Epoch #218: loss=0.008595280489424458
Epoch #219: loss=0.009363532589307501
Epoch #220: loss=0.006311850335066007
Epoch #221: loss=0.010096290867414464
Epoch #222: loss=0.012853081532223788
Epoch #223: loss=0.011771899072824749
Epoch #224: loss=0.011463099592321805
Epoch #225: loss=0.010117562572947613
Epoch #226: loss=0.014813580761505494
Epoch #227: loss=0.009556624183222373
Epoch #228: loss=0.009187636649993327
Epoch #229: loss=0.007274921016979417
Epoch #230: loss=0.006215376069158536
Epoch #231: loss=0.007528075992965322
Epoch #232: loss=0.009761178580702448
Epoch #233: loss=0.005840408598904054
Epoch #234: loss=0.005601268522154882
Epoch #235: loss=0.009355949920477386
Epoch #236: loss=0.00844159354078598
Epoch #237: loss=0.008980227318429896
Epoch #238: loss=0.012479636209438094
Epoch #239: loss=0.004310777268972324
Epoch #240: loss=0.008165881017040218
Epoch #241: loss=0.05393881216134609
Epoch #242: loss=0.008894662279019139
Epoch #243: loss=0.005378677827056579
Epoch #244: loss=0.011650680820113106
Epoch #245: loss=0.010034408085312944
Epoch #246: loss=0.014320298504937335
Epoch #247: loss=0.008044688114127568
Epoch #248: loss=0.006057684978171371
Epoch #249: loss=0.007931341226644252

Training time: 1:27:23.748193

Finished.
n2one setting electricity -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2025/model.pkl', muti_dataset='electricity', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.96498e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.9483e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.813e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.96498e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5690224231395083, 'MAE': 0.5347976292220229}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2025/model.pkl', muti_dataset='electricity', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.91841e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.0054e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.91001e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.91841e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3078949720703489, 'MAE': 0.3976447835287545}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2025/model.pkl', muti_dataset='electricity', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.0165e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.5087e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.9578e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.0165e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5394155997478972, 'MAE': 0.5111478408280706}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2025/model.pkl', muti_dataset='electricity', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.48236e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.53701e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=9.48236e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.19850363692750236, 'MAE': 0.3208344914414979}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2025/model.pkl', muti_dataset='electricity', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.46356e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.24006781145722347, 'MAE': 0.33528619031420753}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2025/model.pkl', muti_dataset='electricity', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=7.37644e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.47006e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.66671e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=7.37644e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.7947421267757241, 'MAE': 0.4551764588858716}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2025/model.pkl', muti_dataset='electricity', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=7.26055e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.46137e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.64129e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=7.26055e-09): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.35633431692351336, 'MAE': 0.42098185855709935}
Finished.
------------------------- record done -------------------------
n2one setting electricity -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/electricity_epochs_250_seed_2025/model.pkl', muti_dataset='electricity', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.09655e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.07104e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.13008e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.09655e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5712143209801153, 'MAE': 0.5672811109970277}
Finished.
------------------------- record done -------------------------
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=250, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.0003, max_threads=None, max_train_length=3000, muti_dataset='weather', random_seed=2025, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None)
training/weather_epochs_250_seed_2025
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
done
Epoch #0: loss=10.963155407171984
Epoch #1: loss=4.4528568983078
Epoch #2: loss=3.6894599932890673
Epoch #3: loss=3.008626626088069
Epoch #4: loss=2.459854483604431
Epoch #5: loss=2.2599971844599795
Epoch #6: loss=2.1421563075138974
Epoch #7: loss=2.286932573868678
Epoch #8: loss=2.0722972338016215
Epoch #9: loss=1.9247000125738292
Epoch #10: loss=1.8716366336895869
Epoch #11: loss=1.8388751240877004
Epoch #12: loss=1.7820614622189448
Epoch #13: loss=1.6064198567317083
Epoch #14: loss=1.4943505296340356
Epoch #15: loss=1.4617294027255132
Epoch #16: loss=1.4234508459384625
Epoch #17: loss=1.2376687159905067
Epoch #18: loss=1.2797420116571279
Epoch #19: loss=1.2321420655800746
Epoch #20: loss=1.0844765580617464
Epoch #21: loss=1.0949413661773388
Epoch #22: loss=1.071955891755911
Epoch #23: loss=1.0325478246578803
Epoch #24: loss=1.1017326437509978
Epoch #25: loss=1.0766064960222979
Epoch #26: loss=0.9674734129355504
Epoch #27: loss=0.9211546113857856
Epoch #28: loss=1.0644608117066896
Epoch #29: loss=1.0130437131111438
Epoch #30: loss=0.9303275438455435
Epoch #31: loss=0.8602304435693301
Epoch #32: loss=0.9133839653088496
Epoch #33: loss=0.9318062479679401
Epoch #34: loss=0.8380288412937751
Epoch #35: loss=1.0117645355371327
Epoch #36: loss=0.8472034747783954
Epoch #37: loss=0.7251547850095309
Epoch #38: loss=0.7924838547523205
Epoch #39: loss=0.7662106660696176
Epoch #40: loss=0.7186130101864154
Epoch #41: loss=0.6663629618974832
Epoch #42: loss=0.6816438505282769
Epoch #43: loss=0.6523471589271839
Epoch #44: loss=0.5738329944702295
Epoch #45: loss=0.5822013330001098
Epoch #46: loss=0.5831108013024697
Epoch #47: loss=0.6065331422365628
Epoch #48: loss=0.6420558312764535
Epoch #49: loss=0.5737153555338199
Epoch #50: loss=0.5692956631000226
Epoch #51: loss=0.5545596514756863
Epoch #52: loss=0.531843731036553
Epoch #53: loss=0.48118187143252444
Epoch #54: loss=0.4900960005246676
Epoch #55: loss=0.5067716401356918
Epoch #56: loss=0.4981696800543712
Epoch #57: loss=0.567614163343723
Epoch #58: loss=0.530742693405885
Epoch #59: loss=0.5013687003117341
Epoch #60: loss=0.6792650921986654
Epoch #61: loss=0.5349802523851395
Epoch #62: loss=0.44403990644675034
Epoch #63: loss=0.44745686421027553
Epoch #64: loss=0.5519541398837016
Epoch #65: loss=0.5172781348228455
Epoch #66: loss=0.5031133408729846
Epoch #67: loss=0.44723128699339354
Epoch #68: loss=0.503253195148248
Epoch #69: loss=0.41369738372472614
Epoch #70: loss=0.3914920355264957
Epoch #71: loss=0.3453287356174909
Epoch #72: loss=0.5281860473064276
Epoch #73: loss=0.5232663108752325
Epoch #74: loss=0.38635320846851057
Epoch #75: loss=0.36378108767362743
Epoch #76: loss=0.3352674732987697
Epoch #77: loss=0.4282882958650589
Epoch #78: loss=0.3661351060638061
Epoch #79: loss=0.3294835021862617
Epoch #80: loss=0.323336066534886
Epoch #81: loss=0.3170024139376787
Epoch #82: loss=0.32927518567213643
Epoch #83: loss=0.2912856157009418
Epoch #84: loss=0.4143988174887804
Epoch #85: loss=0.31362295380005467
Epoch #86: loss=0.2643363011571077
Epoch #87: loss=0.33432696301203507
Epoch #88: loss=0.2737509092459312
Epoch #89: loss=0.23882457327384216
Epoch #90: loss=0.37709708225268584
Epoch #91: loss=0.3691462685282414
Epoch #92: loss=0.23994935762423736
Epoch #93: loss=0.24029557406902313
Epoch #94: loss=0.23580950154707983
Epoch #95: loss=0.35912578209088397
Epoch #96: loss=0.2469646753026889
Epoch #97: loss=0.29995161352249294
Epoch #98: loss=0.4071799155611258
Epoch #99: loss=0.2759457855270459
Epoch #100: loss=0.24948594776483682
Epoch #101: loss=0.23838002463945976
Epoch #102: loss=0.20967873673026377
Epoch #103: loss=0.24569207745102736
Epoch #104: loss=0.20962752917638192
Epoch #105: loss=0.2196069064621742
Epoch #106: loss=0.33469904214143753
Epoch #107: loss=0.21334075068052
Epoch #108: loss=0.2332383207976818
Epoch #109: loss=0.3813349148974969
Epoch #110: loss=0.24247317359997675
Epoch #111: loss=0.23240028837552437
Epoch #112: loss=0.249072482666144
Epoch #113: loss=0.47714196604031783
Epoch #114: loss=0.3916480667315997
Epoch #115: loss=0.23786416936379212
Epoch #116: loss=0.2228592370565121
Epoch #117: loss=0.18552178201767114
Epoch #118: loss=0.1636279718233989
Epoch #119: loss=0.1993702890781256
Epoch #120: loss=0.18668872404557008
Epoch #121: loss=0.1768143721497976
Epoch #122: loss=0.20897394877213699
Epoch #123: loss=0.1950148455798626
Epoch #124: loss=0.16158538025159103
Epoch #125: loss=0.18532081521474397
Epoch #126: loss=0.21585327501480395
Epoch #127: loss=0.20217504151738608
Epoch #128: loss=0.12994870056326574
Epoch #129: loss=0.15860718975846583
Epoch #130: loss=0.19978264002845839
Epoch #131: loss=0.15067588738523996
Epoch #132: loss=0.14756856543513444
Epoch #133: loss=0.20536529244138643
Epoch #134: loss=0.18873255556592575
Epoch #135: loss=0.16460234901079765
Epoch #136: loss=0.12318051835665336
Epoch #137: loss=0.19511646748735353
Epoch #138: loss=0.16741649004129264
Epoch #139: loss=0.20135767557300055
Epoch #140: loss=0.15103751736191603
Epoch #141: loss=0.13575831026985094
Epoch #142: loss=0.184502041970308
Epoch #143: loss=0.10886959588298431
Epoch #144: loss=0.11535801996405308
Epoch #145: loss=0.11044274857984139
Epoch #146: loss=0.12998543923290876
Epoch #147: loss=0.14030117426927274
Epoch #148: loss=0.1019725683503426
Epoch #149: loss=0.13331622530061465
Epoch #150: loss=0.11724924998214611
Epoch #151: loss=0.11745948143876515
Epoch #152: loss=0.11137925890775827
Epoch #153: loss=0.11738352391582269
Epoch #154: loss=0.1612077531619714
Epoch #155: loss=0.17890083589232886
Epoch #156: loss=0.12378141226676795
Epoch #157: loss=0.10645850719167636
Epoch #158: loss=0.17321146508822075
Epoch #159: loss=0.15714953266657317
Epoch #160: loss=0.09995632346432942
Epoch #161: loss=0.09924535725552303
Epoch #162: loss=0.09712002669962552
Epoch #163: loss=0.221373454739268
Epoch #164: loss=0.1715645052206058
Epoch #165: loss=0.102027513516637
Epoch #166: loss=0.10445075539442208
Epoch #167: loss=0.07669308910576197
Epoch #168: loss=0.10711867347932778
Epoch #169: loss=0.3758537545800209
Epoch #170: loss=0.17629710011757338
Epoch #171: loss=0.12648847928413978
Epoch #172: loss=0.10995966382324696
Epoch #173: loss=0.10047250054776669
Epoch #174: loss=0.10656454184880623
Epoch #175: loss=0.09524939545931724
Epoch #176: loss=0.0826401007719911
Epoch #177: loss=0.09831991806053199
Epoch #178: loss=0.11254677348412
Epoch #179: loss=0.07399499817536427
Epoch #180: loss=0.06264833145989822
Epoch #181: loss=0.07577743517378202
Epoch #182: loss=0.2417503255777634
Epoch #183: loss=0.08416109875990795
Epoch #184: loss=0.08601444852180205
Epoch #185: loss=0.09383961006712455
Epoch #186: loss=0.07545785061441936
Epoch #187: loss=0.07094361905295116
Epoch #188: loss=0.06270987576303574
Epoch #189: loss=0.11740273079619958
Epoch #190: loss=0.20400737082728973
Epoch #191: loss=0.24556071569140142
Epoch #192: loss=0.1377998166359388
Epoch #193: loss=0.13619843540856472
Epoch #194: loss=0.076336878280227
Epoch #195: loss=0.0973110358015849
Epoch #196: loss=0.11905444793116587
Epoch #197: loss=0.07373133538147578
Epoch #198: loss=0.05785478988232521
Epoch #199: loss=0.09578997004204072
Epoch #200: loss=0.06352161386838326
Epoch #201: loss=0.06419464265211271
Epoch #202: loss=0.0875592097066916
Epoch #203: loss=0.08297481373525582
Epoch #204: loss=0.10540717761390485
Epoch #205: loss=0.07149462057993962
Epoch #206: loss=0.060352068609343126
Epoch #207: loss=0.15866928146435663
Epoch #208: loss=0.33713734780366605
Epoch #209: loss=0.1459562209649728
Epoch #210: loss=0.17663140279742387
Epoch #211: loss=0.45037608479078
Epoch #212: loss=0.21506414648431998
Epoch #213: loss=0.1567805346388083
Epoch #214: loss=0.16964381732619727
Epoch #215: loss=0.14568004570901394
Epoch #216: loss=0.1147488193729749
Epoch #217: loss=0.15250760331176794
Epoch #218: loss=0.09590125370484132
Epoch #219: loss=0.06959152450928321
Epoch #220: loss=0.060291206965652794
Epoch #221: loss=0.1867920020595193
Epoch #222: loss=0.10616009940321629
Epoch #223: loss=0.17119399601450333
Epoch #224: loss=0.12054614994961482
Epoch #225: loss=0.08304291462095884
Epoch #226: loss=0.08765865611628844
Epoch #227: loss=0.09079895562563951
Epoch #228: loss=0.0733036996366886
Epoch #229: loss=0.04975383134128956
Epoch #230: loss=0.04960246813985018
Epoch #231: loss=0.052366640633688524
Epoch #232: loss=0.054431284133058325
Epoch #233: loss=0.04159002142170301
Epoch #234: loss=0.046440554245446734
Epoch #235: loss=0.0518655924914548
Epoch #236: loss=0.09802199248224497
Epoch #237: loss=0.07280725584580348
Epoch #238: loss=0.044126746316368766
Epoch #239: loss=0.050640583575631566
Epoch #240: loss=0.05378348380327225
Epoch #241: loss=0.0728472053574828
Epoch #242: loss=0.07743639706705625
Epoch #243: loss=0.11510378666795217
Epoch #244: loss=0.06097919200188839
Epoch #245: loss=0.05030269161439859
Epoch #246: loss=0.07214722531632735
Epoch #247: loss=0.059462449907396846
Epoch #248: loss=0.0616518879452577
Epoch #249: loss=0.05585470817123468

Training time: 0:09:13.583491

Finished.
n2one setting weather -> ETTh1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2025/model.pkl', muti_dataset='weather', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.72846e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.75212e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.5978020454964978, 'MAE': 0.5399668934588701}
Finished.
------------------------- record done -------------------------
n2one setting weather -> ETTh2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2025/model.pkl', muti_dataset='weather', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTh2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.67879e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=5.65825e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.2611794048928992, 'MAE': 0.36214232652327655}
Finished.
------------------------- record done -------------------------
n2one setting weather -> ETTm1
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2025/model.pkl', muti_dataset='weather', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm1')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.49324e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.76411e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.49324e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.4831555077614474, 'MAE': 0.4830240700298845}
Finished.
------------------------- record done -------------------------
n2one setting weather -> ETTm2
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2025/model.pkl', muti_dataset='weather', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='ETTm2')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.50053e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.75585e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.50053e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.17584064451497752, 'MAE': 0.29573207661406997}
Finished.
------------------------- record done -------------------------
n2one setting weather -> exchange
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2025/model.pkl', muti_dataset='weather', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='exchange')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.40006e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.19532000486655193, 'MAE': 0.30039665947859334}
Finished.
------------------------- record done -------------------------
n2one setting weather -> traffic
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2025/model.pkl', muti_dataset='weather', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='traffic')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.98405e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.93982e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.98405e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.805902338862071, 'MAE': 0.4579211787564025}
Finished.
------------------------- record done -------------------------
n2one setting weather -> electricity
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2025/model.pkl', muti_dataset='weather', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='electricity')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.03992e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=4.02003e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.03992e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.3750520239280982, 'MAE': 0.4186534031368138}
Finished.
------------------------- record done -------------------------
n2one setting weather -> weather
Dataset: ETTh1
Arguments: Namespace(batch_size=8, dataset='ETTh1', epochs=None, eval=False, gpu=6, irregular=0, iters=None, loader='forecast_csv', lr=0.001, max_threads=None, max_train_length=3000, model_path='./training/weather_epochs_250_seed_2025/model.pkl', muti_dataset='weather', random_seed=2025, record=1, repr_dims=320, run_name='forecast_multivar', save_every=None, seed=None, target='weather')
Loading data... /home/yupengz/ts2vec/datautils.py:136: FutureWarning: weekofyear and week have been deprecated, please use DatetimeIndex.isocalendar().week instead, which returns a Series.  To exactly reproduce the behavior of week and weekofyear and return an Index, you may call pd.Int64Index(idx.isocalendar().week)
  dt.weekofyear.to_numpy(),
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=1.45068e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
/home/yupengz/anaconda3/envs/TimesNet/lib/python3.8/site-packages/sklearn/linear_model/_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=3.02618e-08): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T
Evaluation result: {'MSE': 0.594273298856634, 'MAE': 0.583756655581127}
Finished.
------------------------- record done -------------------------
